{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/js/color.global.min.js","path":"js/color.global.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/js/load-settings.js","path":"js/load-settings.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/js/light-dark-switch.js","path":"js/light-dark-switch.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-128.png","path":"images/favicon-dark-128.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-180.png","path":"images/favicon-dark-180.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-128.png","path":"images/favicon-light-128.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-192.png","path":"images/favicon-dark-192.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-32.png","path":"images/favicon-dark-32.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-180.png","path":"images/favicon-light-180.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-32.png","path":"images/favicon-light-32.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-192.png","path":"images/favicon-light-192.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/tile.png","path":"images/tile.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Bold.ttf","path":"css/fonts/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Medium.ttf","path":"css/fonts/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Regular.ttf","path":"css/fonts/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/all.css","path":"fontawesome/css/all.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/brands.css","path":"fontawesome/css/brands.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/brands.min.css","path":"fontawesome/css/brands.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/all.min.css","path":"fontawesome/css/all.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/fontawesome.css","path":"fontawesome/css/fontawesome.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/regular.css","path":"fontawesome/css/regular.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/fontawesome.min.css","path":"fontawesome/css/fontawesome.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/regular.min.css","path":"fontawesome/css/regular.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/solid.css","path":"fontawesome/css/solid.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/solid.min.css","path":"fontawesome/css/solid.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/svg-with-js.css","path":"fontawesome/css/svg-with-js.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/svg-with-js.min.css","path":"fontawesome/css/svg-with-js.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v4-font-face.css","path":"fontawesome/css/v4-font-face.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v4-font-face.min.css","path":"fontawesome/css/v4-font-face.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v4-shims.css","path":"fontawesome/css/v4-shims.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-brands-400.ttf","path":"fontawesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v4-shims.min.css","path":"fontawesome/css/v4-shims.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v5-font-face.css","path":"fontawesome/css/v5-font-face.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v5-font-face.min.css","path":"fontawesome/css/v5-font-face.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-brands-400.woff2","path":"fontawesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-regular-400.ttf","path":"fontawesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-regular-400.woff2","path":"fontawesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-solid-900.ttf","path":"fontawesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-v4compatibility.woff2","path":"fontawesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-v4compatibility.ttf","path":"fontawesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-solid-900.woff2","path":"fontawesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/vivia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-180.png","path":"images/favicon-dark-180.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-192.png","path":"images/favicon-dark-192.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-128.png","path":"images/favicon-dark-128.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-32.png","path":"images/favicon-dark-32.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-128.png","path":"images/favicon-light-128.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-180.png","path":"images/favicon-light-180.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/color.global.min.js","path":"js/color.global.min.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-192.png","path":"images/favicon-light-192.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/tile.png","path":"images/tile.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/light-dark-switch.js","path":"js/light-dark-switch.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-32.png","path":"images/favicon-light-32.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/load-settings.js","path":"js/load-settings.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/Roboto-Medium.ttf","path":"css/fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/Roboto-Bold.ttf","path":"css/fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/Roboto-Regular.ttf","path":"css/fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1699261906319},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1699261927895},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1699261928656},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1699261928743},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1699261928736},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1699261928740},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699261928746},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699261928754},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699261928750},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1699261928757},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1699261928651},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1699261928763},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1699261928773},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1699261928766},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1699261928777},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1699261928760},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1699261928770},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1699261928779},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1699261928783},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1699261928789},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1699261928794},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1699261928791},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1699261928785},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1699261928802},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1699261928796},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1699261928804},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1699261928809},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1699261928806},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1699261928798},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1699261928813},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1699261928811},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1699261928816},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1699261928822},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1699261928819},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1699261928824},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1699261928829},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1699261928374},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1699261928479},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1699261928515},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1699261928826},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1699261928286},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1699261928488},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1699261928558},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1699261928610},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1699261928522},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1699261928313},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1699261928146},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1699261928093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1699261928186},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1699261928405},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1699261928458},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1699261928434},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1699261928244},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1699261928497},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1699261928469},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1699261928448},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1699261928551},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1699261928358},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1699261928537},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1699261928562},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1699261928529},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1699261928665},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1699261928670},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1699261928732},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1699261927978},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1699261928339},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1699261928644},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1699261928389},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1699261928678},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1699261928507},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1699261928546},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1699261928684},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1699261928568},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1699261928419},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1699261928688},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1699261928693},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1699261928710},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1699261928718},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1699261928705},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1699261928700},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1699261928713},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1699261928727},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1699261928730},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1699261928721},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1699261928627},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1699261928638},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1699261928603},{"_id":"themes/vivia/.gitattributes","hash":"ba3dfe345280bdcc5e817bb02cf49b8b8d8e1c4c","modified":1697636474000},{"_id":"themes/vivia/.npmignore","hash":"d255b2b3c9fe8143bae5e64c31a64a5d3d300637","modified":1697636474000},{"_id":"themes/vivia/README.md","hash":"f3bb9857bd474e06d9fa42cc1911c6ee8d86649f","modified":1697636474000},{"_id":"themes/vivia/.gitignore","hash":"4c78c751a5bbca6b54ad06922947573c967d51c8","modified":1697636474000},{"_id":"themes/vivia/README.zh-CN.md","hash":"8b614f3b300fd0b4a4b7858b0897cd55ae00ef48","modified":1697636474000},{"_id":"themes/vivia/LICENSE","hash":"1039079fb6969c255e3df9a411ff5f94702f53ad","modified":1697636474000},{"_id":"themes/vivia/example_config.vivia.yml","hash":"1105cff0e9967389176aeb64e26530665af80aa1","modified":1697636474000},{"_id":"themes/vivia/package.json","hash":"554a6275e723d94bcc8f1a2608fce23c0afc692a","modified":1697636474000},{"_id":"themes/vivia/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699262172021},{"_id":"themes/vivia/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699262172021},{"_id":"themes/vivia/example_zh_CN_config.vivia.yml","hash":"756b4d5965cff0cb89062ab52d50714f92532a01","modified":1697636474000},{"_id":"themes/vivia/package-lock.json","hash":"86920097232f4b935846067845e83be3df9c0d16","modified":1697636474000},{"_id":"themes/vivia/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699262172021},{"_id":"themes/vivia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1699262172044},{"_id":"themes/vivia/languages/zh-TW.yml","hash":"9098818e791e19d9921e256c771664b2cd999e13","modified":1697636474000},{"_id":"themes/vivia/languages/zh-CN.yml","hash":"89154c7877fa274d340e2adb2241167abda71c60","modified":1697636474000},{"_id":"themes/vivia/languages/en.yml","hash":"b4b55e56a0554bfdc383650742c2038cef777142","modified":1697636474000},{"_id":"themes/vivia/layout/index.ejs","hash":"c9d8dca730a254ab3f48309677a3cb994e513ad6","modified":1697636474000},{"_id":"themes/vivia/languages/zh.yml","hash":"e56bebd19d2abd1698e9aa87d337941957977468","modified":1699262172024},{"_id":"themes/vivia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1699262172046},{"_id":"themes/vivia/layout/layout.ejs","hash":"d82f3126481bb203892eee22f6614d77080d57ad","modified":1697636474000},{"_id":"themes/vivia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1699262172044},{"_id":"themes/vivia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1699262172047},{"_id":"themes/vivia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1699262172047},{"_id":"themes/vivia/.github/workflows/npm-publish.yml","hash":"9d4681e7c942968c04f0795707dfcdb5479b3360","modified":1697636474000},{"_id":"themes/vivia/scripts/categories-process.js","hash":"9af1d40e5408ebab5733fcaca6e86d5ebed8a850","modified":1697636474000},{"_id":"themes/vivia/scripts/archive-helper.js","hash":"a0fcc99f909f668c1d3d2dd63e9911266f23fa57","modified":1697636474000},{"_id":"themes/vivia/scripts/color-generate.js","hash":"90dff57087b692d2aa687c49980a0eed56a2f058","modified":1697636474000},{"_id":"themes/vivia/layout/_icon/rss_feed.ejs","hash":"8bac3aa45c0e7a55f38783e7350039d0b1adb48b","modified":1699262172027},{"_id":"themes/vivia/layout/_icon/menu.ejs","hash":"47f04d2c6413beaffee57d6164b5637bdb2cd1cb","modified":1699262172026},{"_id":"themes/vivia/layout/_widget/archive.ejs","hash":"1dd3efd775f09f3e5a0e0205ddb8388851dfad57","modified":1697636474000},{"_id":"themes/vivia/layout/_icon/dark_mode.ejs","hash":"0ea0e23fb16103f424591cf46939fcf07738ccc1","modified":1699262172025},{"_id":"themes/vivia/layout/_icon/navigate_next.ejs","hash":"c3ecb137ebc9bb949aebe3fc0631b05ba578c8e1","modified":1699262172027},{"_id":"themes/vivia/layout/_widget/profile.ejs","hash":"ccd8c2442f3437b6752946f4d573edefaf2cd4c0","modified":1697636474000},{"_id":"themes/vivia/layout/_widget/color.ejs","hash":"9e00f6c621db3c5c659b03d1dad6caa90d6217d9","modified":1697636474000},{"_id":"themes/vivia/layout/_icon/navigate_before.ejs","hash":"1c11e29aa2719674b161c072e53576ac38b1ee65","modified":1699262172026},{"_id":"themes/vivia/layout/_icon/wb_sunny.ejs","hash":"ef254cc64ba10918218a6672e34fd5f6d4ce08bb","modified":1699262172028},{"_id":"themes/vivia/layout/_widget/recent_posts.ejs","hash":"647f4151e7fca48af2b727228b84deb0652a6376","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1697636474000},{"_id":"themes/vivia/layout/_widget/category.ejs","hash":"cc465be58bf6aeee7947e9cf9563c651e42e7a5d","modified":1697636474000},{"_id":"themes/vivia/layout/_widget/tag.ejs","hash":"f231a62130014c07dc1888ed30399bcfde3ed0c0","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/back-to-top.ejs","hash":"a5132c5ab08b55891bcfe10d36ec83cacbfd60af","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/article.ejs","hash":"32ed2242a691f070b8e294b1289d83a9c9726f9e","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/footer.ejs","hash":"e78a36c94879f70df2ec615ccc2b5d459eeb4fe7","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/banner.ejs","hash":"7f9c0b7d10238b45c1c1a65df7f801c904ae898c","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/archive.ejs","hash":"2106e7f5f73c9c8d592dcd7dab4359d23037f382","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/baidu-analytics.ejs","hash":"5951d0adc0490ff4d5c956e54d4828119755d1e7","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/head.ejs","hash":"b52fd8595ec4849944564721810e74948895675f","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/navbar.ejs","hash":"7d4a434cba72a3bca58b59fab4ce15894da68049","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/sidebar.ejs","hash":"97eee27bfb59ccc109fcd9ce87963f686c2b6ba9","modified":1697636474000},{"_id":"themes/vivia/source/images/favicon-dark-128.png","hash":"44cceeef5fddc81a613faf6caa53bac139a6b564","modified":1699262172090},{"_id":"themes/vivia/source/images/favicon-dark-32.png","hash":"8ef87b664e5c6250e5badd7312fe192e30fe2e83","modified":1699262172091},{"_id":"themes/vivia/source/images/favicon-dark-180.png","hash":"4771a6bd0386924ad31719f8999c036b36ad5688","modified":1699262172091},{"_id":"themes/vivia/source/images/favicon-dark-192.png","hash":"929acfdd6e69ceacdecf40a03ed520f826750c06","modified":1699262172091},{"_id":"themes/vivia/source/images/favicon-light-192.png","hash":"0d5f76f309b6a0661d695d6bf4db8ef8a56e4ae5","modified":1699262172093},{"_id":"themes/vivia/source/js/color.global.min.js","hash":"8140005be5afebb828b2890ce6e686ece34e78df","modified":1697636474000},{"_id":"themes/vivia/source/images/favicon-light-128.png","hash":"9c93c4ac222da14ca4f43b2d54573ce4099a161b","modified":1699262172093},{"_id":"themes/vivia/source/images/favicon-light-180.png","hash":"6b26caab1d036726beaf47510bada4cddf253b24","modified":1699262172093},{"_id":"themes/vivia/source/images/favicon-light-32.png","hash":"604915a91ddede7874d5dcfa4de0bc4b04ae5da6","modified":1699262172094},{"_id":"themes/vivia/source/images/tile.png","hash":"fbc016bfb004a5ca4a8c6f0b078ae320ec98ba20","modified":1699262172094},{"_id":"themes/vivia/source/js/light-dark-switch.js","hash":"371eacee9af459d04de60190c549fe7f8374be36","modified":1697636474000},{"_id":"themes/vivia/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1697636474000},{"_id":"themes/vivia/source/css/_extend.styl","hash":"cc37f2c5f8ccdb77f87cf8ed35ea71a2d66c9605","modified":1697636474000},{"_id":"themes/vivia/source/css/_variables.styl","hash":"376b7ccf4d4ef0706b3e45c059184a41cdde52c7","modified":1697636474000},{"_id":"themes/vivia/source/js/load-settings.js","hash":"f420677aad3d200b4f92fca60ab5cb47c7db9a21","modified":1697636474000},{"_id":"themes/vivia/source/css/style.styl","hash":"a24d0d9ef5f292bfe3382435d23ffe5a6fa76354","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/post/category.ejs","hash":"9f06ff87e50ff5005080c6bdebf4a0bbaf550aba","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/post/nav.ejs","hash":"86886e1ca10aec7087b44048f92719d24ac738f4","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/post/gallery.ejs","hash":"0282d116251bd60b91e05c786386e4d570035996","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/post/title.ejs","hash":"14e34508135bf83763d8c1f1f8d8467dff689002","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/archive.styl","hash":"ee7b27115aed0182dc9ac51b637a2bf986b56f55","modified":1697636474000},{"_id":"themes/vivia/layout/_partial/post/date.ejs","hash":"760970e719ef973c18ac36c9fc9e13d0edaaaa5a","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/article.styl","hash":"9e8ec0aa97f6a21a54b0bbe29f0943892eb465e3","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/back-to-top.styl","hash":"0889a434c03d9fded8820ebbeaa5357d725766b6","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/highlight.styl","hash":"3abb118aae2dba149cb616bbcbfed129ccfcb5b7","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/footer.styl","hash":"f038558bfe427b2cedd029cb9638c1d70d936763","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/comment.styl","hash":"35cca399adc17633885ca416e8c48acd468d0e31","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/header.styl","hash":"83633c613f0d4ad6caa82f87795799edde29fbb8","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/sidebar-aside.styl","hash":"04a0c9f6b86d62069a1349fdb7803d745759fe38","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/sidebar.styl","hash":"69a08fe059c5e2ee00760ae61f1123d61d90c39a","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/settings.styl","hash":"6e67f8c3659f6a9dd49e513a595a01c1afebf87c","modified":1697636474000},{"_id":"themes/vivia/source/css/_util/color.styl","hash":"8ad148e35b7cb2a0612ff2c0fb09c0acc382bb5e","modified":1697636474000},{"_id":"themes/vivia/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1697636474000},{"_id":"themes/vivia/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1697636474000},{"_id":"themes/vivia/source/css/_partial/main-title.styl","hash":"73df1241b15d62cc19665883cd789440d4c7e7a6","modified":1697636474000},{"_id":"themes/vivia/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1697636474000},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1699262172088},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1699262172089},{"_id":"themes/vivia/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1699262172063},{"_id":"themes/vivia/source/css/fonts/Roboto-Medium.ttf","hash":"3c6a09fcc6a454924c81af7dff94fc6d399ed79b","modified":1699262172070},{"_id":"themes/vivia/source/css/fonts/Roboto-Bold.ttf","hash":"62442a18a9fe9457c1afeabf683d263a691b7798","modified":1699262172066},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1699262172085},{"_id":"themes/vivia/source/css/fonts/Roboto-Regular.ttf","hash":"56c5c0d38bde4c1f1549dda43db37b09c608aad3","modified":1699262172075},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1699262172078},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1697636474000},{"_id":"themes/Vivia/.gitignore","hash":"dde61fc2d985d9256a5041e55b285d6803b9010d","modified":1699262172017},{"_id":"themes/Vivia/.npmignore","hash":"c72a21ea54df5c4700c9aca48fb2f0d50495975b","modified":1699262172018},{"_id":"themes/Vivia/.gitattributes","hash":"78d61b8d5577d8909a33e526f0b968a5a6a81c1c","modified":1699262172015},{"_id":"themes/Vivia/README.md","hash":"7b9d473bf3f164593209cd7dd313dd0dc10a5038","modified":1699262172018},{"_id":"themes/Vivia/README.zh-CN.md","hash":"af91b61243c77f174e5fa4f3bff47b72d61052dd","modified":1699262172019},{"_id":"themes/Vivia/LICENSE","hash":"dc75163d38c26492bbd3bd179b43dc6156489bf9","modified":1699262172018},{"_id":"themes/Vivia/example_config.vivia.yml","hash":"af22cf4fa79e48d78138aa6308f3a7953363418e","modified":1699262172019},{"_id":"themes/Vivia/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699262172021},{"_id":"themes/Vivia/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699262172021},{"_id":"themes/Vivia/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699262172021},{"_id":"themes/Vivia/languages/en.yml","hash":"b3606fd1531f851419551b1eede2a7a2c4b06304","modified":1699262172022},{"_id":"themes/Vivia/languages/zh.yml","hash":"e56bebd19d2abd1698e9aa87d337941957977468","modified":1699262172024},{"_id":"themes/Vivia/languages/zh-TW.yml","hash":"e652bd780c02c2ab3a25c834140618902ece1499","modified":1699262172024},{"_id":"themes/Vivia/languages/zh-CN.yml","hash":"6d3744d6c14eb2590249ed59892d06fbd1929a5a","modified":1699262172023},{"_id":"themes/Vivia/example_zh_CN_config.vivia.yml","hash":"6cc35c32b83519d156d6fc51db3172b2daded783","modified":1699262172019},{"_id":"themes/Vivia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1699262172044},{"_id":"themes/Vivia/layout/index.ejs","hash":"855cf21ff57263654dc0c70271718c7dc2c04add","modified":1699262172044},{"_id":"themes/Vivia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1699262172044},{"_id":"themes/Vivia/layout/layout.ejs","hash":"8ddd59e30101e54188983b6a29bd60acd7bc461b","modified":1699262172046},{"_id":"themes/Vivia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1699262172047},{"_id":"themes/Vivia/package.json","hash":"ae13ba0cd8e2db943fbb119240fffba0584429de","modified":1699262172048},{"_id":"themes/Vivia/scripts/categories-process.js","hash":"a503a17887c1f5c020db1e3600fcc37ae6f80fb7","modified":1699262172050},{"_id":"themes/Vivia/package-lock.json","hash":"8ea4c13fdd08976a04078539ec4ac41f7f8c0f27","modified":1699262172048},{"_id":"themes/Vivia/scripts/archive-helper.js","hash":"df20e8db0eed9034ad0a7571120da9abaf02a1ba","modified":1699262172049},{"_id":"themes/Vivia/scripts/color-generate.js","hash":"4437ea1ccf9159ececb4015cc6cc72a84e7a1930","modified":1699262172050},{"_id":"themes/Vivia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1699262172046},{"_id":"themes/Vivia/.github/workflows/npm-publish.yml","hash":"e3f546d7137a44b5e19edc964e594c7e4e08cdc7","modified":1699262172016},{"_id":"themes/Vivia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1699262172047},{"_id":"themes/Vivia/layout/_icon/dark_mode.ejs","hash":"0ea0e23fb16103f424591cf46939fcf07738ccc1","modified":1699262172025},{"_id":"themes/Vivia/layout/_icon/navigate_before.ejs","hash":"1c11e29aa2719674b161c072e53576ac38b1ee65","modified":1699262172026},{"_id":"themes/Vivia/layout/_icon/navigate_next.ejs","hash":"c3ecb137ebc9bb949aebe3fc0631b05ba578c8e1","modified":1699262172027},{"_id":"themes/Vivia/layout/_icon/menu.ejs","hash":"47f04d2c6413beaffee57d6164b5637bdb2cd1cb","modified":1699262172026},{"_id":"themes/Vivia/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1699262172028},{"_id":"themes/Vivia/layout/_icon/rss_feed.ejs","hash":"8bac3aa45c0e7a55f38783e7350039d0b1adb48b","modified":1699262172027},{"_id":"themes/Vivia/layout/_partial/archive.ejs","hash":"b5d71356d87a8c3e6ff4effdf6c42609cb30856b","modified":1699262172029},{"_id":"themes/Vivia/layout/_icon/wb_sunny.ejs","hash":"ef254cc64ba10918218a6672e34fd5f6d4ce08bb","modified":1699262172028},{"_id":"themes/Vivia/layout/_partial/article.ejs","hash":"6faeab1bf4dcd31f609de61db2788107b19f54a7","modified":1699262172029},{"_id":"themes/Vivia/layout/_partial/back-to-top.ejs","hash":"7d9f69e8376cf84ee1f19828682c4782ed59a41a","modified":1699262172031},{"_id":"themes/Vivia/layout/_partial/banner.ejs","hash":"9656debca5f0f53c1982c6daab6a52e8923e7983","modified":1699262172033},{"_id":"themes/Vivia/layout/_partial/gauges-analytics.ejs","hash":"165008f72ed77f0da879d132563d763369d26472","modified":1699262172034},{"_id":"themes/Vivia/layout/_partial/baidu-analytics.ejs","hash":"41047fab0aae2d92b8614c1ef1423a4e83b900ea","modified":1699262172031},{"_id":"themes/Vivia/layout/_partial/google-analytics.ejs","hash":"9fc18f1fd5bec16f8a3d30b0ce38458485c398b3","modified":1699262172034},{"_id":"themes/Vivia/layout/_partial/footer.ejs","hash":"3cf3b39dc04045df3cc7c92c95fe28463a856438","modified":1699262172033},{"_id":"themes/Vivia/layout/_partial/navbar.ejs","hash":"bcd3762cf28aedde3a7c418e04249f9ba686e94e","modified":1699262172036},{"_id":"themes/Vivia/layout/_widget/archive.ejs","hash":"84779c10d867eedbe394f210e35dc06b44daab4b","modified":1699262172040},{"_id":"themes/Vivia/layout/_partial/head.ejs","hash":"036e10adf7de2941fc63783225c5b3e46460c90c","modified":1699262172035},{"_id":"themes/Vivia/layout/_widget/color.ejs","hash":"2358392430560df30299753537bc45891cf86977","modified":1699262172041},{"_id":"themes/Vivia/layout/_widget/category.ejs","hash":"11cac02c0dfad00fc787452a8aa83ecf6e3da196","modified":1699262172041},{"_id":"themes/Vivia/layout/_widget/profile.ejs","hash":"edea2c26bb4ac3b8e925b7191bd871e119cb915a","modified":1699262172041},{"_id":"themes/Vivia/layout/_partial/sidebar.ejs","hash":"5e6e850b6d7387bed437b5b3b803ddea0638dbf5","modified":1699262172040},{"_id":"themes/Vivia/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1699262172035},{"_id":"themes/Vivia/source/css/_extend.styl","hash":"c9444428bac649cb155c5625f24936971f942124","modified":1699262172051},{"_id":"themes/Vivia/source/images/favicon-dark-128.png","hash":"44cceeef5fddc81a613faf6caa53bac139a6b564","modified":1699262172090},{"_id":"themes/Vivia/source/images/favicon-dark-180.png","hash":"4771a6bd0386924ad31719f8999c036b36ad5688","modified":1699262172091},{"_id":"themes/Vivia/source/images/favicon-light-128.png","hash":"9c93c4ac222da14ca4f43b2d54573ce4099a161b","modified":1699262172093},{"_id":"themes/Vivia/source/css/_variables.styl","hash":"4f4b3d6760d8817bac82b8cf38ff5cc6d07d4d9f","modified":1699262172059},{"_id":"themes/Vivia/source/images/favicon-dark-192.png","hash":"929acfdd6e69ceacdecf40a03ed520f826750c06","modified":1699262172091},{"_id":"themes/Vivia/source/images/favicon-light-180.png","hash":"6b26caab1d036726beaf47510bada4cddf253b24","modified":1699262172093},{"_id":"themes/Vivia/source/images/favicon-dark-32.png","hash":"8ef87b664e5c6250e5badd7312fe192e30fe2e83","modified":1699262172091},{"_id":"themes/Vivia/layout/_widget/tag.ejs","hash":"c438b8fa917b77c70d1add9729a948e03608d2e6","modified":1699262172043},{"_id":"themes/Vivia/source/images/favicon-light-32.png","hash":"604915a91ddede7874d5dcfa4de0bc4b04ae5da6","modified":1699262172094},{"_id":"themes/Vivia/layout/_widget/recent_posts.ejs","hash":"01a612252514f79fed35d2726e4e8c11882be0f3","modified":1699262172043},{"_id":"themes/Vivia/source/images/favicon-light-192.png","hash":"0d5f76f309b6a0661d695d6bf4db8ef8a56e4ae5","modified":1699262172093},{"_id":"themes/Vivia/source/js/color.global.min.js","hash":"9f9484bee263e19d060552c42c79bb9e151b54a0","modified":1699262172095},{"_id":"themes/Vivia/source/js/light-dark-switch.js","hash":"112842dd773019c91d6f4b32dcda7ae01ca8e05e","modified":1699262172097},{"_id":"themes/Vivia/source/js/load-settings.js","hash":"17fa6bd9a652f822348e00c6432d44db42828df0","modified":1699262172097},{"_id":"themes/Vivia/source/css/style.styl","hash":"82e6d6ed7c0f4337860bc10a226548de3d9bb970","modified":1699262172089},{"_id":"themes/Vivia/source/images/tile.png","hash":"fbc016bfb004a5ca4a8c6f0b078ae320ec98ba20","modified":1699262172094},{"_id":"themes/Vivia/source/js/script.js","hash":"faef3cfd08d0628d0e0840a21a5a3fa4d6e1703d","modified":1699262172097},{"_id":"themes/Vivia/layout/_partial/post/category.ejs","hash":"c484df219ff1710c09db50ff48467a701aefabf1","modified":1699262172036},{"_id":"themes/Vivia/layout/_partial/post/date.ejs","hash":"b82ba6d625fdce3e29d69ad888eddeb31c76b28b","modified":1699262172037},{"_id":"themes/Vivia/layout/_partial/post/nav.ejs","hash":"4fda522abb4ad4a9814c77d35f4b6a07ab32508d","modified":1699262172037},{"_id":"themes/Vivia/layout/_partial/post/gallery.ejs","hash":"9e5d84a50745caeeae376cf8691ef20cc9d386cb","modified":1699262172037},{"_id":"themes/Vivia/source/css/_partial/article.styl","hash":"edb18b4cbef2f175f7e19191a393af8a7c9d6214","modified":1699262172052},{"_id":"themes/Vivia/source/css/_partial/archive.styl","hash":"e03cb2013f1e19257c9b4059004e6ef94b15de71","modified":1699262172051},{"_id":"themes/Vivia/source/css/_partial/back-to-top.styl","hash":"f01739d606b8d11d721fe2f080c2b09a8dbd7876","modified":1699262172053},{"_id":"themes/Vivia/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1699262172039},{"_id":"themes/Vivia/source/css/_partial/comment.styl","hash":"df615699d04a4817f99d7d6b9de8ab5b391287bd","modified":1699262172053},{"_id":"themes/Vivia/layout/_partial/post/title.ejs","hash":"112f1fed9afa71896a40f50a5eb8fe4e5d5fb1c0","modified":1699262172039},{"_id":"themes/Vivia/source/css/_partial/header.styl","hash":"3972fe54a1ccda7264e698ea42ec35cc78b5f960","modified":1699262172054},{"_id":"themes/Vivia/source/css/_partial/footer.styl","hash":"ad9294cf869c956e834e7ec31388c88763ec17c2","modified":1699262172054},{"_id":"themes/Vivia/source/css/_partial/settings.styl","hash":"1b649aa855c08632a92b428ee1f65bdcb8cda905","modified":1699262172055},{"_id":"themes/Vivia/source/css/_partial/highlight.styl","hash":"885df08cc8180cf1e597703682346d22ec7bddb3","modified":1699262172055},{"_id":"themes/Vivia/source/css/_partial/main-title.styl","hash":"234912a312eeb3fbb519104edf9d08733efdd74a","modified":1699262172055},{"_id":"themes/Vivia/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1699262172057},{"_id":"themes/Vivia/source/css/_partial/sidebar-aside.styl","hash":"1abae66bddc24dcd876491d5f5ebe8a0665ab63a","modified":1699262172056},{"_id":"themes/Vivia/source/css/_partial/sidebar.styl","hash":"d03ca7b9e56e2d3967b6214d42c229bdb6bdf98f","modified":1699262172057},{"_id":"themes/Vivia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1699262172058},{"_id":"themes/Vivia/source/css/_util/color.styl","hash":"47d85ad3f88a1dd911f057a956e64c7d376b667a","modified":1699262172058},{"_id":"themes/Vivia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1699262172059},{"_id":"themes/Vivia/source/js/jquery-3.4.1.min.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1699262172096},{"_id":"themes/Vivia/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1699262172089},{"_id":"themes/Vivia/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1699262172088},{"_id":"themes/Vivia/source/css/fonts/Roboto-Bold.ttf","hash":"62442a18a9fe9457c1afeabf683d263a691b7798","modified":1699262172066},{"_id":"themes/Vivia/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1699262172063},{"_id":"themes/Vivia/source/css/fonts/Roboto-Medium.ttf","hash":"3c6a09fcc6a454924c81af7dff94fc6d399ed79b","modified":1699262172070},{"_id":"themes/Vivia/source/css/fonts/Roboto-Regular.ttf","hash":"56c5c0d38bde4c1f1549dda43db37b09c608aad3","modified":1699262172075},{"_id":"themes/Vivia/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1699262172078},{"_id":"themes/Vivia/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1699262172085},{"_id":"themes/Vivia/source/css/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1699262172082},{"_id":"source/about/index.md","hash":"0f73e7dcad8cd762c4da73976f768d70b422e00d","modified":1699262908203},{"_id":"node_modules/hexo-theme-vivia/.gitattributes","hash":"ba3dfe345280bdcc5e817bb02cf49b8b8d8e1c4c","modified":1699262769287},{"_id":"node_modules/hexo-theme-vivia/README.zh-CN.md","hash":"276ec37ef46e782b353e5a953a6c9facd4022eaa","modified":1699262770383},{"_id":"node_modules/hexo-theme-vivia/README.md","hash":"96ea5f5c9fdd46c24a071c1fc44ab6c338047d89","modified":1699262770382},{"_id":"node_modules/hexo-theme-vivia/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699262774056},{"_id":"node_modules/hexo-theme-vivia/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699262774060},{"_id":"node_modules/hexo-theme-vivia/LICENSE","hash":"1039079fb6969c255e3df9a411ff5f94702f53ad","modified":1699262769299},{"_id":"node_modules/hexo-theme-vivia/_config.yml","hash":"bc429e8233e26aad0b578ec0d5f87bab9156653c","modified":1699262774053},{"_id":"node_modules/hexo-theme-vivia/languages/en.yml","hash":"b4b55e56a0554bfdc383650742c2038cef777142","modified":1699262774065},{"_id":"node_modules/hexo-theme-vivia/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699262774063},{"_id":"node_modules/hexo-theme-vivia/package.json","hash":"99c17a9278daba7310d6920960efb70f9e0581df","modified":1699262770380},{"_id":"node_modules/hexo-theme-vivia/languages/zh-TW.yml","hash":"9098818e791e19d9921e256c771664b2cd999e13","modified":1699262774070},{"_id":"node_modules/hexo-theme-vivia/example_config.vivia.yml","hash":"92e9b268c3801f8fa97433c462e695a8925f80c1","modified":1699262774065},{"_id":"node_modules/hexo-theme-vivia/languages/zh-CN.yml","hash":"89154c7877fa274d340e2adb2241167abda71c60","modified":1699262774068},{"_id":"node_modules/hexo-theme-vivia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1699262769633},{"_id":"node_modules/hexo-theme-vivia/scripts/archive-helper.js","hash":"a0fcc99f909f668c1d3d2dd63e9911266f23fa57","modified":1699262770075},{"_id":"node_modules/hexo-theme-vivia/languages/zh.yml","hash":"e56bebd19d2abd1698e9aa87d337941957977468","modified":1699262774072},{"_id":"node_modules/hexo-theme-vivia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1699262769662},{"_id":"node_modules/hexo-theme-vivia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1699262769670},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/dark_mode.ejs","hash":"0ea0e23fb16103f424591cf46939fcf07738ccc1","modified":1699262769637},{"_id":"node_modules/hexo-theme-vivia/layout/index.ejs","hash":"c9d8dca730a254ab3f48309677a3cb994e513ad6","modified":1699262769652},{"_id":"node_modules/hexo-theme-vivia/scripts/color-generate.js","hash":"90dff57087b692d2aa687c49980a0eed56a2f058","modified":1699262770078},{"_id":"node_modules/hexo-theme-vivia/layout/layout.ejs","hash":"d28ff99ec0483e5fc0b932ca36afcbf8eeb75dc4","modified":1699262769653},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/menu.ejs","hash":"47f04d2c6413beaffee57d6164b5637bdb2cd1cb","modified":1699262769654},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/navigate_before.ejs","hash":"1c11e29aa2719674b161c072e53576ac38b1ee65","modified":1699262769658},{"_id":"node_modules/hexo-theme-vivia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1699262769663},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/navigate_next.ejs","hash":"c3ecb137ebc9bb949aebe3fc0631b05ba578c8e1","modified":1699262769660},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/wb_sunny.ejs","hash":"ef254cc64ba10918218a6672e34fd5f6d4ce08bb","modified":1699262769671},{"_id":"node_modules/hexo-theme-vivia/scripts/categories-process.js","hash":"dbb502b14015ca19b74db62a590319f790b28711","modified":1699262770077},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/rss_feed.ejs","hash":"8bac3aa45c0e7a55f38783e7350039d0b1adb48b","modified":1699262769666},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/back-to-top.ejs","hash":"a5132c5ab08b55891bcfe10d36ec83cacbfd60af","modified":1699262769625},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/archive.ejs","hash":"2106e7f5f73c9c8d592dcd7dab4359d23037f382","modified":1699262769615},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/baidu-analytics.ejs","hash":"5951d0adc0490ff4d5c956e54d4828119755d1e7","modified":1699262769627},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/banner.ejs","hash":"7f9c0b7d10238b45c1c1a65df7f801c904ae898c","modified":1699262769628},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1699262769614},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1699262769647},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/article.ejs","hash":"5f26c4dfc4ab6336122bfba92faf1630a2549d8d","modified":1699262769622},{"_id":"node_modules/hexo-theme-vivia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1699262769619},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1699262769645},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/footer.ejs","hash":"e78a36c94879f70df2ec615ccc2b5d459eeb4fe7","modified":1699262769641},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/archive.ejs","hash":"1dd3efd775f09f3e5a0e0205ddb8388851dfad57","modified":1699262769617},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/category.ejs","hash":"cc465be58bf6aeee7947e9cf9563c651e42e7a5d","modified":1699262769631},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/color.ejs","hash":"9e00f6c621db3c5c659b03d1dad6caa90d6217d9","modified":1699262769635},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/navbar.ejs","hash":"7d4a434cba72a3bca58b59fab4ce15894da68049","modified":1699262769658},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/sidebar.ejs","hash":"97eee27bfb59ccc109fcd9ce87963f686c2b6ba9","modified":1699262769666},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/profile.ejs","hash":"ccd8c2442f3437b6752946f4d573edefaf2cd4c0","modified":1699262769663},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1699262769655},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/tag.ejs","hash":"f231a62130014c07dc1888ed30399bcfde3ed0c0","modified":1699262769668},{"_id":"node_modules/hexo-theme-vivia/source/css/_variables.styl","hash":"376b7ccf4d4ef0706b3e45c059184a41cdde52c7","modified":1699262770818},{"_id":"node_modules/hexo-theme-vivia/source/css/_extend.styl","hash":"cc37f2c5f8ccdb77f87cf8ed35ea71a2d66c9605","modified":1699262770817},{"_id":"node_modules/hexo-theme-vivia/source/css/style.styl","hash":"a24d0d9ef5f292bfe3382435d23ffe5a6fa76354","modified":1699262770841},{"_id":"node_modules/hexo-theme-vivia/source/js/color.global.min.js","hash":"8140005be5afebb828b2890ce6e686ece34e78df","modified":1699262770372},{"_id":"node_modules/hexo-theme-vivia/source/js/load-settings.js","hash":"f420677aad3d200b4f92fca60ab5cb47c7db9a21","modified":1699262770378},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/recent_posts.ejs","hash":"647f4151e7fca48af2b727228b84deb0652a6376","modified":1699262769664},{"_id":"node_modules/hexo-theme-vivia/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1699262770379},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-128.png","hash":"44cceeef5fddc81a613faf6caa53bac139a6b564","modified":1699262770477},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-180.png","hash":"4771a6bd0386924ad31719f8999c036b36ad5688","modified":1699262770479},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-128.png","hash":"9c93c4ac222da14ca4f43b2d54573ce4099a161b","modified":1699262770483},{"_id":"node_modules/hexo-theme-vivia/source/js/light-dark-switch.js","hash":"371eacee9af459d04de60190c549fe7f8374be36","modified":1699262770377},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-180.png","hash":"6b26caab1d036726beaf47510bada4cddf253b24","modified":1699262770485},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-192.png","hash":"929acfdd6e69ceacdecf40a03ed520f826750c06","modified":1699262770481},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/head.ejs","hash":"b52fd8595ec4849944564721810e74948895675f","modified":1699262769651},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-32.png","hash":"604915a91ddede7874d5dcfa4de0bc4b04ae5da6","modified":1699262770487},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/category.ejs","hash":"9f06ff87e50ff5005080c6bdebf4a0bbaf550aba","modified":1699262769630},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/nav.ejs","hash":"86886e1ca10aec7087b44048f92719d24ac738f4","modified":1699262769656},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/gallery.ejs","hash":"0282d116251bd60b91e05c786386e4d570035996","modified":1699262769642},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/date.ejs","hash":"760970e719ef973c18ac36c9fc9e13d0edaaaa5a","modified":1699262769638},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-32.png","hash":"8ef87b664e5c6250e5badd7312fe192e30fe2e83","modified":1699262770483},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1699262769667},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-192.png","hash":"0d5f76f309b6a0661d695d6bf4db8ef8a56e4ae5","modified":1699262770485},{"_id":"node_modules/hexo-theme-vivia/source/images/tile.png","hash":"fbc016bfb004a5ca4a8c6f0b078ae320ec98ba20","modified":1699262770814},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/title.ejs","hash":"14e34508135bf83763d8c1f1f8d8467dff689002","modified":1699262769670},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/archive.styl","hash":"ee7b27115aed0182dc9ac51b637a2bf986b56f55","modified":1699262770822},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/back-to-top.styl","hash":"0889a434c03d9fded8820ebbeaa5357d725766b6","modified":1699262770825},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/article.styl","hash":"9e8ec0aa97f6a21a54b0bbe29f0943892eb465e3","modified":1699262770824},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/header.styl","hash":"83633c613f0d4ad6caa82f87795799edde29fbb8","modified":1699262770832},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/settings.styl","hash":"6e67f8c3659f6a9dd49e513a595a01c1afebf87c","modified":1699262770837},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/footer.styl","hash":"f038558bfe427b2cedd029cb9638c1d70d936763","modified":1699262770830},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/comment.styl","hash":"08253d81e739c4074d5ae697f2ca9068355dae2c","modified":1699262770829},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/sidebar-aside.styl","hash":"04a0c9f6b86d62069a1349fdb7803d745759fe38","modified":1699262770838},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/highlight.styl","hash":"3abb118aae2dba149cb616bbcbfed129ccfcb5b7","modified":1699262770833},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/main-title.styl","hash":"73df1241b15d62cc19665883cd789440d4c7e7a6","modified":1699262770834},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/sidebar.styl","hash":"69a08fe059c5e2ee00760ae61f1123d61d90c39a","modified":1699262770841},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1699262770839},{"_id":"node_modules/hexo-theme-vivia/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1699262770831},{"_id":"node_modules/hexo-theme-vivia/source/css/_util/color.styl","hash":"8ad148e35b7cb2a0612ff2c0fb09c0acc382bb5e","modified":1699262770828},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/brands.min.css","hash":"18b8f500bb4f772c7d7f39c3fab1478a74825339","modified":1699262769583},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/brands.css","hash":"8c4c541bc40f83787c6987e3ac681e4d3faa54c1","modified":1699262769580},{"_id":"node_modules/hexo-theme-vivia/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1699262770835},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/regular.min.css","hash":"659c14600584effc4b93be03a0160b21a90923b8","modified":1699262769596},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/regular.css","hash":"f9334e2a68dce5b03b07148ac9a93c5ad98fe99e","modified":1699262769595},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/solid.min.css","hash":"876c898134a50c7b8e42314fba36fdfef7df3a6e","modified":1699262769598},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/svg-with-js.min.css","hash":"b488e7f51b974eb12138921b606359553e7b6d3d","modified":1699262769603},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/solid.css","hash":"28c2b2461ee1078694ce253ae772f125ae4fa0ac","modified":1699262769597},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/svg-with-js.css","hash":"fb14f74f1ee5072ca4b6d79850616816d57789dd","modified":1699262769600},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v4-font-face.css","hash":"b266ee63ab30304fefbf89faff2bc8d0c61b9149","modified":1699262769604},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v4-shims.min.css","hash":"791742cd5dd90f208489f835d3924ee325695920","modified":1699262769610},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v4-shims.css","hash":"2e9933089ede320ba8c67509e0355aab49c5d293","modified":1699262769607},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v5-font-face.min.css","hash":"9b1d63f200b06ff5c6a306bd4c4404db38e78866","modified":1699262769611},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v5-font-face.css","hash":"f5fac79059b214cf7e82de28544d9685cc1db3bc","modified":1699262769611},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-regular-400.ttf","hash":"dad3ad71b383789bb62c249742ef59e34685e7d0","modified":1699262771532},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/v4-font-face.min.css","hash":"f32930ff09bccce04156af99f31231387af624f6","modified":1699262769605},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-regular-400.woff2","hash":"3119676750af0e0bc338cc4aad220bdc72c56cc5","modified":1699262773959},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-v4compatibility.ttf","hash":"52a84a6495e27f43e9762f2c2a9531d9fe15e9ee","modified":1699262772195},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-v4compatibility.woff2","hash":"dd7e4a76de26e9e39168dfac3fbb8a34a87b76bc","modified":1699262774040},{"_id":"node_modules/hexo-theme-vivia/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1699262770376},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1699262774049},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1699262773729},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/all.min.css","hash":"686e3160cff3fb1be2de10779754b40f15948208","modified":1699262769578},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/fontawesome.css","hash":"f1239ac4cd2cf265ed3fa0e5ca8733d9a10ffd68","modified":1699262769588},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/fontawesome.min.css","hash":"24ae04e00c6b58ae5b6dfcf7ca06acb3bd92d7e5","modified":1699262769594},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-brands-400.woff2","hash":"b99813b3c531d8fe90aed3b75d2ed71f8e0c87f4","modified":1699262773799},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1699262770475},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Bold.ttf","hash":"62442a18a9fe9457c1afeabf683d263a691b7798","modified":1699262772611},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Medium.ttf","hash":"3c6a09fcc6a454924c81af7dff94fc6d399ed79b","modified":1699262773061},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1699262770073},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1699262772249},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Regular.ttf","hash":"56c5c0d38bde4c1f1549dda43db37b09c608aad3","modified":1699262773385},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/css/all.css","hash":"e487581ce484a609b9cfe6c6e3faf70f933c7628","modified":1699262769573},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-brands-400.ttf","hash":"a14a91d8c170fc9e159040f6794369d829e0859e","modified":1699262771529},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-solid-900.woff2","hash":"c0e6e76b4a02c34656ff2a41b671e02f2821829b","modified":1699262774038},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1699262771181},{"_id":"node_modules/hexo-theme-vivia/source/fontawesome/webfonts/fa-solid-900.ttf","hash":"3eb9b4b2ea22711b96e3b356196fd20b4f17fb0e","modified":1699262772191},{"_id":"themes/vivia/_config.yml","hash":"bc429e8233e26aad0b578ec0d5f87bab9156653c","modified":1699262774053},{"_id":"themes/vivia/source/fontawesome/css/brands.css","hash":"8c4c541bc40f83787c6987e3ac681e4d3faa54c1","modified":1699262769580},{"_id":"themes/vivia/source/fontawesome/css/brands.min.css","hash":"18b8f500bb4f772c7d7f39c3fab1478a74825339","modified":1699262769583},{"_id":"themes/vivia/source/fontawesome/css/regular.css","hash":"f9334e2a68dce5b03b07148ac9a93c5ad98fe99e","modified":1699262769595},{"_id":"themes/vivia/source/fontawesome/css/solid.css","hash":"28c2b2461ee1078694ce253ae772f125ae4fa0ac","modified":1699262769597},{"_id":"themes/vivia/source/fontawesome/css/solid.min.css","hash":"876c898134a50c7b8e42314fba36fdfef7df3a6e","modified":1699262769598},{"_id":"themes/vivia/source/fontawesome/css/regular.min.css","hash":"659c14600584effc4b93be03a0160b21a90923b8","modified":1699262769596},{"_id":"themes/vivia/source/fontawesome/css/svg-with-js.css","hash":"fb14f74f1ee5072ca4b6d79850616816d57789dd","modified":1699262769600},{"_id":"themes/vivia/source/fontawesome/css/svg-with-js.min.css","hash":"b488e7f51b974eb12138921b606359553e7b6d3d","modified":1699262769603},{"_id":"themes/vivia/source/fontawesome/css/v4-font-face.css","hash":"b266ee63ab30304fefbf89faff2bc8d0c61b9149","modified":1699262769604},{"_id":"themes/vivia/source/fontawesome/css/v4-font-face.min.css","hash":"f32930ff09bccce04156af99f31231387af624f6","modified":1699262769605},{"_id":"themes/vivia/source/fontawesome/css/v4-shims.css","hash":"2e9933089ede320ba8c67509e0355aab49c5d293","modified":1699262769607},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-regular-400.ttf","hash":"dad3ad71b383789bb62c249742ef59e34685e7d0","modified":1699262771532},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-v4compatibility.ttf","hash":"52a84a6495e27f43e9762f2c2a9531d9fe15e9ee","modified":1699262772195},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-regular-400.woff2","hash":"3119676750af0e0bc338cc4aad220bdc72c56cc5","modified":1699262773959},{"_id":"themes/vivia/source/fontawesome/css/v4-shims.min.css","hash":"791742cd5dd90f208489f835d3924ee325695920","modified":1699262769610},{"_id":"themes/vivia/source/fontawesome/css/v5-font-face.css","hash":"f5fac79059b214cf7e82de28544d9685cc1db3bc","modified":1699262769611},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-v4compatibility.woff2","hash":"dd7e4a76de26e9e39168dfac3fbb8a34a87b76bc","modified":1699262774040},{"_id":"themes/vivia/source/fontawesome/css/v5-font-face.min.css","hash":"9b1d63f200b06ff5c6a306bd4c4404db38e78866","modified":1699262769611},{"_id":"themes/vivia/source/fontawesome/css/all.min.css","hash":"686e3160cff3fb1be2de10779754b40f15948208","modified":1699262769578},{"_id":"themes/vivia/source/fontawesome/css/fontawesome.css","hash":"f1239ac4cd2cf265ed3fa0e5ca8733d9a10ffd68","modified":1699262769588},{"_id":"themes/vivia/source/fontawesome/css/fontawesome.min.css","hash":"24ae04e00c6b58ae5b6dfcf7ca06acb3bd92d7e5","modified":1699262769594},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-brands-400.woff2","hash":"b99813b3c531d8fe90aed3b75d2ed71f8e0c87f4","modified":1699262773799},{"_id":"themes/vivia/source/fontawesome/css/all.css","hash":"e487581ce484a609b9cfe6c6e3faf70f933c7628","modified":1699262769573},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-brands-400.ttf","hash":"a14a91d8c170fc9e159040f6794369d829e0859e","modified":1699262771529},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-solid-900.woff2","hash":"c0e6e76b4a02c34656ff2a41b671e02f2821829b","modified":1699262774038},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-solid-900.ttf","hash":"3eb9b4b2ea22711b96e3b356196fd20b4f17fb0e","modified":1699262772191},{"_id":"source/_posts/JPEG文件结构.md","hash":"f17dc8655e3e92118053b0f05464229f11e8f049","modified":1698910160571},{"_id":"source/_posts/CTFSHOW_Misc_WP.md","hash":"f6937c187497b51d9294206a3857e9a8cae78287","modified":1699100976664},{"_id":"source/_posts/PNG文件结构.md","hash":"9a01e0a371506dda63243298fa90231c7f1ef7e4","modified":1698910284287}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2023-11-06T09:28:28.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-11-06 17:28:28\n---\n","updated":"2023-11-06T09:28:28.203Z","path":"about/index.html","comments":1,"layout":"page","_id":"clompbad30000sgzy12tee0er","content":"","length":0,"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-11-06T09:11:46.319Z","updated":"2023-11-06T09:11:46.319Z","comments":1,"layout":"post","photos":[],"_id":"clomoos4z0000h8zygq2qaxu6","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"_content":"# JPEG文件结构*\n\n> 转载自http://www.cnblogs.com/bandy/p/4956086.html\n\nJPEG文件由八个部分组成，每个部分的标记字节为两个，首字节固定为：0xFF，当然，准许在其前面再填充多个0xFF，以最后一个为准。下面为各部分的名称和第二个标记字节的数值，用ultraedit的16进制搜索功能可找到各部分的起始位置，在嵌入式系统中可用类似的数值匹配法定位。\n\n段结构：段标识（FF）+段类型（D8）+段长度+段内容,段长度:2byte,包括段内容和段长度本身,不包括段标识和段类型。\n\n### 段类型表\n\n- **名称   标记码    说明**\n- SOI     D8    文件头\n- EOI     D9   文件尾\n- SOF0  C0    帧开始（标准JPEG）\n- SOF1  C1    同上\n- DHT   C4   定义Huffman表（霍夫曼表）\n- SOS   DA   扫描行开始\n- DQT   DB   定义量化表\n- DRI   DD   定义重新开始间隔\n- APP0  E0   定义交换格式和图像识别信息\n- COM   FE   注释\n\n \n\n### 一、图像开始SOI(Start of Image)标记，数值0xD8\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092249-45a779ec-1ec9-4ba7-8864-d772e7a0b5cb.png)\n\n### 二、APP0标记(Marker)，数值0xE0\n\n#### 1、APP0长度(length)                            2byte\n\n#### 2、标识符(identifier)                     5byte\n\n#### 3、版本号(version)                        2byte\n\n#### 4、X和Y的密度单位(units=0：无单位；units=1：点数/英寸；units=2：点数/厘米)                        1byte\n\n#### 5、X方向像素密度(X density)                      2byte\n\n#### 6、Y方向像素密度(Y density)                       2byte\n\n#### 7、缩略图水平像素数目(thumbnail horizontal pixels)                       1byte\n\n#### 8、缩略图垂直像素数目(thumbnail vertical pixels)                            1byte\n\n#### 9、缩略图RGB位图(thumbnail RGB bitmap)，由前面的数值决定，取值3n，n为缩略图总像素   3n byte\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092286-4af21cdc-09c7-4961-b6ac-1d6ccd78d8fb.png)\n\n### 三、APPn标记(Markers)，其中n=1～15，数值对应0xE1～0xEF\n\n#### 1、APPn长度(length)\n\n#### 2、应用细节信息(application specific information)\n\n参考：http://www.cppblog.com/lymons/archive/2010/02/23/108266.aspx\n\n### 四、一个或者多个量化表DQT(difine quantization table)，数值0xDB\n\n#### 1、量化表长度(quantization table length)\n\n#### 2、量化表序号(quantization table number)\n\n#### 3、量化表(quantization table)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092295-34702e46-5142-4fd8-a417-9bdfb3701f7f.png)\n\n### 五、帧图像开始SOF0(Start of Frame)，数值0xC0\n\n#### 1、帧开始长度(start of frame length)\n\n#### 2、精度(precision)，每个颜色分量每个像素的位数(bits per pixel per color component)\n\n#### 3、图像高度(image height)\n\n#### 4、图像宽度(image width)\n\n#### 5、颜色分量数(number of color components)\n\n#### 6、对每个颜色分量(for each component)\n\n#### 包括：ID、垂直方向的样本因子(vertical sample factor)、水平方向的样本因子(horizontal sample factor) 、量化表号(quantization table#)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092220-f568cd06-f2e2-4cab-8976-44da4bc37e5e.png)\n\n### 六、一个或者多个霍夫曼表DHT(Difine Huffman Table)，数值0xC4\n\n#### 1、霍夫曼表的长度(Huffman table length)\n\n#### 2、类型、AC或者DC(Type, AC or DC)\n\n#### 3、索引(Index)\n\n#### 4、位表(bits table)\n\n#### 5、值表(value table)\n\n#### ①JPEG文件里有２类Haffman表：一类用于DC（直流量），一类用于AC（交流量）。一般有４个表：亮度的DC和AC，色度的DC和AC。最多可有６个。\n\n#### ②一个DHT段可以包含多个HT表,每个都有自己的信息字节③HT表是一个按递增次序代码长度排列的符号表。\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092224-dd222ae6-cd18-4482-ba9b-5fdc795c4dbc.png)\n\n### 七、扫描开始SOS(Start of Scan)，数值0xDA\n\n#### 1、扫描开始长度(start of scan length)\n\n#### 2、颜色分量数(number of color components)\n\n#### 3、每个颜色分量\n\n#### 包括：ID、交流系数表号(AC table #)、直流系数表号(DC table #)\n\n#### 4、压缩图像数据(compressed image data)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479093444-74b30768-4e29-40d8-82cf-0aa075fb691a.png)\n\n### 八、图像结束EOI(End of Image)，数值0xD9","source":"_posts/JPEG文件结构.md","raw":"# JPEG文件结构*\n\n> 转载自http://www.cnblogs.com/bandy/p/4956086.html\n\nJPEG文件由八个部分组成，每个部分的标记字节为两个，首字节固定为：0xFF，当然，准许在其前面再填充多个0xFF，以最后一个为准。下面为各部分的名称和第二个标记字节的数值，用ultraedit的16进制搜索功能可找到各部分的起始位置，在嵌入式系统中可用类似的数值匹配法定位。\n\n段结构：段标识（FF）+段类型（D8）+段长度+段内容,段长度:2byte,包括段内容和段长度本身,不包括段标识和段类型。\n\n### 段类型表\n\n- **名称   标记码    说明**\n- SOI     D8    文件头\n- EOI     D9   文件尾\n- SOF0  C0    帧开始（标准JPEG）\n- SOF1  C1    同上\n- DHT   C4   定义Huffman表（霍夫曼表）\n- SOS   DA   扫描行开始\n- DQT   DB   定义量化表\n- DRI   DD   定义重新开始间隔\n- APP0  E0   定义交换格式和图像识别信息\n- COM   FE   注释\n\n \n\n### 一、图像开始SOI(Start of Image)标记，数值0xD8\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092249-45a779ec-1ec9-4ba7-8864-d772e7a0b5cb.png)\n\n### 二、APP0标记(Marker)，数值0xE0\n\n#### 1、APP0长度(length)                            2byte\n\n#### 2、标识符(identifier)                     5byte\n\n#### 3、版本号(version)                        2byte\n\n#### 4、X和Y的密度单位(units=0：无单位；units=1：点数/英寸；units=2：点数/厘米)                        1byte\n\n#### 5、X方向像素密度(X density)                      2byte\n\n#### 6、Y方向像素密度(Y density)                       2byte\n\n#### 7、缩略图水平像素数目(thumbnail horizontal pixels)                       1byte\n\n#### 8、缩略图垂直像素数目(thumbnail vertical pixels)                            1byte\n\n#### 9、缩略图RGB位图(thumbnail RGB bitmap)，由前面的数值决定，取值3n，n为缩略图总像素   3n byte\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092286-4af21cdc-09c7-4961-b6ac-1d6ccd78d8fb.png)\n\n### 三、APPn标记(Markers)，其中n=1～15，数值对应0xE1～0xEF\n\n#### 1、APPn长度(length)\n\n#### 2、应用细节信息(application specific information)\n\n参考：http://www.cppblog.com/lymons/archive/2010/02/23/108266.aspx\n\n### 四、一个或者多个量化表DQT(difine quantization table)，数值0xDB\n\n#### 1、量化表长度(quantization table length)\n\n#### 2、量化表序号(quantization table number)\n\n#### 3、量化表(quantization table)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092295-34702e46-5142-4fd8-a417-9bdfb3701f7f.png)\n\n### 五、帧图像开始SOF0(Start of Frame)，数值0xC0\n\n#### 1、帧开始长度(start of frame length)\n\n#### 2、精度(precision)，每个颜色分量每个像素的位数(bits per pixel per color component)\n\n#### 3、图像高度(image height)\n\n#### 4、图像宽度(image width)\n\n#### 5、颜色分量数(number of color components)\n\n#### 6、对每个颜色分量(for each component)\n\n#### 包括：ID、垂直方向的样本因子(vertical sample factor)、水平方向的样本因子(horizontal sample factor) 、量化表号(quantization table#)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092220-f568cd06-f2e2-4cab-8976-44da4bc37e5e.png)\n\n### 六、一个或者多个霍夫曼表DHT(Difine Huffman Table)，数值0xC4\n\n#### 1、霍夫曼表的长度(Huffman table length)\n\n#### 2、类型、AC或者DC(Type, AC or DC)\n\n#### 3、索引(Index)\n\n#### 4、位表(bits table)\n\n#### 5、值表(value table)\n\n#### ①JPEG文件里有２类Haffman表：一类用于DC（直流量），一类用于AC（交流量）。一般有４个表：亮度的DC和AC，色度的DC和AC。最多可有６个。\n\n#### ②一个DHT段可以包含多个HT表,每个都有自己的信息字节③HT表是一个按递增次序代码长度排列的符号表。\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092224-dd222ae6-cd18-4482-ba9b-5fdc795c4dbc.png)\n\n### 七、扫描开始SOS(Start of Scan)，数值0xDA\n\n#### 1、扫描开始长度(start of scan length)\n\n#### 2、颜色分量数(number of color components)\n\n#### 3、每个颜色分量\n\n#### 包括：ID、交流系数表号(AC table #)、直流系数表号(DC table #)\n\n#### 4、压缩图像数据(compressed image data)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479093444-74b30768-4e29-40d8-82cf-0aa075fb691a.png)\n\n### 八、图像结束EOI(End of Image)，数值0xD9","slug":"JPEG文件结构","published":1,"date":"2023-11-06T09:59:21.527Z","updated":"2023-11-02T07:29:20.571Z","_id":"clomqd5m90000x8zy7eit3xsn","title":"","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"JPEG文件结构\"><a href=\"#JPEG文件结构\" class=\"headerlink\" title=\"JPEG文件结构*\"></a>JPEG文件结构*</h1><blockquote>\n<p>转载自<a href=\"http://www.cnblogs.com/bandy/p/4956086.html\">http://www.cnblogs.com/bandy/p/4956086.html</a></p>\n</blockquote>\n<p>JPEG文件由八个部分组成，每个部分的标记字节为两个，首字节固定为：0xFF，当然，准许在其前面再填充多个0xFF，以最后一个为准。下面为各部分的名称和第二个标记字节的数值，用ultraedit的16进制搜索功能可找到各部分的起始位置，在嵌入式系统中可用类似的数值匹配法定位。</p>\n<p>段结构：段标识（FF）+段类型（D8）+段长度+段内容,段长度:2byte,包括段内容和段长度本身,不包括段标识和段类型。</p>\n<h3 id=\"段类型表\"><a href=\"#段类型表\" class=\"headerlink\" title=\"段类型表\"></a>段类型表</h3><ul>\n<li><strong>名称   标记码    说明</strong></li>\n<li>SOI     D8    文件头</li>\n<li>EOI     D9   文件尾</li>\n<li>SOF0  C0    帧开始（标准JPEG）</li>\n<li>SOF1  C1    同上</li>\n<li>DHT   C4   定义Huffman表（霍夫曼表）</li>\n<li>SOS   DA   扫描行开始</li>\n<li>DQT   DB   定义量化表</li>\n<li>DRI   DD   定义重新开始间隔</li>\n<li>APP0  E0   定义交换格式和图像识别信息</li>\n<li>COM   FE   注释</li>\n</ul>\n<h3 id=\"一、图像开始SOI-Start-of-Image-标记，数值0xD8\"><a href=\"#一、图像开始SOI-Start-of-Image-标记，数值0xD8\" class=\"headerlink\" title=\"一、图像开始SOI(Start of Image)标记，数值0xD8\"></a>一、图像开始SOI(Start of Image)标记，数值0xD8</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092249-45a779ec-1ec9-4ba7-8864-d772e7a0b5cb.png\" alt=\"img\"></p>\n<h3 id=\"二、APP0标记-Marker-，数值0xE0\"><a href=\"#二、APP0标记-Marker-，数值0xE0\" class=\"headerlink\" title=\"二、APP0标记(Marker)，数值0xE0\"></a>二、APP0标记(Marker)，数值0xE0</h3><h4 id=\"1、APP0长度-length-2byte\"><a href=\"#1、APP0长度-length-2byte\" class=\"headerlink\" title=\"1、APP0长度(length)                            2byte\"></a>1、APP0长度(length)                            2byte</h4><h4 id=\"2、标识符-identifier-5byte\"><a href=\"#2、标识符-identifier-5byte\" class=\"headerlink\" title=\"2、标识符(identifier)                     5byte\"></a>2、标识符(identifier)                     5byte</h4><h4 id=\"3、版本号-version-2byte\"><a href=\"#3、版本号-version-2byte\" class=\"headerlink\" title=\"3、版本号(version)                        2byte\"></a>3、版本号(version)                        2byte</h4><h4 id=\"4、X和Y的密度单位-units-0：无单位；units-1：点数-英寸；units-2：点数-厘米-1byte\"><a href=\"#4、X和Y的密度单位-units-0：无单位；units-1：点数-英寸；units-2：点数-厘米-1byte\" class=\"headerlink\" title=\"4、X和Y的密度单位(units&#x3D;0：无单位；units&#x3D;1：点数&#x2F;英寸；units&#x3D;2：点数&#x2F;厘米)                        1byte\"></a>4、X和Y的密度单位(units&#x3D;0：无单位；units&#x3D;1：点数&#x2F;英寸；units&#x3D;2：点数&#x2F;厘米)                        1byte</h4><h4 id=\"5、X方向像素密度-X-density-2byte\"><a href=\"#5、X方向像素密度-X-density-2byte\" class=\"headerlink\" title=\"5、X方向像素密度(X density)                      2byte\"></a>5、X方向像素密度(X density)                      2byte</h4><h4 id=\"6、Y方向像素密度-Y-density-2byte\"><a href=\"#6、Y方向像素密度-Y-density-2byte\" class=\"headerlink\" title=\"6、Y方向像素密度(Y density)                       2byte\"></a>6、Y方向像素密度(Y density)                       2byte</h4><h4 id=\"7、缩略图水平像素数目-thumbnail-horizontal-pixels-1byte\"><a href=\"#7、缩略图水平像素数目-thumbnail-horizontal-pixels-1byte\" class=\"headerlink\" title=\"7、缩略图水平像素数目(thumbnail horizontal pixels)                       1byte\"></a>7、缩略图水平像素数目(thumbnail horizontal pixels)                       1byte</h4><h4 id=\"8、缩略图垂直像素数目-thumbnail-vertical-pixels-1byte\"><a href=\"#8、缩略图垂直像素数目-thumbnail-vertical-pixels-1byte\" class=\"headerlink\" title=\"8、缩略图垂直像素数目(thumbnail vertical pixels)                            1byte\"></a>8、缩略图垂直像素数目(thumbnail vertical pixels)                            1byte</h4><h4 id=\"9、缩略图RGB位图-thumbnail-RGB-bitmap-，由前面的数值决定，取值3n，n为缩略图总像素-3n-byte\"><a href=\"#9、缩略图RGB位图-thumbnail-RGB-bitmap-，由前面的数值决定，取值3n，n为缩略图总像素-3n-byte\" class=\"headerlink\" title=\"9、缩略图RGB位图(thumbnail RGB bitmap)，由前面的数值决定，取值3n，n为缩略图总像素   3n byte\"></a>9、缩略图RGB位图(thumbnail RGB bitmap)，由前面的数值决定，取值3n，n为缩略图总像素   3n byte</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092286-4af21cdc-09c7-4961-b6ac-1d6ccd78d8fb.png\" alt=\"img\"></p>\n<h3 id=\"三、APPn标记-Markers-，其中n-1～15，数值对应0xE1～0xEF\"><a href=\"#三、APPn标记-Markers-，其中n-1～15，数值对应0xE1～0xEF\" class=\"headerlink\" title=\"三、APPn标记(Markers)，其中n&#x3D;1～15，数值对应0xE1～0xEF\"></a>三、APPn标记(Markers)，其中n&#x3D;1～15，数值对应0xE1～0xEF</h3><h4 id=\"1、APPn长度-length\"><a href=\"#1、APPn长度-length\" class=\"headerlink\" title=\"1、APPn长度(length)\"></a>1、APPn长度(length)</h4><h4 id=\"2、应用细节信息-application-specific-information\"><a href=\"#2、应用细节信息-application-specific-information\" class=\"headerlink\" title=\"2、应用细节信息(application specific information)\"></a>2、应用细节信息(application specific information)</h4><p>参考：<a href=\"http://www.cppblog.com/lymons/archive/2010/02/23/108266.aspx\">http://www.cppblog.com/lymons/archive/2010/02/23/108266.aspx</a></p>\n<h3 id=\"四、一个或者多个量化表DQT-difine-quantization-table-，数值0xDB\"><a href=\"#四、一个或者多个量化表DQT-difine-quantization-table-，数值0xDB\" class=\"headerlink\" title=\"四、一个或者多个量化表DQT(difine quantization table)，数值0xDB\"></a>四、一个或者多个量化表DQT(difine quantization table)，数值0xDB</h3><h4 id=\"1、量化表长度-quantization-table-length\"><a href=\"#1、量化表长度-quantization-table-length\" class=\"headerlink\" title=\"1、量化表长度(quantization table length)\"></a>1、量化表长度(quantization table length)</h4><h4 id=\"2、量化表序号-quantization-table-number\"><a href=\"#2、量化表序号-quantization-table-number\" class=\"headerlink\" title=\"2、量化表序号(quantization table number)\"></a>2、量化表序号(quantization table number)</h4><h4 id=\"3、量化表-quantization-table\"><a href=\"#3、量化表-quantization-table\" class=\"headerlink\" title=\"3、量化表(quantization table)\"></a>3、量化表(quantization table)</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092295-34702e46-5142-4fd8-a417-9bdfb3701f7f.png\" alt=\"img\"></p>\n<h3 id=\"五、帧图像开始SOF0-Start-of-Frame-，数值0xC0\"><a href=\"#五、帧图像开始SOF0-Start-of-Frame-，数值0xC0\" class=\"headerlink\" title=\"五、帧图像开始SOF0(Start of Frame)，数值0xC0\"></a>五、帧图像开始SOF0(Start of Frame)，数值0xC0</h3><h4 id=\"1、帧开始长度-start-of-frame-length\"><a href=\"#1、帧开始长度-start-of-frame-length\" class=\"headerlink\" title=\"1、帧开始长度(start of frame length)\"></a>1、帧开始长度(start of frame length)</h4><h4 id=\"2、精度-precision-，每个颜色分量每个像素的位数-bits-per-pixel-per-color-component\"><a href=\"#2、精度-precision-，每个颜色分量每个像素的位数-bits-per-pixel-per-color-component\" class=\"headerlink\" title=\"2、精度(precision)，每个颜色分量每个像素的位数(bits per pixel per color component)\"></a>2、精度(precision)，每个颜色分量每个像素的位数(bits per pixel per color component)</h4><h4 id=\"3、图像高度-image-height\"><a href=\"#3、图像高度-image-height\" class=\"headerlink\" title=\"3、图像高度(image height)\"></a>3、图像高度(image height)</h4><h4 id=\"4、图像宽度-image-width\"><a href=\"#4、图像宽度-image-width\" class=\"headerlink\" title=\"4、图像宽度(image width)\"></a>4、图像宽度(image width)</h4><h4 id=\"5、颜色分量数-number-of-color-components\"><a href=\"#5、颜色分量数-number-of-color-components\" class=\"headerlink\" title=\"5、颜色分量数(number of color components)\"></a>5、颜色分量数(number of color components)</h4><h4 id=\"6、对每个颜色分量-for-each-component\"><a href=\"#6、对每个颜色分量-for-each-component\" class=\"headerlink\" title=\"6、对每个颜色分量(for each component)\"></a>6、对每个颜色分量(for each component)</h4><h4 id=\"包括：ID、垂直方向的样本因子-vertical-sample-factor-、水平方向的样本因子-horizontal-sample-factor-、量化表号-quantization-table\"><a href=\"#包括：ID、垂直方向的样本因子-vertical-sample-factor-、水平方向的样本因子-horizontal-sample-factor-、量化表号-quantization-table\" class=\"headerlink\" title=\"包括：ID、垂直方向的样本因子(vertical sample factor)、水平方向的样本因子(horizontal sample factor) 、量化表号(quantization table#)\"></a>包括：ID、垂直方向的样本因子(vertical sample factor)、水平方向的样本因子(horizontal sample factor) 、量化表号(quantization table#)</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092220-f568cd06-f2e2-4cab-8976-44da4bc37e5e.png\" alt=\"img\"></p>\n<h3 id=\"六、一个或者多个霍夫曼表DHT-Difine-Huffman-Table-，数值0xC4\"><a href=\"#六、一个或者多个霍夫曼表DHT-Difine-Huffman-Table-，数值0xC4\" class=\"headerlink\" title=\"六、一个或者多个霍夫曼表DHT(Difine Huffman Table)，数值0xC4\"></a>六、一个或者多个霍夫曼表DHT(Difine Huffman Table)，数值0xC4</h3><h4 id=\"1、霍夫曼表的长度-Huffman-table-length\"><a href=\"#1、霍夫曼表的长度-Huffman-table-length\" class=\"headerlink\" title=\"1、霍夫曼表的长度(Huffman table length)\"></a>1、霍夫曼表的长度(Huffman table length)</h4><h4 id=\"2、类型、AC或者DC-Type-AC-or-DC\"><a href=\"#2、类型、AC或者DC-Type-AC-or-DC\" class=\"headerlink\" title=\"2、类型、AC或者DC(Type, AC or DC)\"></a>2、类型、AC或者DC(Type, AC or DC)</h4><h4 id=\"3、索引-Index\"><a href=\"#3、索引-Index\" class=\"headerlink\" title=\"3、索引(Index)\"></a>3、索引(Index)</h4><h4 id=\"4、位表-bits-table\"><a href=\"#4、位表-bits-table\" class=\"headerlink\" title=\"4、位表(bits table)\"></a>4、位表(bits table)</h4><h4 id=\"5、值表-value-table\"><a href=\"#5、值表-value-table\" class=\"headerlink\" title=\"5、值表(value table)\"></a>5、值表(value table)</h4><h4 id=\"①JPEG文件里有２类Haffman表：一类用于DC（直流量），一类用于AC（交流量）。一般有４个表：亮度的DC和AC，色度的DC和AC。最多可有６个。\"><a href=\"#①JPEG文件里有２类Haffman表：一类用于DC（直流量），一类用于AC（交流量）。一般有４个表：亮度的DC和AC，色度的DC和AC。最多可有６个。\" class=\"headerlink\" title=\"①JPEG文件里有２类Haffman表：一类用于DC（直流量），一类用于AC（交流量）。一般有４个表：亮度的DC和AC，色度的DC和AC。最多可有６个。\"></a>①JPEG文件里有２类Haffman表：一类用于DC（直流量），一类用于AC（交流量）。一般有４个表：亮度的DC和AC，色度的DC和AC。最多可有６个。</h4><h4 id=\"②一个DHT段可以包含多个HT表-每个都有自己的信息字节③HT表是一个按递增次序代码长度排列的符号表。\"><a href=\"#②一个DHT段可以包含多个HT表-每个都有自己的信息字节③HT表是一个按递增次序代码长度排列的符号表。\" class=\"headerlink\" title=\"②一个DHT段可以包含多个HT表,每个都有自己的信息字节③HT表是一个按递增次序代码长度排列的符号表。\"></a>②一个DHT段可以包含多个HT表,每个都有自己的信息字节③HT表是一个按递增次序代码长度排列的符号表。</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092224-dd222ae6-cd18-4482-ba9b-5fdc795c4dbc.png\" alt=\"img\"></p>\n<h3 id=\"七、扫描开始SOS-Start-of-Scan-，数值0xDA\"><a href=\"#七、扫描开始SOS-Start-of-Scan-，数值0xDA\" class=\"headerlink\" title=\"七、扫描开始SOS(Start of Scan)，数值0xDA\"></a>七、扫描开始SOS(Start of Scan)，数值0xDA</h3><h4 id=\"1、扫描开始长度-start-of-scan-length\"><a href=\"#1、扫描开始长度-start-of-scan-length\" class=\"headerlink\" title=\"1、扫描开始长度(start of scan length)\"></a>1、扫描开始长度(start of scan length)</h4><h4 id=\"2、颜色分量数-number-of-color-components\"><a href=\"#2、颜色分量数-number-of-color-components\" class=\"headerlink\" title=\"2、颜色分量数(number of color components)\"></a>2、颜色分量数(number of color components)</h4><h4 id=\"3、每个颜色分量\"><a href=\"#3、每个颜色分量\" class=\"headerlink\" title=\"3、每个颜色分量\"></a>3、每个颜色分量</h4><h4 id=\"包括：ID、交流系数表号-AC-table-、直流系数表号-DC-table\"><a href=\"#包括：ID、交流系数表号-AC-table-、直流系数表号-DC-table\" class=\"headerlink\" title=\"包括：ID、交流系数表号(AC table #)、直流系数表号(DC table #)\"></a>包括：ID、交流系数表号(AC table #)、直流系数表号(DC table #)</h4><h4 id=\"4、压缩图像数据-compressed-image-data\"><a href=\"#4、压缩图像数据-compressed-image-data\" class=\"headerlink\" title=\"4、压缩图像数据(compressed image data)\"></a>4、压缩图像数据(compressed image data)</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479093444-74b30768-4e29-40d8-82cf-0aa075fb691a.png\" alt=\"img\"></p>\n<h3 id=\"八、图像结束EOI-End-of-Image-，数值0xD9\"><a href=\"#八、图像结束EOI-End-of-Image-，数值0xD9\" class=\"headerlink\" title=\"八、图像结束EOI(End of Image)，数值0xD9\"></a>八、图像结束EOI(End of Image)，数值0xD9</h3>","length":1840,"excerpt":"","more":"<h1 id=\"JPEG文件结构\"><a href=\"#JPEG文件结构\" class=\"headerlink\" title=\"JPEG文件结构*\"></a>JPEG文件结构*</h1><blockquote>\n<p>转载自<a href=\"http://www.cnblogs.com/bandy/p/4956086.html\">http://www.cnblogs.com/bandy/p/4956086.html</a></p>\n</blockquote>\n<p>JPEG文件由八个部分组成，每个部分的标记字节为两个，首字节固定为：0xFF，当然，准许在其前面再填充多个0xFF，以最后一个为准。下面为各部分的名称和第二个标记字节的数值，用ultraedit的16进制搜索功能可找到各部分的起始位置，在嵌入式系统中可用类似的数值匹配法定位。</p>\n<p>段结构：段标识（FF）+段类型（D8）+段长度+段内容,段长度:2byte,包括段内容和段长度本身,不包括段标识和段类型。</p>\n<h3 id=\"段类型表\"><a href=\"#段类型表\" class=\"headerlink\" title=\"段类型表\"></a>段类型表</h3><ul>\n<li><strong>名称   标记码    说明</strong></li>\n<li>SOI     D8    文件头</li>\n<li>EOI     D9   文件尾</li>\n<li>SOF0  C0    帧开始（标准JPEG）</li>\n<li>SOF1  C1    同上</li>\n<li>DHT   C4   定义Huffman表（霍夫曼表）</li>\n<li>SOS   DA   扫描行开始</li>\n<li>DQT   DB   定义量化表</li>\n<li>DRI   DD   定义重新开始间隔</li>\n<li>APP0  E0   定义交换格式和图像识别信息</li>\n<li>COM   FE   注释</li>\n</ul>\n<h3 id=\"一、图像开始SOI-Start-of-Image-标记，数值0xD8\"><a href=\"#一、图像开始SOI-Start-of-Image-标记，数值0xD8\" class=\"headerlink\" title=\"一、图像开始SOI(Start of Image)标记，数值0xD8\"></a>一、图像开始SOI(Start of Image)标记，数值0xD8</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092249-45a779ec-1ec9-4ba7-8864-d772e7a0b5cb.png\" alt=\"img\"></p>\n<h3 id=\"二、APP0标记-Marker-，数值0xE0\"><a href=\"#二、APP0标记-Marker-，数值0xE0\" class=\"headerlink\" title=\"二、APP0标记(Marker)，数值0xE0\"></a>二、APP0标记(Marker)，数值0xE0</h3><h4 id=\"1、APP0长度-length-2byte\"><a href=\"#1、APP0长度-length-2byte\" class=\"headerlink\" title=\"1、APP0长度(length)                            2byte\"></a>1、APP0长度(length)                            2byte</h4><h4 id=\"2、标识符-identifier-5byte\"><a href=\"#2、标识符-identifier-5byte\" class=\"headerlink\" title=\"2、标识符(identifier)                     5byte\"></a>2、标识符(identifier)                     5byte</h4><h4 id=\"3、版本号-version-2byte\"><a href=\"#3、版本号-version-2byte\" class=\"headerlink\" title=\"3、版本号(version)                        2byte\"></a>3、版本号(version)                        2byte</h4><h4 id=\"4、X和Y的密度单位-units-0：无单位；units-1：点数-英寸；units-2：点数-厘米-1byte\"><a href=\"#4、X和Y的密度单位-units-0：无单位；units-1：点数-英寸；units-2：点数-厘米-1byte\" class=\"headerlink\" title=\"4、X和Y的密度单位(units&#x3D;0：无单位；units&#x3D;1：点数&#x2F;英寸；units&#x3D;2：点数&#x2F;厘米)                        1byte\"></a>4、X和Y的密度单位(units&#x3D;0：无单位；units&#x3D;1：点数&#x2F;英寸；units&#x3D;2：点数&#x2F;厘米)                        1byte</h4><h4 id=\"5、X方向像素密度-X-density-2byte\"><a href=\"#5、X方向像素密度-X-density-2byte\" class=\"headerlink\" title=\"5、X方向像素密度(X density)                      2byte\"></a>5、X方向像素密度(X density)                      2byte</h4><h4 id=\"6、Y方向像素密度-Y-density-2byte\"><a href=\"#6、Y方向像素密度-Y-density-2byte\" class=\"headerlink\" title=\"6、Y方向像素密度(Y density)                       2byte\"></a>6、Y方向像素密度(Y density)                       2byte</h4><h4 id=\"7、缩略图水平像素数目-thumbnail-horizontal-pixels-1byte\"><a href=\"#7、缩略图水平像素数目-thumbnail-horizontal-pixels-1byte\" class=\"headerlink\" title=\"7、缩略图水平像素数目(thumbnail horizontal pixels)                       1byte\"></a>7、缩略图水平像素数目(thumbnail horizontal pixels)                       1byte</h4><h4 id=\"8、缩略图垂直像素数目-thumbnail-vertical-pixels-1byte\"><a href=\"#8、缩略图垂直像素数目-thumbnail-vertical-pixels-1byte\" class=\"headerlink\" title=\"8、缩略图垂直像素数目(thumbnail vertical pixels)                            1byte\"></a>8、缩略图垂直像素数目(thumbnail vertical pixels)                            1byte</h4><h4 id=\"9、缩略图RGB位图-thumbnail-RGB-bitmap-，由前面的数值决定，取值3n，n为缩略图总像素-3n-byte\"><a href=\"#9、缩略图RGB位图-thumbnail-RGB-bitmap-，由前面的数值决定，取值3n，n为缩略图总像素-3n-byte\" class=\"headerlink\" title=\"9、缩略图RGB位图(thumbnail RGB bitmap)，由前面的数值决定，取值3n，n为缩略图总像素   3n byte\"></a>9、缩略图RGB位图(thumbnail RGB bitmap)，由前面的数值决定，取值3n，n为缩略图总像素   3n byte</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092286-4af21cdc-09c7-4961-b6ac-1d6ccd78d8fb.png\" alt=\"img\"></p>\n<h3 id=\"三、APPn标记-Markers-，其中n-1～15，数值对应0xE1～0xEF\"><a href=\"#三、APPn标记-Markers-，其中n-1～15，数值对应0xE1～0xEF\" class=\"headerlink\" title=\"三、APPn标记(Markers)，其中n&#x3D;1～15，数值对应0xE1～0xEF\"></a>三、APPn标记(Markers)，其中n&#x3D;1～15，数值对应0xE1～0xEF</h3><h4 id=\"1、APPn长度-length\"><a href=\"#1、APPn长度-length\" class=\"headerlink\" title=\"1、APPn长度(length)\"></a>1、APPn长度(length)</h4><h4 id=\"2、应用细节信息-application-specific-information\"><a href=\"#2、应用细节信息-application-specific-information\" class=\"headerlink\" title=\"2、应用细节信息(application specific information)\"></a>2、应用细节信息(application specific information)</h4><p>参考：<a href=\"http://www.cppblog.com/lymons/archive/2010/02/23/108266.aspx\">http://www.cppblog.com/lymons/archive/2010/02/23/108266.aspx</a></p>\n<h3 id=\"四、一个或者多个量化表DQT-difine-quantization-table-，数值0xDB\"><a href=\"#四、一个或者多个量化表DQT-difine-quantization-table-，数值0xDB\" class=\"headerlink\" title=\"四、一个或者多个量化表DQT(difine quantization table)，数值0xDB\"></a>四、一个或者多个量化表DQT(difine quantization table)，数值0xDB</h3><h4 id=\"1、量化表长度-quantization-table-length\"><a href=\"#1、量化表长度-quantization-table-length\" class=\"headerlink\" title=\"1、量化表长度(quantization table length)\"></a>1、量化表长度(quantization table length)</h4><h4 id=\"2、量化表序号-quantization-table-number\"><a href=\"#2、量化表序号-quantization-table-number\" class=\"headerlink\" title=\"2、量化表序号(quantization table number)\"></a>2、量化表序号(quantization table number)</h4><h4 id=\"3、量化表-quantization-table\"><a href=\"#3、量化表-quantization-table\" class=\"headerlink\" title=\"3、量化表(quantization table)\"></a>3、量化表(quantization table)</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092295-34702e46-5142-4fd8-a417-9bdfb3701f7f.png\" alt=\"img\"></p>\n<h3 id=\"五、帧图像开始SOF0-Start-of-Frame-，数值0xC0\"><a href=\"#五、帧图像开始SOF0-Start-of-Frame-，数值0xC0\" class=\"headerlink\" title=\"五、帧图像开始SOF0(Start of Frame)，数值0xC0\"></a>五、帧图像开始SOF0(Start of Frame)，数值0xC0</h3><h4 id=\"1、帧开始长度-start-of-frame-length\"><a href=\"#1、帧开始长度-start-of-frame-length\" class=\"headerlink\" title=\"1、帧开始长度(start of frame length)\"></a>1、帧开始长度(start of frame length)</h4><h4 id=\"2、精度-precision-，每个颜色分量每个像素的位数-bits-per-pixel-per-color-component\"><a href=\"#2、精度-precision-，每个颜色分量每个像素的位数-bits-per-pixel-per-color-component\" class=\"headerlink\" title=\"2、精度(precision)，每个颜色分量每个像素的位数(bits per pixel per color component)\"></a>2、精度(precision)，每个颜色分量每个像素的位数(bits per pixel per color component)</h4><h4 id=\"3、图像高度-image-height\"><a href=\"#3、图像高度-image-height\" class=\"headerlink\" title=\"3、图像高度(image height)\"></a>3、图像高度(image height)</h4><h4 id=\"4、图像宽度-image-width\"><a href=\"#4、图像宽度-image-width\" class=\"headerlink\" title=\"4、图像宽度(image width)\"></a>4、图像宽度(image width)</h4><h4 id=\"5、颜色分量数-number-of-color-components\"><a href=\"#5、颜色分量数-number-of-color-components\" class=\"headerlink\" title=\"5、颜色分量数(number of color components)\"></a>5、颜色分量数(number of color components)</h4><h4 id=\"6、对每个颜色分量-for-each-component\"><a href=\"#6、对每个颜色分量-for-each-component\" class=\"headerlink\" title=\"6、对每个颜色分量(for each component)\"></a>6、对每个颜色分量(for each component)</h4><h4 id=\"包括：ID、垂直方向的样本因子-vertical-sample-factor-、水平方向的样本因子-horizontal-sample-factor-、量化表号-quantization-table\"><a href=\"#包括：ID、垂直方向的样本因子-vertical-sample-factor-、水平方向的样本因子-horizontal-sample-factor-、量化表号-quantization-table\" class=\"headerlink\" title=\"包括：ID、垂直方向的样本因子(vertical sample factor)、水平方向的样本因子(horizontal sample factor) 、量化表号(quantization table#)\"></a>包括：ID、垂直方向的样本因子(vertical sample factor)、水平方向的样本因子(horizontal sample factor) 、量化表号(quantization table#)</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092220-f568cd06-f2e2-4cab-8976-44da4bc37e5e.png\" alt=\"img\"></p>\n<h3 id=\"六、一个或者多个霍夫曼表DHT-Difine-Huffman-Table-，数值0xC4\"><a href=\"#六、一个或者多个霍夫曼表DHT-Difine-Huffman-Table-，数值0xC4\" class=\"headerlink\" title=\"六、一个或者多个霍夫曼表DHT(Difine Huffman Table)，数值0xC4\"></a>六、一个或者多个霍夫曼表DHT(Difine Huffman Table)，数值0xC4</h3><h4 id=\"1、霍夫曼表的长度-Huffman-table-length\"><a href=\"#1、霍夫曼表的长度-Huffman-table-length\" class=\"headerlink\" title=\"1、霍夫曼表的长度(Huffman table length)\"></a>1、霍夫曼表的长度(Huffman table length)</h4><h4 id=\"2、类型、AC或者DC-Type-AC-or-DC\"><a href=\"#2、类型、AC或者DC-Type-AC-or-DC\" class=\"headerlink\" title=\"2、类型、AC或者DC(Type, AC or DC)\"></a>2、类型、AC或者DC(Type, AC or DC)</h4><h4 id=\"3、索引-Index\"><a href=\"#3、索引-Index\" class=\"headerlink\" title=\"3、索引(Index)\"></a>3、索引(Index)</h4><h4 id=\"4、位表-bits-table\"><a href=\"#4、位表-bits-table\" class=\"headerlink\" title=\"4、位表(bits table)\"></a>4、位表(bits table)</h4><h4 id=\"5、值表-value-table\"><a href=\"#5、值表-value-table\" class=\"headerlink\" title=\"5、值表(value table)\"></a>5、值表(value table)</h4><h4 id=\"①JPEG文件里有２类Haffman表：一类用于DC（直流量），一类用于AC（交流量）。一般有４个表：亮度的DC和AC，色度的DC和AC。最多可有６个。\"><a href=\"#①JPEG文件里有２类Haffman表：一类用于DC（直流量），一类用于AC（交流量）。一般有４个表：亮度的DC和AC，色度的DC和AC。最多可有６个。\" class=\"headerlink\" title=\"①JPEG文件里有２类Haffman表：一类用于DC（直流量），一类用于AC（交流量）。一般有４个表：亮度的DC和AC，色度的DC和AC。最多可有６个。\"></a>①JPEG文件里有２类Haffman表：一类用于DC（直流量），一类用于AC（交流量）。一般有４个表：亮度的DC和AC，色度的DC和AC。最多可有６个。</h4><h4 id=\"②一个DHT段可以包含多个HT表-每个都有自己的信息字节③HT表是一个按递增次序代码长度排列的符号表。\"><a href=\"#②一个DHT段可以包含多个HT表-每个都有自己的信息字节③HT表是一个按递增次序代码长度排列的符号表。\" class=\"headerlink\" title=\"②一个DHT段可以包含多个HT表,每个都有自己的信息字节③HT表是一个按递增次序代码长度排列的符号表。\"></a>②一个DHT段可以包含多个HT表,每个都有自己的信息字节③HT表是一个按递增次序代码长度排列的符号表。</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479092224-dd222ae6-cd18-4482-ba9b-5fdc795c4dbc.png\" alt=\"img\"></p>\n<h3 id=\"七、扫描开始SOS-Start-of-Scan-，数值0xDA\"><a href=\"#七、扫描开始SOS-Start-of-Scan-，数值0xDA\" class=\"headerlink\" title=\"七、扫描开始SOS(Start of Scan)，数值0xDA\"></a>七、扫描开始SOS(Start of Scan)，数值0xDA</h3><h4 id=\"1、扫描开始长度-start-of-scan-length\"><a href=\"#1、扫描开始长度-start-of-scan-length\" class=\"headerlink\" title=\"1、扫描开始长度(start of scan length)\"></a>1、扫描开始长度(start of scan length)</h4><h4 id=\"2、颜色分量数-number-of-color-components\"><a href=\"#2、颜色分量数-number-of-color-components\" class=\"headerlink\" title=\"2、颜色分量数(number of color components)\"></a>2、颜色分量数(number of color components)</h4><h4 id=\"3、每个颜色分量\"><a href=\"#3、每个颜色分量\" class=\"headerlink\" title=\"3、每个颜色分量\"></a>3、每个颜色分量</h4><h4 id=\"包括：ID、交流系数表号-AC-table-、直流系数表号-DC-table\"><a href=\"#包括：ID、交流系数表号-AC-table-、直流系数表号-DC-table\" class=\"headerlink\" title=\"包括：ID、交流系数表号(AC table #)、直流系数表号(DC table #)\"></a>包括：ID、交流系数表号(AC table #)、直流系数表号(DC table #)</h4><h4 id=\"4、压缩图像数据-compressed-image-data\"><a href=\"#4、压缩图像数据-compressed-image-data\" class=\"headerlink\" title=\"4、压缩图像数据(compressed image data)\"></a>4、压缩图像数据(compressed image data)</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698479093444-74b30768-4e29-40d8-82cf-0aa075fb691a.png\" alt=\"img\"></p>\n<h3 id=\"八、图像结束EOI-End-of-Image-，数值0xD9\"><a href=\"#八、图像结束EOI-End-of-Image-，数值0xD9\" class=\"headerlink\" title=\"八、图像结束EOI(End of Image)，数值0xD9\"></a>八、图像结束EOI(End of Image)，数值0xD9</h3>"},{"_content":"# PNG文件结构*\n\n> 出处：https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html\n\n## 前言\n\nPNG，JPEG，GIF,BMP作为数据压缩文件，有许多重要的信息我们需要区深度解析。\n\n\n\n## 一.PNG的文件结构\n\n### 1.1、数据块构成结构\n\nPNG文件结构很简单，主要有数据块(Chunk Block)组成，最少包含4个数据块。\n\n| PNG标识符 | PNG数据块（IHDR） | PNG数据块(其他类型数据块) | ...  | PNG结尾数据块(IEND) |\n| --------- | ----------------- | ------------------------- | ---- | ------------------- |\n|           |                   |                           |      |                     |\n\n\n\n### 1.2、所有PNG数据块（Chunk）\n\nPNG定义了两种类型的数据块，一种是称为关键数据块(critical chunk)，这是标准的数据块，另一种叫做辅助数据块(ancillary chunks)，这是可选的数据块。关键数据块定义了4个标准数据块，每个PNG文件都必须包含它们，PNG读写软件也都必须要支持这些数据块。虽然PNG文件规范没有要求PNG编译码器对可选数据块进行编码和译码，但规范提倡支持可选数据块。\n\n下表就是PNG中数据块的类别，其中，关键数据块部分我们使用深色背景加以区分。\n\n| **PNG文件格式中的数据块** |                        |              |            |                    |\n| ------------------------- | ---------------------- | ------------ | ---------- | ------------------ |\n| **数据块符号**            | **数据块名称**         | **多数据块** | **可选否** | **位置限制**       |\n| IHDR                      | 文件头数据块           | 否           | 否         | 第一块             |\n| cHRM                      | 基色和白色点数据块     | 否           | 是         | 在PLTE和IDAT之前   |\n| gAMA                      | 图像γ数据块            | 否           | 是         | 在PLTE和IDAT之前   |\n| sBIT                      | 样本有效位数据块       | 否           | 是         | 在PLTE和IDAT之前   |\n| PLTE                      | 调色板数据块           | 否           | 是         | 在IDAT之前         |\n| bKGD                      | 背景颜色数据块         | 否           | 是         | 在PLTE之后IDAT之前 |\n| hIST                      | 图像直方图数据块       | 否           | 是         | 在PLTE之后IDAT之前 |\n| tRNS                      | 图像透明数据块         | 否           | 是         | 在PLTE之后IDAT之前 |\n| oFFs                      | (专用公共数据块)       | 否           | 是         | 在IDAT之前         |\n| pHYs                      | 物理像素尺寸数据块     | 否           | 是         | 在IDAT之前         |\n| sCAL                      | (专用公共数据块)       | 否           | 是         | 在IDAT之前         |\n| IDAT                      | 图像数据块             | 是           | 否         | 与其他IDAT连续     |\n| tIME                      | 图像最后修改时间数据块 | 否           | 是         | 无限制             |\n| tEXt                      | 文本信息数据块         | 是           | 是         | 无限制             |\n| zTXt                      | 压缩文本数据块         | 是           | 是         | 无限制             |\n| fRAc                      | (专用公共数据块)       | 是           | 是         | 无限制             |\n| gIFg                      | (专用公共数据块)       | 是           | 是         | 无限制             |\n| gIFt                      | (专用公共数据块)       | 是           | 是         | 无限制             |\n| gIFx                      | (专用公共数据块)       | 是           | 是         | 无限制             |\n| IEND                      | 图像结束数据           | 否           | 否         | 最后一个数据块     |\n\n### 1.3、数据块结构\n\nPNG文件中，每个数据块由4个部分组成，如下：\n\n| **名称**                       | **字节数** | **说明**                                                |\n| ------------------------------ | ---------- | ------------------------------------------------------- |\n| Length (长度)                  | 4字节      | 指定数据块中数据域的长度，其长度不超过(231－1)字节      |\n| Chunk Type Code (数据块类型码) | 4字节      | 数据块类型码由ASCII字母(A-Z和a-z)组成的“**数据块符号”** |\n| Chunk Data (数据块数据)        | 可变长度   | 存储按照Chunk Type Code指定的数据                       |\n| CRC (循环冗余检测)             | 4字节      | 存储用来检测是否有错误的循环冗余码                      |\n\n\n\nCRC(cyclic redundancy check)域中的值是对Chunk Type Code域和Chunk Data域中的数据进行计算得到的。CRC具体算法定义在ISO 3309和ITU-T V.42中，其值按下面的CRC码生成多项式进行计算：\n\n```\nx32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1\n```\n\nCRC: 一种校验算法。仅仅用来校验数据的正确性的，这里因为使用了4个字节，说明使用的是CRC32标准算法。\n\n\n\n## 二.PNG图像标识符\n\n根据PNG文件的定义来说，其文件头位置总是由位固定的字节来描述的：\n\n| 十进制数   | 137 80 78 71 13 10 26 10 |\n| ---------- | ------------------------ |\n| 十六进制数 | 89 50 4E 47 0D 0A 1A 0A  |\n\nJPEG，PNG,GIF,BMP等图片都具有不同的图像标识符号，判读一个文件的正确mimeType类型，更应该通过标识符,而不是通过后缀名判断，下面这种方法是不可靠的，因为后缀名可以随便修改。\n\n```\nboolean isPNG = filename.endsWith(\".png\");\n```\n\n同样，jdk本身提供api判断文件 mime type依旧有问题的，他同样是根据后缀名判断，甚至不去检测文件是否存在。\n\n```\nString contentTypeFor = URLConnection.getFileNameMap().getContentTypeFor(\"123.gif\");\n```\n\n\n\n## **三.IHDR数据块**\n\n文件头数据块IHDR(header chunk)：它包含有PNG文件中存储的图像数据的基本信息，并要作为第一个数据块出现在PNG数据流中，而且一个PNG数据流中只能有一个文件头数据块。\n\n文件头数据块由13字节组成，它的格式如下表所示。\n\n| **域的名称**       | **字节数** | **说明**                                                     |\n| ------------------ | ---------- | ------------------------------------------------------------ |\n| Width              | 4 bytes    | 图像宽度，以像素为单位                                       |\n| Height             | 4 bytes    | 图像高度，以像素为单位                                       |\n| Bit depth          | 1 byte     | 图像深度：  索引彩色图像：1，2，4或8  灰度图像：1，2，4，8或16  真彩色图像：8或16 |\n| ColorType          | 1 byte     | 颜色类型： 0：灰度图像, 1，2，4，8或16  2：真彩色图像，8或16  3：索引彩色图像，1，2，4或8  4：带α通道数据的灰度图像，8或16  6：带α通道数据的真彩色图像，8或16 |\n| Compression method | 1 byte     | 压缩方法(LZ77派生算法)                                       |\n| Filter method      | 1 byte     | 滤波器方法                                                   |\n| Interlace method   | 1 byte     | 隔行扫描方法： 0：非隔行扫描  1： Adam7(由Adam M. Costello开发的7遍隔行扫描方法) |\n\n由于本文很多设计到了PNG在手机方面的应用，因此在此提出MIDP1.0对所使用PNG图片的要求：\n\n- 在MIDP1.0中，只可以使用1.0版本的PNG图片。\n- 文件大小：MIDP支持任意大小的PNG图片，然而实际上，如果一个图片过大，会由于内存耗尽而无法读取。\n- 颜色类型：所有颜色类型都有被支持，虽然这些颜色的显示依赖于实际设备的显示能力。同时，MIDP也能支持alpha通道，但是，所有的alpha通道信息都会被忽略并且当作不透明的颜色对待。\n- 色深：所有的色深都能被支持。\n- 压缩方法：仅支持deflate压缩方式，这和jar文件的压缩方式完全相同，所以，PNG图片数据的解压和jar文件的解压可以使用相同的代码。\n- 滤波器方法：在PNG中所有的5种方法都被支持。\n- 隔行扫描：虽然MIDP支持0、1两种方式，然而，当使用隔行扫描时，MIDP却不会真正的使用隔行扫描方式来显示。\n- PLTE chunk：支持\n- IDAT chunk：图像信息必须使用5种过滤方式中的方式之一 (None, Sub, Up, Average, Paeth)\n- IEND chunk：当IEND数据块被找到时，这个PNG图像才认为是合法的PNG图像。\n- 可选数据块：MIDP可以支持下列辅助数据块，然而，这却不是必须的。\n\n```\nbKGD cHRM gAMA hIST iCCP iTXt pHYs sBIT sPLT sRGB tEXt tIME tRNS zTXt\n```\n\n### **PLTE**\n\n调色板数据块PLTE(palette chunk)包含有与索引彩色图像(indexed-color image)相关的彩色变换数据，它仅与索引彩色图像有关，而且要放在图像数据块(image data chunk)之前。\n\nPLTE数据块是定义图像的调色板信息，PLTE可以包含1~256个调色板信息，每一个调色板信息由3个字节组成：\n\n| **颜色** | **字节** | **意义**             |\n| -------- | -------- | -------------------- |\n| Red      | 1 byte   | 0 = 黑色, 255 = 红   |\n| Green    | 1 byte   | 0 = 黑色, 255 = 绿色 |\n| Blue     | 1 byte   | 0 = 黑色, 255 = 蓝色 |\n\n因此，调色板的长度应该是3的倍数，否则，这将是一个非法的调色板。\n\n对于索引图像，调色板信息是必须的，调色板的颜色索引从0开始编号，然后是1、2……，调色板的颜色数不能超过色深中规定的颜色数（如图像色深为4的时候，调色板中的颜色数不可以超过2^4=16），否则，这将导致PNG图像不合法。\n\n真彩色图像和带alpha通道数据的真彩色图像也可以有调色板数据块，目的是便于非真彩色显示程序用它来量化图像数据，从而显示该图像。\n\n### **IDAT**\n\n图像数据块IDAT(image data chunk)：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。\n\nIDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像。\n\n### **IEND**\n\n图像结束数据IEND(image trailer chunk)：它用来标记PNG文件或者数据流已经结束，并且必须要放在文件的尾部。\n\n如果我们仔细观察PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：\n\n```\n00 00 00 00 49 45 4E 44 AE 42 60 82\n```\n\n不难明白，由于数据块结构的定义，IEND数据块的长度总是0（00 00 00 00，除非人为加入信息），数据标识总是IEND（49 45 4E 44），因此，CRC码也总是AE 42 60 82。\n\n### **实例研究PNG**\n\n以下是由Fireworks生成的一幅图像，图像大小为8*8，\n\n为了方便观看，将图像放大：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986365-518e1d25-58bf-4a1c-a280-589ed1a67315.png)\n使用UltraEdit32或者WinHex打开该文件，如下：\n**00000000~00000007：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986393-e7227895-f26c-4acf-9acb-cff0ef35a47e.png)\n\n可以看到，选中的头8个字节即为PNG文件的标识。\n\n接下来的地方就是IHDR数据块了：\n\n**00000008~00000020：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986455-35a53acb-f04f-4e31-8f00-f0246b2c2bf3.png)\n\n- 00 00 00 0D 说明IHDR头块长为13\n- 49 48 44 52 IHDR标识\n- 00 00 00 08 图像的宽，8像素\n- 00 00 00 08 图像的高，8像素\n- 04 色深，2^4=16，即这是一个16色的图像（也有可能颜色数不超过16，当然，如果颜色数不超过8，用03表示更合适）\n- 03 颜色类型，索引图像\n- 00 PNG Spec规定此处总为0（非0值为将来使用更好的压缩方法预留），表示使压缩方法(LZ77派生算法)\n- 00 同上\n- 00 非隔行扫描\n- 36 21 A3 B8 CRC校验\n\nCRC校验代码如下：\n\n```java\nimport java.util.zip.CRC32;\n\npublic class CrcTest {\n\n    \n    public static void main(String[] args) {\n            \n         byte[] checkData = new byte[]{0x49,0x48,0x44,0x52,0x00,0x00,0x00, 0x08,0x00,0x00,0x00, 0x08,0x04,0x03,0x00,0x00,0x00};\n         CRC32 crc32 = new CRC32();  \n         crc32.update(checkData);\n         long value = crc32.getValue();\n         \n         byte[] intToBytes = longToBytes(value);\n         String bytesToHexString = bytesToHexString(intToBytes);\n         System.out.println(bytesToHexString);\n         \n    }\n    \n    public static byte[] longToBytes(long value)   \n    {   \n        byte[] src = new byte[4];  \n        src[0] = (byte) ((value>>24) & 0xFF);  \n        src[1] = (byte) ((value>>16)& 0xFF);  \n        src[2] = (byte) ((value>>8)&0xFF);    \n        src[3] = (byte) (value & 0xFF);       \n        return src;  \n    } \n     //将字节数组按16进制输出\n        public static String bytesToHexString(byte[] src){\n            \n            StringBuilder stringBuilder = new StringBuilder(\"\");\n            if (src == null || src.length <= 0) {\n                return null;\n            }\n            for (int i = 0; i < src.length; i++)\n            {\n                int v = src[i] & 0xFF;\n                String hv = Integer.toHexString(v);\n\n                if (stringBuilder.length() != 0) {\n                    stringBuilder.append(\",\");\n                }\n                if (hv.length() < 2) {\n                    stringBuilder.append(0);\n                }\n                stringBuilder.append(hv);\n            }\n            return stringBuilder.toString();\n        }\n\n}\n```\n\n\n\n宽高爆破脚本\n\n```python\nimport os\nimport binascii\nimport  struct\ncrcbp = open(\"x.png\",'rb').read()\nfor i in range(4000) :\n    for j in range(4000):\n        data = crcbp[12:16] + struct.pack('>i',i) + struct.pack('>i',j) + crcbp[24:29]\n        crc32 = binascii.crc32(data) & 0xffffffff\n        if crc32 == xxxxxxxxxx : #根据crc校验修改,记得前面加0x\n            print(i,j)\n            print(\"hex\",hex(i),hex(j))\n```\n\n**00000021~0000002F：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986685-b3390235-af8d-4ce6-9d71-dd899d927678.png)\n\n可选数据块sBIT，颜色采样率，RGB都是256（2^8=256）\n\n**00000030~00000062：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986805-54b37dce-6de2-498d-85b1-49cd72393d94.png)\n\n这里是调色板信息\n\n- 00 00 00 27 说明调色板数据长为39字节，既13个颜色数\n- 50 4C 54 45 PLTE标识\n- FF FF 00 颜色0\n- FF ED 00 颜色1\n- …… ……\n- 09 00 B2 最后一个颜色，12\n- 5F F5 BB DD CRC校验\n\n**00000063~000000C5：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987130-c9bec3e8-b161-46fd-8bc6-2856afa94e37.png)\n\n这部分包含了pHYs、tExt两种类型的数据块共3块，由于并不太重要，因此也不再详细描述了。\n\n**000000C0~000000F8：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986860-84b13037-340d-4a68-a2cc-994fcb399fc8.png)\n\n以上选中部分是IDAT数据块\n\n- 00 00 00 27 数据长为39字节\n- 49 44 41 54 IDAT标识\n- 78 9C…… 压缩的数据，LZ77派生压缩方法\n- DA 12 06 A5 CRC校验\n\nIDAT中压缩数据部分在后面会有详细的介绍。\n\n**000000F9~00000104：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986991-c41e725b-0696-4a3a-bafe-01a5b066ec38.png)\n\nIEND数据块，这部分正如上所说，通常都应该是\n\n```\n00 00 00 00 49 45 4E 44 AE 42 60 82\n```\n\n至此，我们已经能够从一个PNG文件中识别出各个数据块了。由于PNG中规定除关键数据块外，其它的辅助数据块都为可选部分，因此，有了这个标准后，我们可以通过删除所有的辅助数据块来减少PNG文件的大小。（当然，需要注意的是，PNG格式可以保存图像中的层、文字等信息，一旦删除了这些辅助数据块后，图像将失去原来的可编辑性。）![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987262-df0033af-1e59-4845-9e98-d1dd43a20e3e.png)\n\n删除了辅助数据块后的PNG文件，现在文件大小为147字节，原文件大小为261字节，文件大小减少后，并不影响图像的内容。参考：[打造自由换色的png图片类](http://blog.csdn.net/flyingghost/article/details/251110)。\n\n- 如上说过，IDAT数据块是使用了LZ77压缩算法生成的，由于受限于手机处理器的能力，因此，如果我们在生成IDAT数据块时仍然使用LZ77压缩算法，将会使效率大打折扣，因此，为了效率，只能使用无压缩的LZ77算法，关于LZ77算法的具体实现，此文不打算深究，如果你对LZ77算法的JAVA实现有兴趣，可以参考以下两个站点：\n- http://jazzlib.sourceforge.net/\n- http://www.jcraft.com/jzlib/index.html\n\n\n\n## **四.PNG文件结构分析(下：在手机上生成PNG文件)**\n\n上面我们已经对PNG的存储格式有了了解，因此，生成PNG图片只需要按照以上的数据块写入文件即可。\n\n(由于IHDR、PLTE的结构都非常简单，因此，这里我们只是重点讲一讲IDAT的生成方法，IHDR和PLTE的数据内容都沿用以上的数据内容)\n\n问题确实是这样的，我们知道，对于大多数的图形文件来说，我们都可以将实际的图像内容映射为一个二维的颜色数组，对于上面的PNG文件，由于它用的是16色的调色板（实际是13色），因此，对于图片的映射可以如下：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987297-250cef08-49a0-441b-83b2-a119a8332f75.png)\n\n| 12   | 11   | 10   | 9    | 8    | 7    | 6    | 5    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 11   | 10   | 9    | 8    | 7    | 6    | 5    | 4    |\n| 10   | 9    | 8    | 7    | 6    | 5    | 4    | 3    |\n| 9    | 8    | 7    | 6    | 5    | 4    | 3    | 2    |\n| 8    | 7    | 6    | 5    | 4    | 3    | 2    | 1    |\n| 7    | 6    | 5    | 4    | 3    | 2    | 1    | 0    |\n| 6    | 5    | 4    | 3    | 2    | 1    | 0    | 0    |\n| 5    | 4    | 3    | 2    | 1    | 0    | 0    | 0    |\n\nPNG Spec中指出，如果PNG文件不是采用隔行扫描方法存储的话，那么，数据是按照行(ScanLine)来存储的，为了区分第一行，PNG规定在每一行的前面加上0以示区分，因此，上面的图像映射应该如下：\n\n| 0    | 12   | 11   | 10   | 9    | 8    | 7    | 6    | 5    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 0    | 11   | 10   | 9    | 8    | 7    | 6    | 5    | 4    |\n| 0    | 10   | 9    | 8    | 7    | 6    | 5    | 4    | 3    |\n| 0    | 9    | 8    | 7    | 6    | 5    | 4    | 3    | 2    |\n| 0    | 8    | 7    | 6    | 5    | 4    | 3    | 2    | 1    |\n| 0    | 7    | 6    | 5    | 4    | 3    | 2    | 1    | 0    |\n| 0    | 6    | 5    | 4    | 3    | 2    | 1    | 0    | 0    |\n| 0    | 5    | 4    | 3    | 2    | 1    | 0    | 0    | 0    |\n\n另外，需要注意的是，由于PNG在存储图像时为了节省空间，因此每一行是按照位(Bit)来存储的，而并不是我们想象的字节（Byte），如果你没有忘记的话，我们的IHDR数据块中的色深就指明了这一点，所以，为了凑成PNG所需要的IDAT，我们的数据得改成如下：\n\n| 0    | 203  | 169  | 135  | 101  |\n| ---- | ---- | ---- | ---- | ---- |\n| 0    | 186  | 152  | 118  | 84   |\n| 0    | 169  | 135  | 101  | 67   |\n| 0    | 152  | 118  | 84   | 50   |\n| 0    | 135  | 101  | 67   | 33   |\n| 0    | 118  | 84   | 50   | 16   |\n| 0    | 101  | 67   | 33   | 0    |\n| 0    | 84   | 50   | 16   | 0    |\n\n\n\n最后，我们对这些数据进行LZ77压缩就可以得到IDAT的正确内容了。\n\n然而，事情并不是这么简单，因为我们研究的是手机上的PNG，如果需要在手机上完成LZ77压缩工作，消耗的时间是可想而知的，因此，我们得再想办法加减少压缩时消耗的时间。\n\n好在LZ77也提供了无压缩的压缩方法（奇怪吧？），因此，我们只需要简单的使用无压缩的方式写入数据就可以了，这样虽然浪费了空间，却换回了时间！\n\n好了，让我们看一看怎么样凑成无压缩的LZ77压缩块：\n\n| **字节**   | **意义**                        |\n| ---------- | ------------------------------- |\n| 0~2        | 压缩信息，固定为0x78, 0xda, 0x1 |\n| 3~6        | 压缩块的LEN和NLEN信息           |\n| 压缩的数据 |                                 |\n| 最后4字节  | Adler32信息                     |\n\n\n\n其中的LEN是指数据的长度，占用两个字节，对于我们的图像来说，第一个Scan Line包含了5个字节（如第一行的0, 203, 169, 135, 101），所以LEN的值为5（字节/行） * 8（行） = 40（字节），生成字节为28 00（低字节在前），NLEN是LEN的补码，即NLEN = LEN ^ 0xFFFF，所以NLEN的为 D7 FF，Adler32信息为24 A7 0B A4（具体算法见源程序），因此，按照这样的顺序，我们生成IDAT数据块，最后，我们将IHDR、PLTE、IDAT和IEND数据块写入文件中，就可以得到PNG文件了，如图：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987461-9585881e-b71b-4046-8d19-4db3c9d10125.png)\n\n（选中的部分为生成的“压缩”数据）\n\n至此，我们已经能够采用最快的时间将数组转换为PNG图片了。","source":"_posts/PNG文件结构.md","raw":"# PNG文件结构*\n\n> 出处：https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html\n\n## 前言\n\nPNG，JPEG，GIF,BMP作为数据压缩文件，有许多重要的信息我们需要区深度解析。\n\n\n\n## 一.PNG的文件结构\n\n### 1.1、数据块构成结构\n\nPNG文件结构很简单，主要有数据块(Chunk Block)组成，最少包含4个数据块。\n\n| PNG标识符 | PNG数据块（IHDR） | PNG数据块(其他类型数据块) | ...  | PNG结尾数据块(IEND) |\n| --------- | ----------------- | ------------------------- | ---- | ------------------- |\n|           |                   |                           |      |                     |\n\n\n\n### 1.2、所有PNG数据块（Chunk）\n\nPNG定义了两种类型的数据块，一种是称为关键数据块(critical chunk)，这是标准的数据块，另一种叫做辅助数据块(ancillary chunks)，这是可选的数据块。关键数据块定义了4个标准数据块，每个PNG文件都必须包含它们，PNG读写软件也都必须要支持这些数据块。虽然PNG文件规范没有要求PNG编译码器对可选数据块进行编码和译码，但规范提倡支持可选数据块。\n\n下表就是PNG中数据块的类别，其中，关键数据块部分我们使用深色背景加以区分。\n\n| **PNG文件格式中的数据块** |                        |              |            |                    |\n| ------------------------- | ---------------------- | ------------ | ---------- | ------------------ |\n| **数据块符号**            | **数据块名称**         | **多数据块** | **可选否** | **位置限制**       |\n| IHDR                      | 文件头数据块           | 否           | 否         | 第一块             |\n| cHRM                      | 基色和白色点数据块     | 否           | 是         | 在PLTE和IDAT之前   |\n| gAMA                      | 图像γ数据块            | 否           | 是         | 在PLTE和IDAT之前   |\n| sBIT                      | 样本有效位数据块       | 否           | 是         | 在PLTE和IDAT之前   |\n| PLTE                      | 调色板数据块           | 否           | 是         | 在IDAT之前         |\n| bKGD                      | 背景颜色数据块         | 否           | 是         | 在PLTE之后IDAT之前 |\n| hIST                      | 图像直方图数据块       | 否           | 是         | 在PLTE之后IDAT之前 |\n| tRNS                      | 图像透明数据块         | 否           | 是         | 在PLTE之后IDAT之前 |\n| oFFs                      | (专用公共数据块)       | 否           | 是         | 在IDAT之前         |\n| pHYs                      | 物理像素尺寸数据块     | 否           | 是         | 在IDAT之前         |\n| sCAL                      | (专用公共数据块)       | 否           | 是         | 在IDAT之前         |\n| IDAT                      | 图像数据块             | 是           | 否         | 与其他IDAT连续     |\n| tIME                      | 图像最后修改时间数据块 | 否           | 是         | 无限制             |\n| tEXt                      | 文本信息数据块         | 是           | 是         | 无限制             |\n| zTXt                      | 压缩文本数据块         | 是           | 是         | 无限制             |\n| fRAc                      | (专用公共数据块)       | 是           | 是         | 无限制             |\n| gIFg                      | (专用公共数据块)       | 是           | 是         | 无限制             |\n| gIFt                      | (专用公共数据块)       | 是           | 是         | 无限制             |\n| gIFx                      | (专用公共数据块)       | 是           | 是         | 无限制             |\n| IEND                      | 图像结束数据           | 否           | 否         | 最后一个数据块     |\n\n### 1.3、数据块结构\n\nPNG文件中，每个数据块由4个部分组成，如下：\n\n| **名称**                       | **字节数** | **说明**                                                |\n| ------------------------------ | ---------- | ------------------------------------------------------- |\n| Length (长度)                  | 4字节      | 指定数据块中数据域的长度，其长度不超过(231－1)字节      |\n| Chunk Type Code (数据块类型码) | 4字节      | 数据块类型码由ASCII字母(A-Z和a-z)组成的“**数据块符号”** |\n| Chunk Data (数据块数据)        | 可变长度   | 存储按照Chunk Type Code指定的数据                       |\n| CRC (循环冗余检测)             | 4字节      | 存储用来检测是否有错误的循环冗余码                      |\n\n\n\nCRC(cyclic redundancy check)域中的值是对Chunk Type Code域和Chunk Data域中的数据进行计算得到的。CRC具体算法定义在ISO 3309和ITU-T V.42中，其值按下面的CRC码生成多项式进行计算：\n\n```\nx32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1\n```\n\nCRC: 一种校验算法。仅仅用来校验数据的正确性的，这里因为使用了4个字节，说明使用的是CRC32标准算法。\n\n\n\n## 二.PNG图像标识符\n\n根据PNG文件的定义来说，其文件头位置总是由位固定的字节来描述的：\n\n| 十进制数   | 137 80 78 71 13 10 26 10 |\n| ---------- | ------------------------ |\n| 十六进制数 | 89 50 4E 47 0D 0A 1A 0A  |\n\nJPEG，PNG,GIF,BMP等图片都具有不同的图像标识符号，判读一个文件的正确mimeType类型，更应该通过标识符,而不是通过后缀名判断，下面这种方法是不可靠的，因为后缀名可以随便修改。\n\n```\nboolean isPNG = filename.endsWith(\".png\");\n```\n\n同样，jdk本身提供api判断文件 mime type依旧有问题的，他同样是根据后缀名判断，甚至不去检测文件是否存在。\n\n```\nString contentTypeFor = URLConnection.getFileNameMap().getContentTypeFor(\"123.gif\");\n```\n\n\n\n## **三.IHDR数据块**\n\n文件头数据块IHDR(header chunk)：它包含有PNG文件中存储的图像数据的基本信息，并要作为第一个数据块出现在PNG数据流中，而且一个PNG数据流中只能有一个文件头数据块。\n\n文件头数据块由13字节组成，它的格式如下表所示。\n\n| **域的名称**       | **字节数** | **说明**                                                     |\n| ------------------ | ---------- | ------------------------------------------------------------ |\n| Width              | 4 bytes    | 图像宽度，以像素为单位                                       |\n| Height             | 4 bytes    | 图像高度，以像素为单位                                       |\n| Bit depth          | 1 byte     | 图像深度：  索引彩色图像：1，2，4或8  灰度图像：1，2，4，8或16  真彩色图像：8或16 |\n| ColorType          | 1 byte     | 颜色类型： 0：灰度图像, 1，2，4，8或16  2：真彩色图像，8或16  3：索引彩色图像，1，2，4或8  4：带α通道数据的灰度图像，8或16  6：带α通道数据的真彩色图像，8或16 |\n| Compression method | 1 byte     | 压缩方法(LZ77派生算法)                                       |\n| Filter method      | 1 byte     | 滤波器方法                                                   |\n| Interlace method   | 1 byte     | 隔行扫描方法： 0：非隔行扫描  1： Adam7(由Adam M. Costello开发的7遍隔行扫描方法) |\n\n由于本文很多设计到了PNG在手机方面的应用，因此在此提出MIDP1.0对所使用PNG图片的要求：\n\n- 在MIDP1.0中，只可以使用1.0版本的PNG图片。\n- 文件大小：MIDP支持任意大小的PNG图片，然而实际上，如果一个图片过大，会由于内存耗尽而无法读取。\n- 颜色类型：所有颜色类型都有被支持，虽然这些颜色的显示依赖于实际设备的显示能力。同时，MIDP也能支持alpha通道，但是，所有的alpha通道信息都会被忽略并且当作不透明的颜色对待。\n- 色深：所有的色深都能被支持。\n- 压缩方法：仅支持deflate压缩方式，这和jar文件的压缩方式完全相同，所以，PNG图片数据的解压和jar文件的解压可以使用相同的代码。\n- 滤波器方法：在PNG中所有的5种方法都被支持。\n- 隔行扫描：虽然MIDP支持0、1两种方式，然而，当使用隔行扫描时，MIDP却不会真正的使用隔行扫描方式来显示。\n- PLTE chunk：支持\n- IDAT chunk：图像信息必须使用5种过滤方式中的方式之一 (None, Sub, Up, Average, Paeth)\n- IEND chunk：当IEND数据块被找到时，这个PNG图像才认为是合法的PNG图像。\n- 可选数据块：MIDP可以支持下列辅助数据块，然而，这却不是必须的。\n\n```\nbKGD cHRM gAMA hIST iCCP iTXt pHYs sBIT sPLT sRGB tEXt tIME tRNS zTXt\n```\n\n### **PLTE**\n\n调色板数据块PLTE(palette chunk)包含有与索引彩色图像(indexed-color image)相关的彩色变换数据，它仅与索引彩色图像有关，而且要放在图像数据块(image data chunk)之前。\n\nPLTE数据块是定义图像的调色板信息，PLTE可以包含1~256个调色板信息，每一个调色板信息由3个字节组成：\n\n| **颜色** | **字节** | **意义**             |\n| -------- | -------- | -------------------- |\n| Red      | 1 byte   | 0 = 黑色, 255 = 红   |\n| Green    | 1 byte   | 0 = 黑色, 255 = 绿色 |\n| Blue     | 1 byte   | 0 = 黑色, 255 = 蓝色 |\n\n因此，调色板的长度应该是3的倍数，否则，这将是一个非法的调色板。\n\n对于索引图像，调色板信息是必须的，调色板的颜色索引从0开始编号，然后是1、2……，调色板的颜色数不能超过色深中规定的颜色数（如图像色深为4的时候，调色板中的颜色数不可以超过2^4=16），否则，这将导致PNG图像不合法。\n\n真彩色图像和带alpha通道数据的真彩色图像也可以有调色板数据块，目的是便于非真彩色显示程序用它来量化图像数据，从而显示该图像。\n\n### **IDAT**\n\n图像数据块IDAT(image data chunk)：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。\n\nIDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像。\n\n### **IEND**\n\n图像结束数据IEND(image trailer chunk)：它用来标记PNG文件或者数据流已经结束，并且必须要放在文件的尾部。\n\n如果我们仔细观察PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：\n\n```\n00 00 00 00 49 45 4E 44 AE 42 60 82\n```\n\n不难明白，由于数据块结构的定义，IEND数据块的长度总是0（00 00 00 00，除非人为加入信息），数据标识总是IEND（49 45 4E 44），因此，CRC码也总是AE 42 60 82。\n\n### **实例研究PNG**\n\n以下是由Fireworks生成的一幅图像，图像大小为8*8，\n\n为了方便观看，将图像放大：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986365-518e1d25-58bf-4a1c-a280-589ed1a67315.png)\n使用UltraEdit32或者WinHex打开该文件，如下：\n**00000000~00000007：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986393-e7227895-f26c-4acf-9acb-cff0ef35a47e.png)\n\n可以看到，选中的头8个字节即为PNG文件的标识。\n\n接下来的地方就是IHDR数据块了：\n\n**00000008~00000020：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986455-35a53acb-f04f-4e31-8f00-f0246b2c2bf3.png)\n\n- 00 00 00 0D 说明IHDR头块长为13\n- 49 48 44 52 IHDR标识\n- 00 00 00 08 图像的宽，8像素\n- 00 00 00 08 图像的高，8像素\n- 04 色深，2^4=16，即这是一个16色的图像（也有可能颜色数不超过16，当然，如果颜色数不超过8，用03表示更合适）\n- 03 颜色类型，索引图像\n- 00 PNG Spec规定此处总为0（非0值为将来使用更好的压缩方法预留），表示使压缩方法(LZ77派生算法)\n- 00 同上\n- 00 非隔行扫描\n- 36 21 A3 B8 CRC校验\n\nCRC校验代码如下：\n\n```java\nimport java.util.zip.CRC32;\n\npublic class CrcTest {\n\n    \n    public static void main(String[] args) {\n            \n         byte[] checkData = new byte[]{0x49,0x48,0x44,0x52,0x00,0x00,0x00, 0x08,0x00,0x00,0x00, 0x08,0x04,0x03,0x00,0x00,0x00};\n         CRC32 crc32 = new CRC32();  \n         crc32.update(checkData);\n         long value = crc32.getValue();\n         \n         byte[] intToBytes = longToBytes(value);\n         String bytesToHexString = bytesToHexString(intToBytes);\n         System.out.println(bytesToHexString);\n         \n    }\n    \n    public static byte[] longToBytes(long value)   \n    {   \n        byte[] src = new byte[4];  \n        src[0] = (byte) ((value>>24) & 0xFF);  \n        src[1] = (byte) ((value>>16)& 0xFF);  \n        src[2] = (byte) ((value>>8)&0xFF);    \n        src[3] = (byte) (value & 0xFF);       \n        return src;  \n    } \n     //将字节数组按16进制输出\n        public static String bytesToHexString(byte[] src){\n            \n            StringBuilder stringBuilder = new StringBuilder(\"\");\n            if (src == null || src.length <= 0) {\n                return null;\n            }\n            for (int i = 0; i < src.length; i++)\n            {\n                int v = src[i] & 0xFF;\n                String hv = Integer.toHexString(v);\n\n                if (stringBuilder.length() != 0) {\n                    stringBuilder.append(\",\");\n                }\n                if (hv.length() < 2) {\n                    stringBuilder.append(0);\n                }\n                stringBuilder.append(hv);\n            }\n            return stringBuilder.toString();\n        }\n\n}\n```\n\n\n\n宽高爆破脚本\n\n```python\nimport os\nimport binascii\nimport  struct\ncrcbp = open(\"x.png\",'rb').read()\nfor i in range(4000) :\n    for j in range(4000):\n        data = crcbp[12:16] + struct.pack('>i',i) + struct.pack('>i',j) + crcbp[24:29]\n        crc32 = binascii.crc32(data) & 0xffffffff\n        if crc32 == xxxxxxxxxx : #根据crc校验修改,记得前面加0x\n            print(i,j)\n            print(\"hex\",hex(i),hex(j))\n```\n\n**00000021~0000002F：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986685-b3390235-af8d-4ce6-9d71-dd899d927678.png)\n\n可选数据块sBIT，颜色采样率，RGB都是256（2^8=256）\n\n**00000030~00000062：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986805-54b37dce-6de2-498d-85b1-49cd72393d94.png)\n\n这里是调色板信息\n\n- 00 00 00 27 说明调色板数据长为39字节，既13个颜色数\n- 50 4C 54 45 PLTE标识\n- FF FF 00 颜色0\n- FF ED 00 颜色1\n- …… ……\n- 09 00 B2 最后一个颜色，12\n- 5F F5 BB DD CRC校验\n\n**00000063~000000C5：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987130-c9bec3e8-b161-46fd-8bc6-2856afa94e37.png)\n\n这部分包含了pHYs、tExt两种类型的数据块共3块，由于并不太重要，因此也不再详细描述了。\n\n**000000C0~000000F8：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986860-84b13037-340d-4a68-a2cc-994fcb399fc8.png)\n\n以上选中部分是IDAT数据块\n\n- 00 00 00 27 数据长为39字节\n- 49 44 41 54 IDAT标识\n- 78 9C…… 压缩的数据，LZ77派生压缩方法\n- DA 12 06 A5 CRC校验\n\nIDAT中压缩数据部分在后面会有详细的介绍。\n\n**000000F9~00000104：**\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986991-c41e725b-0696-4a3a-bafe-01a5b066ec38.png)\n\nIEND数据块，这部分正如上所说，通常都应该是\n\n```\n00 00 00 00 49 45 4E 44 AE 42 60 82\n```\n\n至此，我们已经能够从一个PNG文件中识别出各个数据块了。由于PNG中规定除关键数据块外，其它的辅助数据块都为可选部分，因此，有了这个标准后，我们可以通过删除所有的辅助数据块来减少PNG文件的大小。（当然，需要注意的是，PNG格式可以保存图像中的层、文字等信息，一旦删除了这些辅助数据块后，图像将失去原来的可编辑性。）![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987262-df0033af-1e59-4845-9e98-d1dd43a20e3e.png)\n\n删除了辅助数据块后的PNG文件，现在文件大小为147字节，原文件大小为261字节，文件大小减少后，并不影响图像的内容。参考：[打造自由换色的png图片类](http://blog.csdn.net/flyingghost/article/details/251110)。\n\n- 如上说过，IDAT数据块是使用了LZ77压缩算法生成的，由于受限于手机处理器的能力，因此，如果我们在生成IDAT数据块时仍然使用LZ77压缩算法，将会使效率大打折扣，因此，为了效率，只能使用无压缩的LZ77算法，关于LZ77算法的具体实现，此文不打算深究，如果你对LZ77算法的JAVA实现有兴趣，可以参考以下两个站点：\n- http://jazzlib.sourceforge.net/\n- http://www.jcraft.com/jzlib/index.html\n\n\n\n## **四.PNG文件结构分析(下：在手机上生成PNG文件)**\n\n上面我们已经对PNG的存储格式有了了解，因此，生成PNG图片只需要按照以上的数据块写入文件即可。\n\n(由于IHDR、PLTE的结构都非常简单，因此，这里我们只是重点讲一讲IDAT的生成方法，IHDR和PLTE的数据内容都沿用以上的数据内容)\n\n问题确实是这样的，我们知道，对于大多数的图形文件来说，我们都可以将实际的图像内容映射为一个二维的颜色数组，对于上面的PNG文件，由于它用的是16色的调色板（实际是13色），因此，对于图片的映射可以如下：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987297-250cef08-49a0-441b-83b2-a119a8332f75.png)\n\n| 12   | 11   | 10   | 9    | 8    | 7    | 6    | 5    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 11   | 10   | 9    | 8    | 7    | 6    | 5    | 4    |\n| 10   | 9    | 8    | 7    | 6    | 5    | 4    | 3    |\n| 9    | 8    | 7    | 6    | 5    | 4    | 3    | 2    |\n| 8    | 7    | 6    | 5    | 4    | 3    | 2    | 1    |\n| 7    | 6    | 5    | 4    | 3    | 2    | 1    | 0    |\n| 6    | 5    | 4    | 3    | 2    | 1    | 0    | 0    |\n| 5    | 4    | 3    | 2    | 1    | 0    | 0    | 0    |\n\nPNG Spec中指出，如果PNG文件不是采用隔行扫描方法存储的话，那么，数据是按照行(ScanLine)来存储的，为了区分第一行，PNG规定在每一行的前面加上0以示区分，因此，上面的图像映射应该如下：\n\n| 0    | 12   | 11   | 10   | 9    | 8    | 7    | 6    | 5    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 0    | 11   | 10   | 9    | 8    | 7    | 6    | 5    | 4    |\n| 0    | 10   | 9    | 8    | 7    | 6    | 5    | 4    | 3    |\n| 0    | 9    | 8    | 7    | 6    | 5    | 4    | 3    | 2    |\n| 0    | 8    | 7    | 6    | 5    | 4    | 3    | 2    | 1    |\n| 0    | 7    | 6    | 5    | 4    | 3    | 2    | 1    | 0    |\n| 0    | 6    | 5    | 4    | 3    | 2    | 1    | 0    | 0    |\n| 0    | 5    | 4    | 3    | 2    | 1    | 0    | 0    | 0    |\n\n另外，需要注意的是，由于PNG在存储图像时为了节省空间，因此每一行是按照位(Bit)来存储的，而并不是我们想象的字节（Byte），如果你没有忘记的话，我们的IHDR数据块中的色深就指明了这一点，所以，为了凑成PNG所需要的IDAT，我们的数据得改成如下：\n\n| 0    | 203  | 169  | 135  | 101  |\n| ---- | ---- | ---- | ---- | ---- |\n| 0    | 186  | 152  | 118  | 84   |\n| 0    | 169  | 135  | 101  | 67   |\n| 0    | 152  | 118  | 84   | 50   |\n| 0    | 135  | 101  | 67   | 33   |\n| 0    | 118  | 84   | 50   | 16   |\n| 0    | 101  | 67   | 33   | 0    |\n| 0    | 84   | 50   | 16   | 0    |\n\n\n\n最后，我们对这些数据进行LZ77压缩就可以得到IDAT的正确内容了。\n\n然而，事情并不是这么简单，因为我们研究的是手机上的PNG，如果需要在手机上完成LZ77压缩工作，消耗的时间是可想而知的，因此，我们得再想办法加减少压缩时消耗的时间。\n\n好在LZ77也提供了无压缩的压缩方法（奇怪吧？），因此，我们只需要简单的使用无压缩的方式写入数据就可以了，这样虽然浪费了空间，却换回了时间！\n\n好了，让我们看一看怎么样凑成无压缩的LZ77压缩块：\n\n| **字节**   | **意义**                        |\n| ---------- | ------------------------------- |\n| 0~2        | 压缩信息，固定为0x78, 0xda, 0x1 |\n| 3~6        | 压缩块的LEN和NLEN信息           |\n| 压缩的数据 |                                 |\n| 最后4字节  | Adler32信息                     |\n\n\n\n其中的LEN是指数据的长度，占用两个字节，对于我们的图像来说，第一个Scan Line包含了5个字节（如第一行的0, 203, 169, 135, 101），所以LEN的值为5（字节/行） * 8（行） = 40（字节），生成字节为28 00（低字节在前），NLEN是LEN的补码，即NLEN = LEN ^ 0xFFFF，所以NLEN的为 D7 FF，Adler32信息为24 A7 0B A4（具体算法见源程序），因此，按照这样的顺序，我们生成IDAT数据块，最后，我们将IHDR、PLTE、IDAT和IEND数据块写入文件中，就可以得到PNG文件了，如图：\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987461-9585881e-b71b-4046-8d19-4db3c9d10125.png)\n\n（选中的部分为生成的“压缩”数据）\n\n至此，我们已经能够采用最快的时间将数组转换为PNG图片了。","slug":"PNG文件结构","published":1,"date":"2023-11-06T09:59:21.534Z","updated":"2023-11-02T07:31:24.287Z","_id":"clomqd5mg0001x8zydem46uv9","title":"","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"PNG文件结构\"><a href=\"#PNG文件结构\" class=\"headerlink\" title=\"PNG文件结构*\"></a>PNG文件结构*</h1><blockquote>\n<p>出处：<a href=\"https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html\">https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html</a></p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>PNG，JPEG，GIF,BMP作为数据压缩文件，有许多重要的信息我们需要区深度解析。</p>\n<h2 id=\"一-PNG的文件结构\"><a href=\"#一-PNG的文件结构\" class=\"headerlink\" title=\"一.PNG的文件结构\"></a>一.PNG的文件结构</h2><h3 id=\"1-1、数据块构成结构\"><a href=\"#1-1、数据块构成结构\" class=\"headerlink\" title=\"1.1、数据块构成结构\"></a>1.1、数据块构成结构</h3><p>PNG文件结构很简单，主要有数据块(Chunk Block)组成，最少包含4个数据块。</p>\n<table>\n<thead>\n<tr>\n<th>PNG标识符</th>\n<th>PNG数据块（IHDR）</th>\n<th>PNG数据块(其他类型数据块)</th>\n<th>…</th>\n<th>PNG结尾数据块(IEND)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"1-2、所有PNG数据块（Chunk）\"><a href=\"#1-2、所有PNG数据块（Chunk）\" class=\"headerlink\" title=\"1.2、所有PNG数据块（Chunk）\"></a>1.2、所有PNG数据块（Chunk）</h3><p>PNG定义了两种类型的数据块，一种是称为关键数据块(critical chunk)，这是标准的数据块，另一种叫做辅助数据块(ancillary chunks)，这是可选的数据块。关键数据块定义了4个标准数据块，每个PNG文件都必须包含它们，PNG读写软件也都必须要支持这些数据块。虽然PNG文件规范没有要求PNG编译码器对可选数据块进行编码和译码，但规范提倡支持可选数据块。</p>\n<p>下表就是PNG中数据块的类别，其中，关键数据块部分我们使用深色背景加以区分。</p>\n<table>\n<thead>\n<tr>\n<th><strong>PNG文件格式中的数据块</strong></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>数据块符号</strong></td>\n<td><strong>数据块名称</strong></td>\n<td><strong>多数据块</strong></td>\n<td><strong>可选否</strong></td>\n<td><strong>位置限制</strong></td>\n</tr>\n<tr>\n<td>IHDR</td>\n<td>文件头数据块</td>\n<td>否</td>\n<td>否</td>\n<td>第一块</td>\n</tr>\n<tr>\n<td>cHRM</td>\n<td>基色和白色点数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE和IDAT之前</td>\n</tr>\n<tr>\n<td>gAMA</td>\n<td>图像γ数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE和IDAT之前</td>\n</tr>\n<tr>\n<td>sBIT</td>\n<td>样本有效位数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE和IDAT之前</td>\n</tr>\n<tr>\n<td>PLTE</td>\n<td>调色板数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在IDAT之前</td>\n</tr>\n<tr>\n<td>bKGD</td>\n<td>背景颜色数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE之后IDAT之前</td>\n</tr>\n<tr>\n<td>hIST</td>\n<td>图像直方图数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE之后IDAT之前</td>\n</tr>\n<tr>\n<td>tRNS</td>\n<td>图像透明数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE之后IDAT之前</td>\n</tr>\n<tr>\n<td>oFFs</td>\n<td>(专用公共数据块)</td>\n<td>否</td>\n<td>是</td>\n<td>在IDAT之前</td>\n</tr>\n<tr>\n<td>pHYs</td>\n<td>物理像素尺寸数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在IDAT之前</td>\n</tr>\n<tr>\n<td>sCAL</td>\n<td>(专用公共数据块)</td>\n<td>否</td>\n<td>是</td>\n<td>在IDAT之前</td>\n</tr>\n<tr>\n<td>IDAT</td>\n<td>图像数据块</td>\n<td>是</td>\n<td>否</td>\n<td>与其他IDAT连续</td>\n</tr>\n<tr>\n<td>tIME</td>\n<td>图像最后修改时间数据块</td>\n<td>否</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>tEXt</td>\n<td>文本信息数据块</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>zTXt</td>\n<td>压缩文本数据块</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>fRAc</td>\n<td>(专用公共数据块)</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>gIFg</td>\n<td>(专用公共数据块)</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>gIFt</td>\n<td>(专用公共数据块)</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>gIFx</td>\n<td>(专用公共数据块)</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>IEND</td>\n<td>图像结束数据</td>\n<td>否</td>\n<td>否</td>\n<td>最后一个数据块</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-3、数据块结构\"><a href=\"#1-3、数据块结构\" class=\"headerlink\" title=\"1.3、数据块结构\"></a>1.3、数据块结构</h3><p>PNG文件中，每个数据块由4个部分组成，如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>名称</strong></th>\n<th><strong>字节数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Length (长度)</td>\n<td>4字节</td>\n<td>指定数据块中数据域的长度，其长度不超过(231－1)字节</td>\n</tr>\n<tr>\n<td>Chunk Type Code (数据块类型码)</td>\n<td>4字节</td>\n<td>数据块类型码由ASCII字母(A-Z和a-z)组成的“<strong>数据块符号”</strong></td>\n</tr>\n<tr>\n<td>Chunk Data (数据块数据)</td>\n<td>可变长度</td>\n<td>存储按照Chunk Type Code指定的数据</td>\n</tr>\n<tr>\n<td>CRC (循环冗余检测)</td>\n<td>4字节</td>\n<td>存储用来检测是否有错误的循环冗余码</td>\n</tr>\n</tbody></table>\n<p>CRC(cyclic redundancy check)域中的值是对Chunk Type Code域和Chunk Data域中的数据进行计算得到的。CRC具体算法定义在ISO 3309和ITU-T V.42中，其值按下面的CRC码生成多项式进行计算：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1</span><br></pre></td></tr></table></figure>\n\n<p>CRC: 一种校验算法。仅仅用来校验数据的正确性的，这里因为使用了4个字节，说明使用的是CRC32标准算法。</p>\n<h2 id=\"二-PNG图像标识符\"><a href=\"#二-PNG图像标识符\" class=\"headerlink\" title=\"二.PNG图像标识符\"></a>二.PNG图像标识符</h2><p>根据PNG文件的定义来说，其文件头位置总是由位固定的字节来描述的：</p>\n<table>\n<thead>\n<tr>\n<th>十进制数</th>\n<th>137 80 78 71 13 10 26 10</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>十六进制数</td>\n<td>89 50 4E 47 0D 0A 1A 0A</td>\n</tr>\n</tbody></table>\n<p>JPEG，PNG,GIF,BMP等图片都具有不同的图像标识符号，判读一个文件的正确mimeType类型，更应该通过标识符,而不是通过后缀名判断，下面这种方法是不可靠的，因为后缀名可以随便修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isPNG = filename.endsWith(&quot;.png&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>同样，jdk本身提供api判断文件 mime type依旧有问题的，他同样是根据后缀名判断，甚至不去检测文件是否存在。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String contentTypeFor = URLConnection.getFileNameMap().getContentTypeFor(&quot;123.gif&quot;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三-IHDR数据块\"><a href=\"#三-IHDR数据块\" class=\"headerlink\" title=\"三.IHDR数据块\"></a><strong>三.IHDR数据块</strong></h2><p>文件头数据块IHDR(header chunk)：它包含有PNG文件中存储的图像数据的基本信息，并要作为第一个数据块出现在PNG数据流中，而且一个PNG数据流中只能有一个文件头数据块。</p>\n<p>文件头数据块由13字节组成，它的格式如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th><strong>域的名称</strong></th>\n<th><strong>字节数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Width</td>\n<td>4 bytes</td>\n<td>图像宽度，以像素为单位</td>\n</tr>\n<tr>\n<td>Height</td>\n<td>4 bytes</td>\n<td>图像高度，以像素为单位</td>\n</tr>\n<tr>\n<td>Bit depth</td>\n<td>1 byte</td>\n<td>图像深度：  索引彩色图像：1，2，4或8  灰度图像：1，2，4，8或16  真彩色图像：8或16</td>\n</tr>\n<tr>\n<td>ColorType</td>\n<td>1 byte</td>\n<td>颜色类型： 0：灰度图像, 1，2，4，8或16  2：真彩色图像，8或16  3：索引彩色图像，1，2，4或8  4：带α通道数据的灰度图像，8或16  6：带α通道数据的真彩色图像，8或16</td>\n</tr>\n<tr>\n<td>Compression method</td>\n<td>1 byte</td>\n<td>压缩方法(LZ77派生算法)</td>\n</tr>\n<tr>\n<td>Filter method</td>\n<td>1 byte</td>\n<td>滤波器方法</td>\n</tr>\n<tr>\n<td>Interlace method</td>\n<td>1 byte</td>\n<td>隔行扫描方法： 0：非隔行扫描  1： Adam7(由Adam M. Costello开发的7遍隔行扫描方法)</td>\n</tr>\n</tbody></table>\n<p>由于本文很多设计到了PNG在手机方面的应用，因此在此提出MIDP1.0对所使用PNG图片的要求：</p>\n<ul>\n<li>在MIDP1.0中，只可以使用1.0版本的PNG图片。</li>\n<li>文件大小：MIDP支持任意大小的PNG图片，然而实际上，如果一个图片过大，会由于内存耗尽而无法读取。</li>\n<li>颜色类型：所有颜色类型都有被支持，虽然这些颜色的显示依赖于实际设备的显示能力。同时，MIDP也能支持alpha通道，但是，所有的alpha通道信息都会被忽略并且当作不透明的颜色对待。</li>\n<li>色深：所有的色深都能被支持。</li>\n<li>压缩方法：仅支持deflate压缩方式，这和jar文件的压缩方式完全相同，所以，PNG图片数据的解压和jar文件的解压可以使用相同的代码。</li>\n<li>滤波器方法：在PNG中所有的5种方法都被支持。</li>\n<li>隔行扫描：虽然MIDP支持0、1两种方式，然而，当使用隔行扫描时，MIDP却不会真正的使用隔行扫描方式来显示。</li>\n<li>PLTE chunk：支持</li>\n<li>IDAT chunk：图像信息必须使用5种过滤方式中的方式之一 (None, Sub, Up, Average, Paeth)</li>\n<li>IEND chunk：当IEND数据块被找到时，这个PNG图像才认为是合法的PNG图像。</li>\n<li>可选数据块：MIDP可以支持下列辅助数据块，然而，这却不是必须的。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bKGD cHRM gAMA hIST iCCP iTXt pHYs sBIT sPLT sRGB tEXt tIME tRNS zTXt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PLTE\"><a href=\"#PLTE\" class=\"headerlink\" title=\"PLTE\"></a><strong>PLTE</strong></h3><p>调色板数据块PLTE(palette chunk)包含有与索引彩色图像(indexed-color image)相关的彩色变换数据，它仅与索引彩色图像有关，而且要放在图像数据块(image data chunk)之前。</p>\n<p>PLTE数据块是定义图像的调色板信息，PLTE可以包含1~256个调色板信息，每一个调色板信息由3个字节组成：</p>\n<table>\n<thead>\n<tr>\n<th><strong>颜色</strong></th>\n<th><strong>字节</strong></th>\n<th><strong>意义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Red</td>\n<td>1 byte</td>\n<td>0 &#x3D; 黑色, 255 &#x3D; 红</td>\n</tr>\n<tr>\n<td>Green</td>\n<td>1 byte</td>\n<td>0 &#x3D; 黑色, 255 &#x3D; 绿色</td>\n</tr>\n<tr>\n<td>Blue</td>\n<td>1 byte</td>\n<td>0 &#x3D; 黑色, 255 &#x3D; 蓝色</td>\n</tr>\n</tbody></table>\n<p>因此，调色板的长度应该是3的倍数，否则，这将是一个非法的调色板。</p>\n<p>对于索引图像，调色板信息是必须的，调色板的颜色索引从0开始编号，然后是1、2……，调色板的颜色数不能超过色深中规定的颜色数（如图像色深为4的时候，调色板中的颜色数不可以超过2^4&#x3D;16），否则，这将导致PNG图像不合法。</p>\n<p>真彩色图像和带alpha通道数据的真彩色图像也可以有调色板数据块，目的是便于非真彩色显示程序用它来量化图像数据，从而显示该图像。</p>\n<h3 id=\"IDAT\"><a href=\"#IDAT\" class=\"headerlink\" title=\"IDAT\"></a><strong>IDAT</strong></h3><p>图像数据块IDAT(image data chunk)：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。</p>\n<p>IDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像。</p>\n<h3 id=\"IEND\"><a href=\"#IEND\" class=\"headerlink\" title=\"IEND\"></a><strong>IEND</strong></h3><p>图像结束数据IEND(image trailer chunk)：它用来标记PNG文件或者数据流已经结束，并且必须要放在文件的尾部。</p>\n<p>如果我们仔细观察PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00 00 00 00 49 45 4E 44 AE 42 60 82</span><br></pre></td></tr></table></figure>\n\n<p>不难明白，由于数据块结构的定义，IEND数据块的长度总是0（00 00 00 00，除非人为加入信息），数据标识总是IEND（49 45 4E 44），因此，CRC码也总是AE 42 60 82。</p>\n<h3 id=\"实例研究PNG\"><a href=\"#实例研究PNG\" class=\"headerlink\" title=\"实例研究PNG\"></a><strong>实例研究PNG</strong></h3><p>以下是由Fireworks生成的一幅图像，图像大小为8*8，</p>\n<p>为了方便观看，将图像放大：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986365-518e1d25-58bf-4a1c-a280-589ed1a67315.png\" alt=\"img\"><br>使用UltraEdit32或者WinHex打开该文件，如下：<br><strong>00000000~00000007：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986393-e7227895-f26c-4acf-9acb-cff0ef35a47e.png\" alt=\"img\"></p>\n<p>可以看到，选中的头8个字节即为PNG文件的标识。</p>\n<p>接下来的地方就是IHDR数据块了：</p>\n<p><strong>00000008~00000020：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986455-35a53acb-f04f-4e31-8f00-f0246b2c2bf3.png\" alt=\"img\"></p>\n<ul>\n<li>00 00 00 0D 说明IHDR头块长为13</li>\n<li>49 48 44 52 IHDR标识</li>\n<li>00 00 00 08 图像的宽，8像素</li>\n<li>00 00 00 08 图像的高，8像素</li>\n<li>04 色深，2^4&#x3D;16，即这是一个16色的图像（也有可能颜色数不超过16，当然，如果颜色数不超过8，用03表示更合适）</li>\n<li>03 颜色类型，索引图像</li>\n<li>00 PNG Spec规定此处总为0（非0值为将来使用更好的压缩方法预留），表示使压缩方法(LZ77派生算法)</li>\n<li>00 同上</li>\n<li>00 非隔行扫描</li>\n<li>36 21 A3 B8 CRC校验</li>\n</ul>\n<p>CRC校验代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.CRC32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CrcTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">         <span class=\"type\">byte</span>[] checkData = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[]&#123;<span class=\"number\">0x49</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x52</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>, <span class=\"number\">0x08</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>, <span class=\"number\">0x08</span>,<span class=\"number\">0x04</span>,<span class=\"number\">0x03</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>&#125;;</span><br><span class=\"line\">         <span class=\"type\">CRC32</span> <span class=\"variable\">crc32</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CRC32</span>();  </span><br><span class=\"line\">         crc32.update(checkData);</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> crc32.getValue();</span><br><span class=\"line\">         </span><br><span class=\"line\">         <span class=\"type\">byte</span>[] intToBytes = longToBytes(value);</span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">bytesToHexString</span> <span class=\"operator\">=</span> bytesToHexString(intToBytes);</span><br><span class=\"line\">         System.out.println(bytesToHexString);</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">byte</span>[] longToBytes(<span class=\"type\">long</span> value)   </span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        <span class=\"type\">byte</span>[] src = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">4</span>];  </span><br><span class=\"line\">        src[<span class=\"number\">0</span>] = (<span class=\"type\">byte</span>) ((value&gt;&gt;<span class=\"number\">24</span>) &amp; <span class=\"number\">0xFF</span>);  </span><br><span class=\"line\">        src[<span class=\"number\">1</span>] = (<span class=\"type\">byte</span>) ((value&gt;&gt;<span class=\"number\">16</span>)&amp; <span class=\"number\">0xFF</span>);  </span><br><span class=\"line\">        src[<span class=\"number\">2</span>] = (<span class=\"type\">byte</span>) ((value&gt;&gt;<span class=\"number\">8</span>)&amp;<span class=\"number\">0xFF</span>);    </span><br><span class=\"line\">        src[<span class=\"number\">3</span>] = (<span class=\"type\">byte</span>) (value &amp; <span class=\"number\">0xFF</span>);       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> src;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">     <span class=\"comment\">//将字节数组按16进制输出</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">bytesToHexString</span><span class=\"params\">(<span class=\"type\">byte</span>[] src)</span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">StringBuilder</span> <span class=\"variable\">stringBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (src == <span class=\"literal\">null</span> || src.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; src.length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">v</span> <span class=\"operator\">=</span> src[i] &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">hv</span> <span class=\"operator\">=</span> Integer.toHexString(v);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stringBuilder.length() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    stringBuilder.append(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hv.length() &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    stringBuilder.append(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                stringBuilder.append(hv);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> stringBuilder.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>宽高爆破脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span>  struct</span><br><span class=\"line\">crcbp = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;x.png&quot;</span>,<span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4000</span>) :</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4000</span>):</span><br><span class=\"line\">        data = crcbp[<span class=\"number\">12</span>:<span class=\"number\">16</span>] + struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>,i) + struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>,j) + crcbp[<span class=\"number\">24</span>:<span class=\"number\">29</span>]</span><br><span class=\"line\">        crc32 = binascii.crc32(data) &amp; <span class=\"number\">0xffffffff</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> crc32 == xxxxxxxxxx : <span class=\"comment\">#根据crc校验修改,记得前面加0x</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(i,j)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hex&quot;</span>,<span class=\"built_in\">hex</span>(i),<span class=\"built_in\">hex</span>(j))</span><br></pre></td></tr></table></figure>\n\n<p><strong>00000021~0000002F：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986685-b3390235-af8d-4ce6-9d71-dd899d927678.png\" alt=\"img\"></p>\n<p>可选数据块sBIT，颜色采样率，RGB都是256（2^8&#x3D;256）</p>\n<p><strong>00000030~00000062：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986805-54b37dce-6de2-498d-85b1-49cd72393d94.png\" alt=\"img\"></p>\n<p>这里是调色板信息</p>\n<ul>\n<li>00 00 00 27 说明调色板数据长为39字节，既13个颜色数</li>\n<li>50 4C 54 45 PLTE标识</li>\n<li>FF FF 00 颜色0</li>\n<li>FF ED 00 颜色1</li>\n<li>…… ……</li>\n<li>09 00 B2 最后一个颜色，12</li>\n<li>5F F5 BB DD CRC校验</li>\n</ul>\n<p><strong>00000063~000000C5：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987130-c9bec3e8-b161-46fd-8bc6-2856afa94e37.png\" alt=\"img\"></p>\n<p>这部分包含了pHYs、tExt两种类型的数据块共3块，由于并不太重要，因此也不再详细描述了。</p>\n<p><strong>000000C0~000000F8：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986860-84b13037-340d-4a68-a2cc-994fcb399fc8.png\" alt=\"img\"></p>\n<p>以上选中部分是IDAT数据块</p>\n<ul>\n<li>00 00 00 27 数据长为39字节</li>\n<li>49 44 41 54 IDAT标识</li>\n<li>78 9C…… 压缩的数据，LZ77派生压缩方法</li>\n<li>DA 12 06 A5 CRC校验</li>\n</ul>\n<p>IDAT中压缩数据部分在后面会有详细的介绍。</p>\n<p><strong>000000F9~00000104：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986991-c41e725b-0696-4a3a-bafe-01a5b066ec38.png\" alt=\"img\"></p>\n<p>IEND数据块，这部分正如上所说，通常都应该是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00 00 00 00 49 45 4E 44 AE 42 60 82</span><br></pre></td></tr></table></figure>\n\n<p>至此，我们已经能够从一个PNG文件中识别出各个数据块了。由于PNG中规定除关键数据块外，其它的辅助数据块都为可选部分，因此，有了这个标准后，我们可以通过删除所有的辅助数据块来减少PNG文件的大小。（当然，需要注意的是，PNG格式可以保存图像中的层、文字等信息，一旦删除了这些辅助数据块后，图像将失去原来的可编辑性。）<img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987262-df0033af-1e59-4845-9e98-d1dd43a20e3e.png\" alt=\"img\"></p>\n<p>删除了辅助数据块后的PNG文件，现在文件大小为147字节，原文件大小为261字节，文件大小减少后，并不影响图像的内容。参考：<a href=\"http://blog.csdn.net/flyingghost/article/details/251110\">打造自由换色的png图片类</a>。</p>\n<ul>\n<li>如上说过，IDAT数据块是使用了LZ77压缩算法生成的，由于受限于手机处理器的能力，因此，如果我们在生成IDAT数据块时仍然使用LZ77压缩算法，将会使效率大打折扣，因此，为了效率，只能使用无压缩的LZ77算法，关于LZ77算法的具体实现，此文不打算深究，如果你对LZ77算法的JAVA实现有兴趣，可以参考以下两个站点：</li>\n<li><a href=\"http://jazzlib.sourceforge.net/\">http://jazzlib.sourceforge.net/</a></li>\n<li><a href=\"http://www.jcraft.com/jzlib/index.html\">http://www.jcraft.com/jzlib/index.html</a></li>\n</ul>\n<h2 id=\"四-PNG文件结构分析-下：在手机上生成PNG文件\"><a href=\"#四-PNG文件结构分析-下：在手机上生成PNG文件\" class=\"headerlink\" title=\"四.PNG文件结构分析(下：在手机上生成PNG文件)\"></a><strong>四.PNG文件结构分析(下：在手机上生成PNG文件)</strong></h2><p>上面我们已经对PNG的存储格式有了了解，因此，生成PNG图片只需要按照以上的数据块写入文件即可。</p>\n<p>(由于IHDR、PLTE的结构都非常简单，因此，这里我们只是重点讲一讲IDAT的生成方法，IHDR和PLTE的数据内容都沿用以上的数据内容)</p>\n<p>问题确实是这样的，我们知道，对于大多数的图形文件来说，我们都可以将实际的图像内容映射为一个二维的颜色数组，对于上面的PNG文件，由于它用的是16色的调色板（实际是13色），因此，对于图片的映射可以如下：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987297-250cef08-49a0-441b-83b2-a119a8332f75.png\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>12</th>\n<th>11</th>\n<th>10</th>\n<th>9</th>\n<th>8</th>\n<th>7</th>\n<th>6</th>\n<th>5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>11</td>\n<td>10</td>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n</tr>\n<tr>\n<td>10</td>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n</tr>\n<tr>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n</tr>\n<tr>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>PNG Spec中指出，如果PNG文件不是采用隔行扫描方法存储的话，那么，数据是按照行(ScanLine)来存储的，为了区分第一行，PNG规定在每一行的前面加上0以示区分，因此，上面的图像映射应该如下：</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>12</th>\n<th>11</th>\n<th>10</th>\n<th>9</th>\n<th>8</th>\n<th>7</th>\n<th>6</th>\n<th>5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>11</td>\n<td>10</td>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n</tr>\n<tr>\n<td>0</td>\n<td>10</td>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n</tr>\n<tr>\n<td>0</td>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n</tr>\n<tr>\n<td>0</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>另外，需要注意的是，由于PNG在存储图像时为了节省空间，因此每一行是按照位(Bit)来存储的，而并不是我们想象的字节（Byte），如果你没有忘记的话，我们的IHDR数据块中的色深就指明了这一点，所以，为了凑成PNG所需要的IDAT，我们的数据得改成如下：</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>203</th>\n<th>169</th>\n<th>135</th>\n<th>101</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>186</td>\n<td>152</td>\n<td>118</td>\n<td>84</td>\n</tr>\n<tr>\n<td>0</td>\n<td>169</td>\n<td>135</td>\n<td>101</td>\n<td>67</td>\n</tr>\n<tr>\n<td>0</td>\n<td>152</td>\n<td>118</td>\n<td>84</td>\n<td>50</td>\n</tr>\n<tr>\n<td>0</td>\n<td>135</td>\n<td>101</td>\n<td>67</td>\n<td>33</td>\n</tr>\n<tr>\n<td>0</td>\n<td>118</td>\n<td>84</td>\n<td>50</td>\n<td>16</td>\n</tr>\n<tr>\n<td>0</td>\n<td>101</td>\n<td>67</td>\n<td>33</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>84</td>\n<td>50</td>\n<td>16</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>最后，我们对这些数据进行LZ77压缩就可以得到IDAT的正确内容了。</p>\n<p>然而，事情并不是这么简单，因为我们研究的是手机上的PNG，如果需要在手机上完成LZ77压缩工作，消耗的时间是可想而知的，因此，我们得再想办法加减少压缩时消耗的时间。</p>\n<p>好在LZ77也提供了无压缩的压缩方法（奇怪吧？），因此，我们只需要简单的使用无压缩的方式写入数据就可以了，这样虽然浪费了空间，却换回了时间！</p>\n<p>好了，让我们看一看怎么样凑成无压缩的LZ77压缩块：</p>\n<table>\n<thead>\n<tr>\n<th><strong>字节</strong></th>\n<th><strong>意义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0~2</td>\n<td>压缩信息，固定为0x78, 0xda, 0x1</td>\n</tr>\n<tr>\n<td>3~6</td>\n<td>压缩块的LEN和NLEN信息</td>\n</tr>\n<tr>\n<td>压缩的数据</td>\n<td></td>\n</tr>\n<tr>\n<td>最后4字节</td>\n<td>Adler32信息</td>\n</tr>\n</tbody></table>\n<p>其中的LEN是指数据的长度，占用两个字节，对于我们的图像来说，第一个Scan Line包含了5个字节（如第一行的0, 203, 169, 135, 101），所以LEN的值为5（字节&#x2F;行） * 8（行） &#x3D; 40（字节），生成字节为28 00（低字节在前），NLEN是LEN的补码，即NLEN &#x3D; LEN ^ 0xFFFF，所以NLEN的为 D7 FF，Adler32信息为24 A7 0B A4（具体算法见源程序），因此，按照这样的顺序，我们生成IDAT数据块，最后，我们将IHDR、PLTE、IDAT和IEND数据块写入文件中，就可以得到PNG文件了，如图：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987461-9585881e-b71b-4046-8d19-4db3c9d10125.png\" alt=\"img\"></p>\n<p>（选中的部分为生成的“压缩”数据）</p>\n<p>至此，我们已经能够采用最快的时间将数组转换为PNG图片了。</p>\n","length":7734,"excerpt":"","more":"<h1 id=\"PNG文件结构\"><a href=\"#PNG文件结构\" class=\"headerlink\" title=\"PNG文件结构*\"></a>PNG文件结构*</h1><blockquote>\n<p>出处：<a href=\"https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html\">https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html</a></p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>PNG，JPEG，GIF,BMP作为数据压缩文件，有许多重要的信息我们需要区深度解析。</p>\n<h2 id=\"一-PNG的文件结构\"><a href=\"#一-PNG的文件结构\" class=\"headerlink\" title=\"一.PNG的文件结构\"></a>一.PNG的文件结构</h2><h3 id=\"1-1、数据块构成结构\"><a href=\"#1-1、数据块构成结构\" class=\"headerlink\" title=\"1.1、数据块构成结构\"></a>1.1、数据块构成结构</h3><p>PNG文件结构很简单，主要有数据块(Chunk Block)组成，最少包含4个数据块。</p>\n<table>\n<thead>\n<tr>\n<th>PNG标识符</th>\n<th>PNG数据块（IHDR）</th>\n<th>PNG数据块(其他类型数据块)</th>\n<th>…</th>\n<th>PNG结尾数据块(IEND)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"1-2、所有PNG数据块（Chunk）\"><a href=\"#1-2、所有PNG数据块（Chunk）\" class=\"headerlink\" title=\"1.2、所有PNG数据块（Chunk）\"></a>1.2、所有PNG数据块（Chunk）</h3><p>PNG定义了两种类型的数据块，一种是称为关键数据块(critical chunk)，这是标准的数据块，另一种叫做辅助数据块(ancillary chunks)，这是可选的数据块。关键数据块定义了4个标准数据块，每个PNG文件都必须包含它们，PNG读写软件也都必须要支持这些数据块。虽然PNG文件规范没有要求PNG编译码器对可选数据块进行编码和译码，但规范提倡支持可选数据块。</p>\n<p>下表就是PNG中数据块的类别，其中，关键数据块部分我们使用深色背景加以区分。</p>\n<table>\n<thead>\n<tr>\n<th><strong>PNG文件格式中的数据块</strong></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>数据块符号</strong></td>\n<td><strong>数据块名称</strong></td>\n<td><strong>多数据块</strong></td>\n<td><strong>可选否</strong></td>\n<td><strong>位置限制</strong></td>\n</tr>\n<tr>\n<td>IHDR</td>\n<td>文件头数据块</td>\n<td>否</td>\n<td>否</td>\n<td>第一块</td>\n</tr>\n<tr>\n<td>cHRM</td>\n<td>基色和白色点数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE和IDAT之前</td>\n</tr>\n<tr>\n<td>gAMA</td>\n<td>图像γ数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE和IDAT之前</td>\n</tr>\n<tr>\n<td>sBIT</td>\n<td>样本有效位数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE和IDAT之前</td>\n</tr>\n<tr>\n<td>PLTE</td>\n<td>调色板数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在IDAT之前</td>\n</tr>\n<tr>\n<td>bKGD</td>\n<td>背景颜色数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE之后IDAT之前</td>\n</tr>\n<tr>\n<td>hIST</td>\n<td>图像直方图数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE之后IDAT之前</td>\n</tr>\n<tr>\n<td>tRNS</td>\n<td>图像透明数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在PLTE之后IDAT之前</td>\n</tr>\n<tr>\n<td>oFFs</td>\n<td>(专用公共数据块)</td>\n<td>否</td>\n<td>是</td>\n<td>在IDAT之前</td>\n</tr>\n<tr>\n<td>pHYs</td>\n<td>物理像素尺寸数据块</td>\n<td>否</td>\n<td>是</td>\n<td>在IDAT之前</td>\n</tr>\n<tr>\n<td>sCAL</td>\n<td>(专用公共数据块)</td>\n<td>否</td>\n<td>是</td>\n<td>在IDAT之前</td>\n</tr>\n<tr>\n<td>IDAT</td>\n<td>图像数据块</td>\n<td>是</td>\n<td>否</td>\n<td>与其他IDAT连续</td>\n</tr>\n<tr>\n<td>tIME</td>\n<td>图像最后修改时间数据块</td>\n<td>否</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>tEXt</td>\n<td>文本信息数据块</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>zTXt</td>\n<td>压缩文本数据块</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>fRAc</td>\n<td>(专用公共数据块)</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>gIFg</td>\n<td>(专用公共数据块)</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>gIFt</td>\n<td>(专用公共数据块)</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>gIFx</td>\n<td>(专用公共数据块)</td>\n<td>是</td>\n<td>是</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>IEND</td>\n<td>图像结束数据</td>\n<td>否</td>\n<td>否</td>\n<td>最后一个数据块</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-3、数据块结构\"><a href=\"#1-3、数据块结构\" class=\"headerlink\" title=\"1.3、数据块结构\"></a>1.3、数据块结构</h3><p>PNG文件中，每个数据块由4个部分组成，如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>名称</strong></th>\n<th><strong>字节数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Length (长度)</td>\n<td>4字节</td>\n<td>指定数据块中数据域的长度，其长度不超过(231－1)字节</td>\n</tr>\n<tr>\n<td>Chunk Type Code (数据块类型码)</td>\n<td>4字节</td>\n<td>数据块类型码由ASCII字母(A-Z和a-z)组成的“<strong>数据块符号”</strong></td>\n</tr>\n<tr>\n<td>Chunk Data (数据块数据)</td>\n<td>可变长度</td>\n<td>存储按照Chunk Type Code指定的数据</td>\n</tr>\n<tr>\n<td>CRC (循环冗余检测)</td>\n<td>4字节</td>\n<td>存储用来检测是否有错误的循环冗余码</td>\n</tr>\n</tbody></table>\n<p>CRC(cyclic redundancy check)域中的值是对Chunk Type Code域和Chunk Data域中的数据进行计算得到的。CRC具体算法定义在ISO 3309和ITU-T V.42中，其值按下面的CRC码生成多项式进行计算：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1</span><br></pre></td></tr></table></figure>\n\n<p>CRC: 一种校验算法。仅仅用来校验数据的正确性的，这里因为使用了4个字节，说明使用的是CRC32标准算法。</p>\n<h2 id=\"二-PNG图像标识符\"><a href=\"#二-PNG图像标识符\" class=\"headerlink\" title=\"二.PNG图像标识符\"></a>二.PNG图像标识符</h2><p>根据PNG文件的定义来说，其文件头位置总是由位固定的字节来描述的：</p>\n<table>\n<thead>\n<tr>\n<th>十进制数</th>\n<th>137 80 78 71 13 10 26 10</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>十六进制数</td>\n<td>89 50 4E 47 0D 0A 1A 0A</td>\n</tr>\n</tbody></table>\n<p>JPEG，PNG,GIF,BMP等图片都具有不同的图像标识符号，判读一个文件的正确mimeType类型，更应该通过标识符,而不是通过后缀名判断，下面这种方法是不可靠的，因为后缀名可以随便修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isPNG = filename.endsWith(&quot;.png&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>同样，jdk本身提供api判断文件 mime type依旧有问题的，他同样是根据后缀名判断，甚至不去检测文件是否存在。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String contentTypeFor = URLConnection.getFileNameMap().getContentTypeFor(&quot;123.gif&quot;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三-IHDR数据块\"><a href=\"#三-IHDR数据块\" class=\"headerlink\" title=\"三.IHDR数据块\"></a><strong>三.IHDR数据块</strong></h2><p>文件头数据块IHDR(header chunk)：它包含有PNG文件中存储的图像数据的基本信息，并要作为第一个数据块出现在PNG数据流中，而且一个PNG数据流中只能有一个文件头数据块。</p>\n<p>文件头数据块由13字节组成，它的格式如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th><strong>域的名称</strong></th>\n<th><strong>字节数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Width</td>\n<td>4 bytes</td>\n<td>图像宽度，以像素为单位</td>\n</tr>\n<tr>\n<td>Height</td>\n<td>4 bytes</td>\n<td>图像高度，以像素为单位</td>\n</tr>\n<tr>\n<td>Bit depth</td>\n<td>1 byte</td>\n<td>图像深度：  索引彩色图像：1，2，4或8  灰度图像：1，2，4，8或16  真彩色图像：8或16</td>\n</tr>\n<tr>\n<td>ColorType</td>\n<td>1 byte</td>\n<td>颜色类型： 0：灰度图像, 1，2，4，8或16  2：真彩色图像，8或16  3：索引彩色图像，1，2，4或8  4：带α通道数据的灰度图像，8或16  6：带α通道数据的真彩色图像，8或16</td>\n</tr>\n<tr>\n<td>Compression method</td>\n<td>1 byte</td>\n<td>压缩方法(LZ77派生算法)</td>\n</tr>\n<tr>\n<td>Filter method</td>\n<td>1 byte</td>\n<td>滤波器方法</td>\n</tr>\n<tr>\n<td>Interlace method</td>\n<td>1 byte</td>\n<td>隔行扫描方法： 0：非隔行扫描  1： Adam7(由Adam M. Costello开发的7遍隔行扫描方法)</td>\n</tr>\n</tbody></table>\n<p>由于本文很多设计到了PNG在手机方面的应用，因此在此提出MIDP1.0对所使用PNG图片的要求：</p>\n<ul>\n<li>在MIDP1.0中，只可以使用1.0版本的PNG图片。</li>\n<li>文件大小：MIDP支持任意大小的PNG图片，然而实际上，如果一个图片过大，会由于内存耗尽而无法读取。</li>\n<li>颜色类型：所有颜色类型都有被支持，虽然这些颜色的显示依赖于实际设备的显示能力。同时，MIDP也能支持alpha通道，但是，所有的alpha通道信息都会被忽略并且当作不透明的颜色对待。</li>\n<li>色深：所有的色深都能被支持。</li>\n<li>压缩方法：仅支持deflate压缩方式，这和jar文件的压缩方式完全相同，所以，PNG图片数据的解压和jar文件的解压可以使用相同的代码。</li>\n<li>滤波器方法：在PNG中所有的5种方法都被支持。</li>\n<li>隔行扫描：虽然MIDP支持0、1两种方式，然而，当使用隔行扫描时，MIDP却不会真正的使用隔行扫描方式来显示。</li>\n<li>PLTE chunk：支持</li>\n<li>IDAT chunk：图像信息必须使用5种过滤方式中的方式之一 (None, Sub, Up, Average, Paeth)</li>\n<li>IEND chunk：当IEND数据块被找到时，这个PNG图像才认为是合法的PNG图像。</li>\n<li>可选数据块：MIDP可以支持下列辅助数据块，然而，这却不是必须的。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bKGD cHRM gAMA hIST iCCP iTXt pHYs sBIT sPLT sRGB tEXt tIME tRNS zTXt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PLTE\"><a href=\"#PLTE\" class=\"headerlink\" title=\"PLTE\"></a><strong>PLTE</strong></h3><p>调色板数据块PLTE(palette chunk)包含有与索引彩色图像(indexed-color image)相关的彩色变换数据，它仅与索引彩色图像有关，而且要放在图像数据块(image data chunk)之前。</p>\n<p>PLTE数据块是定义图像的调色板信息，PLTE可以包含1~256个调色板信息，每一个调色板信息由3个字节组成：</p>\n<table>\n<thead>\n<tr>\n<th><strong>颜色</strong></th>\n<th><strong>字节</strong></th>\n<th><strong>意义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Red</td>\n<td>1 byte</td>\n<td>0 &#x3D; 黑色, 255 &#x3D; 红</td>\n</tr>\n<tr>\n<td>Green</td>\n<td>1 byte</td>\n<td>0 &#x3D; 黑色, 255 &#x3D; 绿色</td>\n</tr>\n<tr>\n<td>Blue</td>\n<td>1 byte</td>\n<td>0 &#x3D; 黑色, 255 &#x3D; 蓝色</td>\n</tr>\n</tbody></table>\n<p>因此，调色板的长度应该是3的倍数，否则，这将是一个非法的调色板。</p>\n<p>对于索引图像，调色板信息是必须的，调色板的颜色索引从0开始编号，然后是1、2……，调色板的颜色数不能超过色深中规定的颜色数（如图像色深为4的时候，调色板中的颜色数不可以超过2^4&#x3D;16），否则，这将导致PNG图像不合法。</p>\n<p>真彩色图像和带alpha通道数据的真彩色图像也可以有调色板数据块，目的是便于非真彩色显示程序用它来量化图像数据，从而显示该图像。</p>\n<h3 id=\"IDAT\"><a href=\"#IDAT\" class=\"headerlink\" title=\"IDAT\"></a><strong>IDAT</strong></h3><p>图像数据块IDAT(image data chunk)：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。</p>\n<p>IDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像。</p>\n<h3 id=\"IEND\"><a href=\"#IEND\" class=\"headerlink\" title=\"IEND\"></a><strong>IEND</strong></h3><p>图像结束数据IEND(image trailer chunk)：它用来标记PNG文件或者数据流已经结束，并且必须要放在文件的尾部。</p>\n<p>如果我们仔细观察PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00 00 00 00 49 45 4E 44 AE 42 60 82</span><br></pre></td></tr></table></figure>\n\n<p>不难明白，由于数据块结构的定义，IEND数据块的长度总是0（00 00 00 00，除非人为加入信息），数据标识总是IEND（49 45 4E 44），因此，CRC码也总是AE 42 60 82。</p>\n<h3 id=\"实例研究PNG\"><a href=\"#实例研究PNG\" class=\"headerlink\" title=\"实例研究PNG\"></a><strong>实例研究PNG</strong></h3><p>以下是由Fireworks生成的一幅图像，图像大小为8*8，</p>\n<p>为了方便观看，将图像放大：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986365-518e1d25-58bf-4a1c-a280-589ed1a67315.png\" alt=\"img\"><br>使用UltraEdit32或者WinHex打开该文件，如下：<br><strong>00000000~00000007：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986393-e7227895-f26c-4acf-9acb-cff0ef35a47e.png\" alt=\"img\"></p>\n<p>可以看到，选中的头8个字节即为PNG文件的标识。</p>\n<p>接下来的地方就是IHDR数据块了：</p>\n<p><strong>00000008~00000020：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986455-35a53acb-f04f-4e31-8f00-f0246b2c2bf3.png\" alt=\"img\"></p>\n<ul>\n<li>00 00 00 0D 说明IHDR头块长为13</li>\n<li>49 48 44 52 IHDR标识</li>\n<li>00 00 00 08 图像的宽，8像素</li>\n<li>00 00 00 08 图像的高，8像素</li>\n<li>04 色深，2^4&#x3D;16，即这是一个16色的图像（也有可能颜色数不超过16，当然，如果颜色数不超过8，用03表示更合适）</li>\n<li>03 颜色类型，索引图像</li>\n<li>00 PNG Spec规定此处总为0（非0值为将来使用更好的压缩方法预留），表示使压缩方法(LZ77派生算法)</li>\n<li>00 同上</li>\n<li>00 非隔行扫描</li>\n<li>36 21 A3 B8 CRC校验</li>\n</ul>\n<p>CRC校验代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.CRC32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CrcTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">         <span class=\"type\">byte</span>[] checkData = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[]&#123;<span class=\"number\">0x49</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x52</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>, <span class=\"number\">0x08</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>, <span class=\"number\">0x08</span>,<span class=\"number\">0x04</span>,<span class=\"number\">0x03</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>&#125;;</span><br><span class=\"line\">         <span class=\"type\">CRC32</span> <span class=\"variable\">crc32</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CRC32</span>();  </span><br><span class=\"line\">         crc32.update(checkData);</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> crc32.getValue();</span><br><span class=\"line\">         </span><br><span class=\"line\">         <span class=\"type\">byte</span>[] intToBytes = longToBytes(value);</span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">bytesToHexString</span> <span class=\"operator\">=</span> bytesToHexString(intToBytes);</span><br><span class=\"line\">         System.out.println(bytesToHexString);</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">byte</span>[] longToBytes(<span class=\"type\">long</span> value)   </span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        <span class=\"type\">byte</span>[] src = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">4</span>];  </span><br><span class=\"line\">        src[<span class=\"number\">0</span>] = (<span class=\"type\">byte</span>) ((value&gt;&gt;<span class=\"number\">24</span>) &amp; <span class=\"number\">0xFF</span>);  </span><br><span class=\"line\">        src[<span class=\"number\">1</span>] = (<span class=\"type\">byte</span>) ((value&gt;&gt;<span class=\"number\">16</span>)&amp; <span class=\"number\">0xFF</span>);  </span><br><span class=\"line\">        src[<span class=\"number\">2</span>] = (<span class=\"type\">byte</span>) ((value&gt;&gt;<span class=\"number\">8</span>)&amp;<span class=\"number\">0xFF</span>);    </span><br><span class=\"line\">        src[<span class=\"number\">3</span>] = (<span class=\"type\">byte</span>) (value &amp; <span class=\"number\">0xFF</span>);       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> src;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">     <span class=\"comment\">//将字节数组按16进制输出</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">bytesToHexString</span><span class=\"params\">(<span class=\"type\">byte</span>[] src)</span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">StringBuilder</span> <span class=\"variable\">stringBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (src == <span class=\"literal\">null</span> || src.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; src.length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">v</span> <span class=\"operator\">=</span> src[i] &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">hv</span> <span class=\"operator\">=</span> Integer.toHexString(v);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stringBuilder.length() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    stringBuilder.append(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hv.length() &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    stringBuilder.append(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                stringBuilder.append(hv);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> stringBuilder.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>宽高爆破脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span>  struct</span><br><span class=\"line\">crcbp = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;x.png&quot;</span>,<span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4000</span>) :</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4000</span>):</span><br><span class=\"line\">        data = crcbp[<span class=\"number\">12</span>:<span class=\"number\">16</span>] + struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>,i) + struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>,j) + crcbp[<span class=\"number\">24</span>:<span class=\"number\">29</span>]</span><br><span class=\"line\">        crc32 = binascii.crc32(data) &amp; <span class=\"number\">0xffffffff</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> crc32 == xxxxxxxxxx : <span class=\"comment\">#根据crc校验修改,记得前面加0x</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(i,j)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hex&quot;</span>,<span class=\"built_in\">hex</span>(i),<span class=\"built_in\">hex</span>(j))</span><br></pre></td></tr></table></figure>\n\n<p><strong>00000021~0000002F：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986685-b3390235-af8d-4ce6-9d71-dd899d927678.png\" alt=\"img\"></p>\n<p>可选数据块sBIT，颜色采样率，RGB都是256（2^8&#x3D;256）</p>\n<p><strong>00000030~00000062：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986805-54b37dce-6de2-498d-85b1-49cd72393d94.png\" alt=\"img\"></p>\n<p>这里是调色板信息</p>\n<ul>\n<li>00 00 00 27 说明调色板数据长为39字节，既13个颜色数</li>\n<li>50 4C 54 45 PLTE标识</li>\n<li>FF FF 00 颜色0</li>\n<li>FF ED 00 颜色1</li>\n<li>…… ……</li>\n<li>09 00 B2 最后一个颜色，12</li>\n<li>5F F5 BB DD CRC校验</li>\n</ul>\n<p><strong>00000063~000000C5：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987130-c9bec3e8-b161-46fd-8bc6-2856afa94e37.png\" alt=\"img\"></p>\n<p>这部分包含了pHYs、tExt两种类型的数据块共3块，由于并不太重要，因此也不再详细描述了。</p>\n<p><strong>000000C0~000000F8：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986860-84b13037-340d-4a68-a2cc-994fcb399fc8.png\" alt=\"img\"></p>\n<p>以上选中部分是IDAT数据块</p>\n<ul>\n<li>00 00 00 27 数据长为39字节</li>\n<li>49 44 41 54 IDAT标识</li>\n<li>78 9C…… 压缩的数据，LZ77派生压缩方法</li>\n<li>DA 12 06 A5 CRC校验</li>\n</ul>\n<p>IDAT中压缩数据部分在后面会有详细的介绍。</p>\n<p><strong>000000F9~00000104：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383986991-c41e725b-0696-4a3a-bafe-01a5b066ec38.png\" alt=\"img\"></p>\n<p>IEND数据块，这部分正如上所说，通常都应该是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00 00 00 00 49 45 4E 44 AE 42 60 82</span><br></pre></td></tr></table></figure>\n\n<p>至此，我们已经能够从一个PNG文件中识别出各个数据块了。由于PNG中规定除关键数据块外，其它的辅助数据块都为可选部分，因此，有了这个标准后，我们可以通过删除所有的辅助数据块来减少PNG文件的大小。（当然，需要注意的是，PNG格式可以保存图像中的层、文字等信息，一旦删除了这些辅助数据块后，图像将失去原来的可编辑性。）<img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987262-df0033af-1e59-4845-9e98-d1dd43a20e3e.png\" alt=\"img\"></p>\n<p>删除了辅助数据块后的PNG文件，现在文件大小为147字节，原文件大小为261字节，文件大小减少后，并不影响图像的内容。参考：<a href=\"http://blog.csdn.net/flyingghost/article/details/251110\">打造自由换色的png图片类</a>。</p>\n<ul>\n<li>如上说过，IDAT数据块是使用了LZ77压缩算法生成的，由于受限于手机处理器的能力，因此，如果我们在生成IDAT数据块时仍然使用LZ77压缩算法，将会使效率大打折扣，因此，为了效率，只能使用无压缩的LZ77算法，关于LZ77算法的具体实现，此文不打算深究，如果你对LZ77算法的JAVA实现有兴趣，可以参考以下两个站点：</li>\n<li><a href=\"http://jazzlib.sourceforge.net/\">http://jazzlib.sourceforge.net/</a></li>\n<li><a href=\"http://www.jcraft.com/jzlib/index.html\">http://www.jcraft.com/jzlib/index.html</a></li>\n</ul>\n<h2 id=\"四-PNG文件结构分析-下：在手机上生成PNG文件\"><a href=\"#四-PNG文件结构分析-下：在手机上生成PNG文件\" class=\"headerlink\" title=\"四.PNG文件结构分析(下：在手机上生成PNG文件)\"></a><strong>四.PNG文件结构分析(下：在手机上生成PNG文件)</strong></h2><p>上面我们已经对PNG的存储格式有了了解，因此，生成PNG图片只需要按照以上的数据块写入文件即可。</p>\n<p>(由于IHDR、PLTE的结构都非常简单，因此，这里我们只是重点讲一讲IDAT的生成方法，IHDR和PLTE的数据内容都沿用以上的数据内容)</p>\n<p>问题确实是这样的，我们知道，对于大多数的图形文件来说，我们都可以将实际的图像内容映射为一个二维的颜色数组，对于上面的PNG文件，由于它用的是16色的调色板（实际是13色），因此，对于图片的映射可以如下：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987297-250cef08-49a0-441b-83b2-a119a8332f75.png\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>12</th>\n<th>11</th>\n<th>10</th>\n<th>9</th>\n<th>8</th>\n<th>7</th>\n<th>6</th>\n<th>5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>11</td>\n<td>10</td>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n</tr>\n<tr>\n<td>10</td>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n</tr>\n<tr>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n</tr>\n<tr>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>PNG Spec中指出，如果PNG文件不是采用隔行扫描方法存储的话，那么，数据是按照行(ScanLine)来存储的，为了区分第一行，PNG规定在每一行的前面加上0以示区分，因此，上面的图像映射应该如下：</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>12</th>\n<th>11</th>\n<th>10</th>\n<th>9</th>\n<th>8</th>\n<th>7</th>\n<th>6</th>\n<th>5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>11</td>\n<td>10</td>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n</tr>\n<tr>\n<td>0</td>\n<td>10</td>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n</tr>\n<tr>\n<td>0</td>\n<td>9</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n</tr>\n<tr>\n<td>0</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>7</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>6</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>5</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>另外，需要注意的是，由于PNG在存储图像时为了节省空间，因此每一行是按照位(Bit)来存储的，而并不是我们想象的字节（Byte），如果你没有忘记的话，我们的IHDR数据块中的色深就指明了这一点，所以，为了凑成PNG所需要的IDAT，我们的数据得改成如下：</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>203</th>\n<th>169</th>\n<th>135</th>\n<th>101</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>186</td>\n<td>152</td>\n<td>118</td>\n<td>84</td>\n</tr>\n<tr>\n<td>0</td>\n<td>169</td>\n<td>135</td>\n<td>101</td>\n<td>67</td>\n</tr>\n<tr>\n<td>0</td>\n<td>152</td>\n<td>118</td>\n<td>84</td>\n<td>50</td>\n</tr>\n<tr>\n<td>0</td>\n<td>135</td>\n<td>101</td>\n<td>67</td>\n<td>33</td>\n</tr>\n<tr>\n<td>0</td>\n<td>118</td>\n<td>84</td>\n<td>50</td>\n<td>16</td>\n</tr>\n<tr>\n<td>0</td>\n<td>101</td>\n<td>67</td>\n<td>33</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>84</td>\n<td>50</td>\n<td>16</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>最后，我们对这些数据进行LZ77压缩就可以得到IDAT的正确内容了。</p>\n<p>然而，事情并不是这么简单，因为我们研究的是手机上的PNG，如果需要在手机上完成LZ77压缩工作，消耗的时间是可想而知的，因此，我们得再想办法加减少压缩时消耗的时间。</p>\n<p>好在LZ77也提供了无压缩的压缩方法（奇怪吧？），因此，我们只需要简单的使用无压缩的方式写入数据就可以了，这样虽然浪费了空间，却换回了时间！</p>\n<p>好了，让我们看一看怎么样凑成无压缩的LZ77压缩块：</p>\n<table>\n<thead>\n<tr>\n<th><strong>字节</strong></th>\n<th><strong>意义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0~2</td>\n<td>压缩信息，固定为0x78, 0xda, 0x1</td>\n</tr>\n<tr>\n<td>3~6</td>\n<td>压缩块的LEN和NLEN信息</td>\n</tr>\n<tr>\n<td>压缩的数据</td>\n<td></td>\n</tr>\n<tr>\n<td>最后4字节</td>\n<td>Adler32信息</td>\n</tr>\n</tbody></table>\n<p>其中的LEN是指数据的长度，占用两个字节，对于我们的图像来说，第一个Scan Line包含了5个字节（如第一行的0, 203, 169, 135, 101），所以LEN的值为5（字节&#x2F;行） * 8（行） &#x3D; 40（字节），生成字节为28 00（低字节在前），NLEN是LEN的补码，即NLEN &#x3D; LEN ^ 0xFFFF，所以NLEN的为 D7 FF，Adler32信息为24 A7 0B A4（具体算法见源程序），因此，按照这样的顺序，我们生成IDAT数据块，最后，我们将IHDR、PLTE、IDAT和IEND数据块写入文件中，就可以得到PNG文件了，如图：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698383987461-9585881e-b71b-4046-8d19-4db3c9d10125.png\" alt=\"img\"></p>\n<p>（选中的部分为生成的“压缩”数据）</p>\n<p>至此，我们已经能够采用最快的时间将数组转换为PNG图片了。</p>\n"},{"_content":"# **CTFSHOW_Misc_WP**\n\n一个初学CTF的萌新笔记qwq\n\n\n\n## 图片篇(基础操作)\n\n### Misc1\n\n很简单的入门题，教你怎么交flag的\n\n### Misc2\n\n解压压缩包得到txt文件，打开后显示乱码，使用010打开文件\n\n发现文件头为PNG，更改扩展名-  \n\n得到flag\n\n### Misc3\n\n解压文件，发现文件拓展名为bpg，查询到BPG容器格式是一种通用图像格式，下载Honeyview进行查看得到flag\n\n#### Honeyview\n\n是我个人特别喜欢用的一款图片查看器，文件出现改动的时候可以实时变化，并且宽容性极强，没看见过他打不开的图片\n\n### Misc4\n\n解压文件发现6个txt，打开后发现ASCII乱码，直接更改为类图片的后缀名使用honeyview打开发现flag，直接按照顺序进行排序\n\n## 图片篇(信息附加)\n\n### Misc5\n\n#### 十六进制编辑器的搜索功能\n\n解压压缩包，打开文件，png直接显示noflag，使用010打开，在16进制尾端发现真flag\n\n### Misc6\n\n打开jpg，发现伪flag，使用010打开，寻找关键字找到flag\n\n### Misc7\n\n好的打开图片之后还是同样的伪flag，不管了直接上010，相同的搜索关键字懒得写了\n\n### Misc8\n\n解压、伪代码、010、搜索...没出来\n\n换一种思路，打开kali，打开shell，使用binwalk分析，发现zlib与png，使用foremost进行分离可见真flag\n\n#### kali\n\n很经典的Linux，对网安方面有极大作用（建议每个网安人都配一个（？\n\n#### Binwalk\n\nlinux中一个特别好用的文件解析器，kali中自带，可以清晰的看到图片中是否含有隐藏数据，同时也支持分离文件\n\n```\nbinwalk -e file --run-as=root\n```\n\n#### Foremost\n\nlinux中的文件分离器，我一般是在binwalk没法用或者没解析出来的时候才会用，算是一个备用选项吧\n\n`foremost file`\nforemost不指定路径的话会自动在当前文件下的目录中新建一个output文件夹\n\n### Misc9\n\n010查找\n\n### Misc10\n\n同样的伪flag，拖入010没发现异常，进入kali中使用binwalk分析图片发现zlib，使用binwalk进行分离发现flag\n\n### Misc11\n\n拖入010，发现可能存在其他文件，进入kali进行binwalk发现两个zlib文件，则说明此图片有隐藏文件，使用foremost与binwalk均没有解析出内容，使用tweakpng排查发现含有2个IDAT块，删除第一个IDAT块发现flag\n\n#### Tweakpng\n\nTweakpng是一款简单易用的png图像浏览工具，它允许查看和修改一些png图像文件的元信息存储，这道题里可以用它来删除IDAT块\n\n### Misc12\n\n进tweak特么有一群IDAT啊啊啊啊啊啊啊啊\n\n绷不住了一个一个删吧（\n\n删了一堆之后找到flag了\n\n### Misc13\n\n打开文件发现两个IDAT块，但是删除后没有东西，根据题目提示打开010，发现有四段疑似flag的，根据规律隔位删除可得到四个flag，挨个试可以看到第三段flag为真\n\n吗的做完这道题我的眼睛就要瞎了（（（\n\n### Misc14\n\nbinwalk直接出\n\n### Misc15\n\nCrtl+F，请\n\n### Misc16\n\nbinwalk直接出\n\n### Misc17\n\n使用tweakpng将IDAT块合并，然后binwalk分离得到flag图片\n\n### Misc18\n\n题目提示“**flag在标题、作者、照相机和镜头型号里。”**\n\n有够明显的\n\n\n\n#### Magicexif\n\n一个很好用的exif文件查看器，可以分析元数据并且很直观的显示出来，还可以进行图片修复，查看图片是否被修改等操作\n\n\n\n### Misc19\n\n拖到exif查看器里就行\n\n### Misc20\n\n#### 我真想锤烂这个出题人的头\n\n拖到exif查看器里\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698369547873-fb5cad8a-4479-438b-8f38-8e307fcf1ba0.png)\n\n牛逼\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698369571171-2c62aba0-003c-4edb-abc9-066dd30e76af.png)ctfshow{c97964b1aecf06e1d79c21ddad593e42}\n\n### Misc21\n\n上难度了奥\n\n根据题目可知，flag藏在图片序号中，使用exif查看器\n\n```plain\nExif Byte Order : Big-endian (Motorola, MM)\nX Resolution : 3902939465\nY Resolution : 2371618619\nPage Name : https://ctf.show/\nX Position : 1082452817\nY Position : 2980145261\nTarget Printer : ctfshow{}\nSerial Number : 686578285826597329\n```\n\n\n\nserial number后面有一串数字很可疑，将此转换成ASCII码值，得到这个（hex(X&Ys)）。\n\n根据这个提示我们需要依次提取X、Y值（3902939465、2371618619、1082452817、2980145261），可以看出这四串数字都是十进制数，再将这些数字依次转换成十六进制数，然后我们依次拼接也就是\n\n```\nctfshow{e8a221498d5c073b4084eb51b1a1686d}\n```\n\n### Misc22\n\n这道题下载好了之后会看到缩略图里面有一串黄色的东西，但是打开之后又不见了\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377588571-528ab143-9d86-4ade-b8fb-5aad74137e5d.png)（缩略图）\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377675329-2a02bbcc-323a-4402-bbe1-6f9dda83a55a.png)（本体）\n\n盲猜那串黄色的东西是flag\n\n#### 解法一（常规解法）\n\nJPG文件的文件头为FFD8，在010中发现图片有两个FF08\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377848307-5c19cd8a-9bc9-4646-890b-0912f1e02283.png)\n\n直接用010分离图片就可以解出（但是我还不会分离所以这种方法没有进行实操）\n\n#### 解法二（取巧解法）\n\n既然缩略图里面有flag，那么直接想办法看缩略图不就可以了嘛，打开Magicexif\n\n##### ![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698378733495-cfe5b7a5-86da-42da-9b7b-748447d55340.png)\n\n直接查看缩略图就好了qwq\n\n### Misc23\n\n是一个psd文件，用photoshop打开，查看文件简介，原始数据中可以看到以下时间戳\n\n```plain\n1997-09-22 02:17:02\n2055-07-15 12:14:48\n2038-05-05 16:50:45\n1984-08-03 18:41:46\n```\n\n（也可以用Linux里的exiftool解析）\n\n转为16进制\n\n```plain\nprint(hex(874865822)\n[2:]+hex(2699237688)\n[2:]+hex(2156662245)\n[2:]+hex(460377706)[2:]) \nctfshow{3425649ea0e31938808c0de51b70ce6a}\n```\n\n### Misc41\n\n题目描述\n\n```plain\n（本题为Misc入门图片篇和愚人节比赛特别联动题）\nH4ppy Apr1l F001's D4y！\n愚人节到了，一群笨蛋往南飞，一会儿排成S字，一会儿排成B字。\n```\n\n这道题出题人脑洞真大...\n\n文件打不开，进入010，把头文件补充之后还是打不开，src也过不去，我愣是啥都没看出来\n\n回头看题目描述\n\n```\nH4ppy Apr1l F001's D4y!\n```\n\n看F001像不像16进制数\n\n在010搜索一下\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698379300013-8d6615bc-d257-4afd-afb8-c68a3113081e.png)\n\n好抽象阿...\n\n可能到这里还没看出来，我画两条线你再看看\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698379357508-75680516-ba08-4979-bba1-65f86c1eaa7e.png)\n\n...好出题人你清高\n\n```\nctfshow{fcbd427caf4a52f1147ab44346cd1cdd}\n```\n\n\n\n## 图片篇(文件结构)\n\n### Misc24\n\n可以看到目前像素是900 x 153=137700，而**文件头**占了53字节，**文件结尾**在675053字节处。又因为每个像素点由三个字节表示，每个字节控制一种颜色，分别为**红、绿、蓝**三种颜色。所以文件真实像素大小为(675053-53)/3=225000。根据提示本题的宽度是没问题的，所以只需要修改高度即可。高度=225000/900=250\n\n\n### Misc25\n\n题目提示：\n\n```\n**flag在图片上面**\n```\n\n根据提示来看数据可能被隐写到了没显示到的区域，将png拖入tweakpng中提示crc校验出错\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464074225-678ffa4a-2016-4e79-98dd-3f535be69f11.png)\n\n可以判断图片二进制可能被修改了分辨率或者crc\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464544410-5b177e98-2a2c-4f59-bf50-deb0b2fd41a5.png)\n\n使用以下crc爆破脚本\n\n```python\nimport os\nimport binascii\nimport  struct\ncrcbp = open(\"x.png\",'rb').read()\nfor i in range(4000) :\n    for j in range(4000):\n        data = crcbp[12:16] + struct.pack('>i',i) + struct.pack('>i',j) + crcbp[24:29]\n        crc32 = binascii.crc32(data) & 0xffffffff\n        if crc32 == xxxxxxxxxx : #根据crc校验修改,记得前面加0x\n            print(i,j)\n            print(\"hex\",hex(i),hex(j))\n```\n\n计算`09 DA D1 61`时与原分辨率相同\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464528148-44cd94cb-6364-4aa5-afab-b7f766cdea85.png)\n\n计算`76 EC 1E 40`时发现分辨率变成了900*250，相对应的HEX值为`0x384 0xfa`\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464749914-34739636-ce06-4d64-a0fc-76158a694ea2.png)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464778382-5f720053-a586-4736-a865-1cfc63eddd73.png)'\n\n成功获得flag\n\n### Misc26\n\n使用tweakpng发现crc校验出错，使用相同方法求解\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698467483175-d0fd0279-f758-4a5a-90cb-a6e24f98a05f.png)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698478275381-b8b1c4c8-284a-4ee6-9a3c-4de99682f542.png)\n\n### Misc27\n\n根据题目提示可知不出意外会与上一道题的思路差不太多，所以想办法更改文件的高度\n\nFFC0表示JPEG文件正式进入帧块，所以找到FFC0，后面的两个字节表示帧长度，再后面一个表示精度，之后四个字节分别表示宽度和高度，修改高度即可\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698480396215-bd9767f6-0c68-4f49-bee6-289a11c11737.png)\n\n### Misc28\n\n根据题目提示“**flag在图片下面**”可知这道题还是图片宽高隐写题，想办法更改文件的宽高即可\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698650883049-6f45a71f-9a45-4f5d-8640-162c858b6f04.png)\n\n### Misc29\n\n将gif文件拖入分帧器中可以发现共有八帧图片，进去010可以明显地看出来每张图片的分段。原图长宽为900*150，题目提示flag在图片下面，查找宽度150对应的16进制值（03 96）并且全部替换为03 FF再分帧可以看到从第四帧开始出现flag\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768482136-388100db-b0b2-426d-913a-645355e8f014.png)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768529199-60d9ce16-cab5-4b08-ab63-124ad2c80ad1.png)![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768537846-c53dd11c-a5d4-4398-9cc9-d0ca18ff8cd2.png)\n\n### Misc30\n\n解压后得到bmp文件，根据题目提示可知图片正确的宽度为950，看到图片属性中宽度为900，进入010查找900对应的16进制值（03 84），但是直接查找没有发现宽度，查看文件头部发现有一串十六进制值为84 03，可能这串数字就代表的是文件的宽度，查找950对应的十六进制值为03 B6，于是将84替换为B6，发现图片出现flag。后期查找资料得知bmp文件大多数都是倒向的位图，因此要倒着写。\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698769334102-8619b230-c59f-4ccb-a080-22ef04dee65a.png)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698769396309-69ea31f2-7d0d-4a06-972a-b0d4f548129a.png)\n\n### Misc31\n\n同样的宽度设置不正确导致bmp文件失真修复题\n\n目前图片是 900*150=135000个像素大小。\n**每个像素点由3个字节（十六进制码6位）表示**，**每个字节负责控制一种颜色**，分别为蓝（Blue）、绿（Green）、红（Red），用010打开发现看到共有 487253 个字节，文件头占 53个字节\n\n则正确的宽度应为 **（487253-53） / 3 / 150 = 1082 =0x43a**（结果取整）\n\n将84 03更改为 3A 04即可\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698770218499-96b2706d-8222-42c0-8a6c-c473f85ca011.png)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698770205303-496fda13-f4dc-45db-bc4d-3519710820ea.png)\n\n### Misc32\n\n简单的png爆破宽高题，直接上脚本爆破即可\n\n### Misc33\n\n不要管是宽改了还是高改了，只要crc没有改就直接可以上脚本爆破\n\n### Misc34\n\n这道题的crc校验也被更改了，但是题目限定范围宽度一定是大于900的，那么就使用脚本将宽度从901开始挨个更改（我限定的范围是1200）\n\n```python\n# 导入所需的模块\nimport os\nimport zlib\nimport struct\n\n# 定义源文件名和输出目录名\nfilename = \"misc34.png\"\noutput_dir = \"output\"\n\n# 如果输出目录不存在，则创建它\nos.makedirs(output_dir, exist_ok=True)\n\n# 以二进制模式打开源文件\nwith open(filename, 'rb') as f:\n    # 读取源文件的全部内容\n    all_b = f.read()\n    \n    # 对于每个在901到1200范围内的整数i\n    for i in range(901,1200):\n        # 创建新文件名，包括输出目录和文件名\n        name = os.path.join(output_dir, str(i) + \".png\")\n        \n        # 以二进制写入模式打开新文件\n        with open(name,\"wb\") as f1:\n            # 创建新的图片数据，其中包含修改后的宽度信息\n            im = all_b[:16]+struct.pack('>i',i)+all_b[20:]\n            \n            # 将新的图片数据写入到新文件中\n            f1.write(im)\n```\n\n在output文件夹中就可以看到正确的flag在哪里\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698824027008-3c5c7742-d059-474d-adc1-af0e9c76d009.png)\n\n发现文件无法直接打开，于是用tweakpng检查文件的crc并且将原来文件中错误的crc替换为正确的crc即可\n\n### Misc35\n\n相同的思路，但是文件格式变成了jpg，但是文件本体没有看到任何信息，尝试修改一下高度发现类似flag的图片\n\n​\t![misc35.jpg](https://cdn.nlark.com/yuque/0/2023/jpeg/39298680/1698915256041-e775d328-bf6e-4888-adc9-bbd53f8bee46.jpeg)\n\n那么稍微改动一下上面的脚本\n\n```python\nimport os\nimport struct\n\n# 设置输出目录\noutput_dir = \"output\"\n\n# 如果输出目录不存在，则创建它\nos.makedirs(output_dir, exist_ok=True)\n\n# 设置要读取的文件名\nfilename = \"misc35.jpg\"\n\n# 以二进制模式打开文件\nwith open(filename, 'rb') as f:\n    # 读取所有的字节\n    all_b = f.read()\n\n    # 遍历901到1200的范围\n    for i in range(901, 1200):\n        # 创建新的文件名，包含输出目录和当前迭代的数字，扩展名为.jpg\n        name = os.path.join(output_dir, str(i) + \".jpg\")\n        \n        # 以二进制写入模式打开新文件\n        f1 = open(name, \"wb\")\n        \n        # 创建新的图像数据，将原始数据的前159个字节与当前迭代数字打包成大端字节序的二进制数据，然后再加上原始数据的第161个字节及以后的所有字节\n        im = all_b[:159] + struct.pack('>h', i) + all_b[161:]\n        \n        # 将新的图像数据写入新文件\n        f1.write(im)\n        \n        # 关闭新文件\n        f1.close()\n\n```\n\n当宽度变成993的时候flag出现\n\n### Misc36\n\n先将图片调整到能看到gif下面隐写的类flag字样，然后将宽度在920到950之间进行爆破即可得出答案\n\n### Misc37\n\n分帧\n\n### Misc38\n\n分帧*\n\n### Misc39\n\n题目描述：\n\n**flag就像水，忽快忽慢地流**\n\n说明gif文件的帧速率不同，flag可能就在帧速率当中*（尝试帧间隔隐写）*\n\n那么接下来需要一个新工具\n\n#### **imagemagick**\n\n`sudo apt-get install imagemagick`\n\n随后执行\n\n`identify -format \"%T \" misc39.gif > 1.txt`\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990042594-cd1b51bd-abdd-4f0c-bf43-358a39d2f1ba.png)\n\n发现只有37 36两个数字，尝试转换为二进制\n\n由于flag的格式一般都是41字节数据，于是将转化得出的的二进制转换成最后为41字节的字符串即可\n\n情况一：36=0 37=1\n\n```\n11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101\n```\n\n\n\n```python\ns=\"11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101\"\nflag=\"\"\nfor i in range(41):\n    flag += chr(int(s[7*i:7*(i+1)],2))\nprint(flag)\n\n```\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990613694-147d04c7-19f5-4035-aa38-4e9bbf4d0766.png)\n\n情况二：36=1 37=0\n\n```\n00111000001011001100100011000010111001000000010000000100100101010011011000111100111010011010011001001100110001101000110100101000110010011101100100000111010011010100110110010011000111001101110001101001001100110000111101000110001101000111010011100001111010011111001011100101010001100000010\n```\n\n\n\n```python\ns=\"00111000001011001100100011000010111001000000010000000100100101010011011000111100111010011010011001001100110001101000110100101000110010011101100100000111010011010100110110010011000111001101110001101001001100110000111101000110001101000111010011100001111010011111001011100101010001100000010\"\nflag=\"\"\nfor i in range(41):\n    flag += chr(int(s[7*i:7*(i+1)],2))\nprint(flag)\n\n```\n\n\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990474263-44babec0-e8d9-46c0-9424-69c353b03447.png)\n\n炸了捏\n\n### Misc40\n\n先来说一下这个png为什么会动\n\n##### Apng\n\nAPNG 是 PNG 格式的一种扩展，可以支持动图。APNG 是普通 png 图片的升级版，它的后缀依然是.png，包含动态的情况下体积会比普通静态 png 打出数倍，可以做到无损的情况展示动态。APNG 是向下兼容的，扩展名也是.png ，不支持 APNG 的解码器会表现为 PNG 的形式，即显示 APNG 的第一帧图片。\n\n之前的Misc38我误以为是因为hoenyview的宽容性所以才能直接以动图的形式打开其实并不是，只是采用了APNG的格式而已\n\n那么再来介绍一个分解APNG的工具\n\n#### [APNG Disassembler](http://sourceforge.net/projects/apngdis/files/latest/download)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698992703461-46cd35b2-be87-433b-bc49-10356d45636b.png)\n\n这款工具在分离apng的同时也会输出每张图片的delay\n\n然后这个delay文件就是这道题的关键，可以进行十进制转ascii从而得到flag（别问我是怎么知道的我在这里卡了大半天挨个试的）\n\n写个脚本来提取每个文件中的delay然后直接转换为ascii即可得到flag\n\n```python\nflag=\"\"\nfor i in range(1,69):\n    f = open(\"apngframe\" + str(i) + \".txt\")\n    s = f.read()\n    flag += chr(int(s.split(\"/\")[0][6:]))\nprint(flag)\n```\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698992860154-6d1375cf-48ae-4943-aecc-8c15c02fadb8.png)\n\n### Misc42\n\n使用010打开文件，发现有许多的IDAT块，放入tweakpng进行解析，发现IDAT块的个数与flag的格式长度相似，于是使用脚本检索所有idat块的字节数并将每一个块的字节数转换为ascii码\n\n```python\n# 导入binascii模块，用于处理二进制和ascii数据\nimport binascii\n\n\n# 定义一个函数，用于从png文件中提取idat块的字节数\ndef get_idat_bytes(png_file):\n    # 以二进制模式打开png文件\n    with open(png_file, \"rb\") as f:\n        # 读取文件内容\n        data = f.read()\n        # 将二进制数据转换为十六进制字符串\n        hex_data = binascii.hexlify(data).decode()\n        # 定义一个空列表，用于存储idat块的字节数\n        idat_bytes = []\n        # 定义一个变量，用于记录当前的位置\n        pos = 0\n        # 循环遍历十六进制字符串，直到找到所有的idat块\n        while True:\n            # 查找idat块的标识符，即49444154\n            idat_pos = hex_data.find(\"49444154\", pos)\n            # 如果没有找到，说明已经到达文件的末尾，退出循环\n            if idat_pos == -1:\n                break\n            # 如果找到了，计算idat块的起始位置，即标识符前面的四个字节，表示块的长度\n            start_pos = idat_pos - 8\n            # 计算idat块的结束位置，即标识符后面的四个字节，表示块的校验和\n            end_pos = idat_pos + 12\n            # 截取idat块的十六进制字符串\n            idat_hex = hex_data[start_pos:end_pos]\n            # 将idat块的十六进制字符串转换为二进制数据\n            idat_data = binascii.unhexlify(idat_hex)\n            # 获取idat块的长度，即前四个字节\n            idat_length = idat_data[:4]\n            # 将idat块的长度添加到列表中\n            idat_bytes.append(idat_length)\n            # 更新当前的位置，继续查找下一个idat块\n            pos = end_pos\n        # 返回idat块的字节数列表\n        return idat_bytes\n\n\n# 定义一个函数，用于将字节数转换为ascii码\ndef bytes_to_ascii(bytes_list):\n    # 定义一个空字符串，用于存储ascii码\n    ascii_str = \"\"\n    # 循环遍历字节数列表\n    for b in bytes_list:\n        # 将每个字节转换为十进制整数\n        n = int.from_bytes(b, \"big\")\n        # 将每个整数转换为ascii字符\n        c = chr(n)\n        # 将每个字符拼接到字符串中\n        ascii_str += c\n    # 返回ascii码字符串\n    return ascii_str\n\n\n# 定义一个png文件的路径，你可以根据你的实际情况修改\npng_file = \"misc42.png\"\n# 调用get_idat_bytes函数，从png文件中提取idat块的字节数\nidat_bytes = get_idat_bytes(png_file)\n# 打印idat块的字节数\nprint(\"The bytes of IDAT chunks are:\")\nfor b in idat_bytes:\n    print(b)\n# 调用bytes_to_ascii函数，将idat块的字节数转换为ascii码\nascii_str = bytes_to_ascii(idat_bytes)\n# 打印ascii码\nprint(\"The ASCII code of IDAT chunks is:\")\nprint(ascii_str)\n\n```\n\n### Misc43\n\n题目描述：`错误中隐藏着通往正确答案的道路`\n\n使用010打开文件，发现有很多IDAT块，然后使用tweakpng打开文件，发现很多的crc都出错了，对应题目描述`错误中隐藏着通往正确答案的道路`，尝试将所有出错的crc校验码提取出来发现可能对应ascii码，于是使用脚本\n\n```python\nimport binascii\nimport struct\n\n\ndef calculate_crc(chunk_type, data):\n    return binascii.crc32(chunk_type + data) & 0xffffffff\n\n\ndef get_chunks(png_file):\n    png_file.seek(8)  # Skip the PNG signature\n\n    while True:\n        chunk_length = struct.unpack('!I', png_file.read(4))[0]\n        chunk_type = png_file.read(4)\n        data = png_file.read(chunk_length)\n        crc = struct.unpack('!I', png_file.read(4))[0]\n\n        yield chunk_type, data, crc\n\n        if chunk_type == b'IEND':\n            break\n\n\ndef check_crc(png_file):\n    incorrect_crcs = []\n\n    for chunk_type, data, crc in get_chunks(png_file):\n        calculated_crc = calculate_crc(chunk_type, data)\n\n        if calculated_crc != crc and chunk_type == b'IDAT':\n            incorrect_crcs.append(hex(crc)[2:])  # Convert to hex and remove \"0x\"\n\n    return incorrect_crcs\n\n\ndef crc_to_ascii(crc_values):\n    ascii_values = []\n\n    for crc in crc_values:\n        # Start from the third character, and take every two characters as a hex number\n        for i in range(0, len(crc), 2):\n            hex_value = crc[i:i + 2]\n            ascii_values.append(chr(int(hex_value, 16)))\n\n    return ''.join(ascii_values)\n\n\nwith open('misc43.png', 'rb') as f:\n    incorrect_crcs = check_crc(f)\n    ascii_values = crc_to_ascii(incorrect_crcs)\n\nprint(ascii_values)\n\n```\n\n得到flag\n","source":"_posts/CTFSHOW_Misc_WP.md","raw":"# **CTFSHOW_Misc_WP**\n\n一个初学CTF的萌新笔记qwq\n\n\n\n## 图片篇(基础操作)\n\n### Misc1\n\n很简单的入门题，教你怎么交flag的\n\n### Misc2\n\n解压压缩包得到txt文件，打开后显示乱码，使用010打开文件\n\n发现文件头为PNG，更改扩展名-  \n\n得到flag\n\n### Misc3\n\n解压文件，发现文件拓展名为bpg，查询到BPG容器格式是一种通用图像格式，下载Honeyview进行查看得到flag\n\n#### Honeyview\n\n是我个人特别喜欢用的一款图片查看器，文件出现改动的时候可以实时变化，并且宽容性极强，没看见过他打不开的图片\n\n### Misc4\n\n解压文件发现6个txt，打开后发现ASCII乱码，直接更改为类图片的后缀名使用honeyview打开发现flag，直接按照顺序进行排序\n\n## 图片篇(信息附加)\n\n### Misc5\n\n#### 十六进制编辑器的搜索功能\n\n解压压缩包，打开文件，png直接显示noflag，使用010打开，在16进制尾端发现真flag\n\n### Misc6\n\n打开jpg，发现伪flag，使用010打开，寻找关键字找到flag\n\n### Misc7\n\n好的打开图片之后还是同样的伪flag，不管了直接上010，相同的搜索关键字懒得写了\n\n### Misc8\n\n解压、伪代码、010、搜索...没出来\n\n换一种思路，打开kali，打开shell，使用binwalk分析，发现zlib与png，使用foremost进行分离可见真flag\n\n#### kali\n\n很经典的Linux，对网安方面有极大作用（建议每个网安人都配一个（？\n\n#### Binwalk\n\nlinux中一个特别好用的文件解析器，kali中自带，可以清晰的看到图片中是否含有隐藏数据，同时也支持分离文件\n\n```\nbinwalk -e file --run-as=root\n```\n\n#### Foremost\n\nlinux中的文件分离器，我一般是在binwalk没法用或者没解析出来的时候才会用，算是一个备用选项吧\n\n`foremost file`\nforemost不指定路径的话会自动在当前文件下的目录中新建一个output文件夹\n\n### Misc9\n\n010查找\n\n### Misc10\n\n同样的伪flag，拖入010没发现异常，进入kali中使用binwalk分析图片发现zlib，使用binwalk进行分离发现flag\n\n### Misc11\n\n拖入010，发现可能存在其他文件，进入kali进行binwalk发现两个zlib文件，则说明此图片有隐藏文件，使用foremost与binwalk均没有解析出内容，使用tweakpng排查发现含有2个IDAT块，删除第一个IDAT块发现flag\n\n#### Tweakpng\n\nTweakpng是一款简单易用的png图像浏览工具，它允许查看和修改一些png图像文件的元信息存储，这道题里可以用它来删除IDAT块\n\n### Misc12\n\n进tweak特么有一群IDAT啊啊啊啊啊啊啊啊\n\n绷不住了一个一个删吧（\n\n删了一堆之后找到flag了\n\n### Misc13\n\n打开文件发现两个IDAT块，但是删除后没有东西，根据题目提示打开010，发现有四段疑似flag的，根据规律隔位删除可得到四个flag，挨个试可以看到第三段flag为真\n\n吗的做完这道题我的眼睛就要瞎了（（（\n\n### Misc14\n\nbinwalk直接出\n\n### Misc15\n\nCrtl+F，请\n\n### Misc16\n\nbinwalk直接出\n\n### Misc17\n\n使用tweakpng将IDAT块合并，然后binwalk分离得到flag图片\n\n### Misc18\n\n题目提示“**flag在标题、作者、照相机和镜头型号里。”**\n\n有够明显的\n\n\n\n#### Magicexif\n\n一个很好用的exif文件查看器，可以分析元数据并且很直观的显示出来，还可以进行图片修复，查看图片是否被修改等操作\n\n\n\n### Misc19\n\n拖到exif查看器里就行\n\n### Misc20\n\n#### 我真想锤烂这个出题人的头\n\n拖到exif查看器里\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698369547873-fb5cad8a-4479-438b-8f38-8e307fcf1ba0.png)\n\n牛逼\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698369571171-2c62aba0-003c-4edb-abc9-066dd30e76af.png)ctfshow{c97964b1aecf06e1d79c21ddad593e42}\n\n### Misc21\n\n上难度了奥\n\n根据题目可知，flag藏在图片序号中，使用exif查看器\n\n```plain\nExif Byte Order : Big-endian (Motorola, MM)\nX Resolution : 3902939465\nY Resolution : 2371618619\nPage Name : https://ctf.show/\nX Position : 1082452817\nY Position : 2980145261\nTarget Printer : ctfshow{}\nSerial Number : 686578285826597329\n```\n\n\n\nserial number后面有一串数字很可疑，将此转换成ASCII码值，得到这个（hex(X&Ys)）。\n\n根据这个提示我们需要依次提取X、Y值（3902939465、2371618619、1082452817、2980145261），可以看出这四串数字都是十进制数，再将这些数字依次转换成十六进制数，然后我们依次拼接也就是\n\n```\nctfshow{e8a221498d5c073b4084eb51b1a1686d}\n```\n\n### Misc22\n\n这道题下载好了之后会看到缩略图里面有一串黄色的东西，但是打开之后又不见了\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377588571-528ab143-9d86-4ade-b8fb-5aad74137e5d.png)（缩略图）\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377675329-2a02bbcc-323a-4402-bbe1-6f9dda83a55a.png)（本体）\n\n盲猜那串黄色的东西是flag\n\n#### 解法一（常规解法）\n\nJPG文件的文件头为FFD8，在010中发现图片有两个FF08\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377848307-5c19cd8a-9bc9-4646-890b-0912f1e02283.png)\n\n直接用010分离图片就可以解出（但是我还不会分离所以这种方法没有进行实操）\n\n#### 解法二（取巧解法）\n\n既然缩略图里面有flag，那么直接想办法看缩略图不就可以了嘛，打开Magicexif\n\n##### ![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698378733495-cfe5b7a5-86da-42da-9b7b-748447d55340.png)\n\n直接查看缩略图就好了qwq\n\n### Misc23\n\n是一个psd文件，用photoshop打开，查看文件简介，原始数据中可以看到以下时间戳\n\n```plain\n1997-09-22 02:17:02\n2055-07-15 12:14:48\n2038-05-05 16:50:45\n1984-08-03 18:41:46\n```\n\n（也可以用Linux里的exiftool解析）\n\n转为16进制\n\n```plain\nprint(hex(874865822)\n[2:]+hex(2699237688)\n[2:]+hex(2156662245)\n[2:]+hex(460377706)[2:]) \nctfshow{3425649ea0e31938808c0de51b70ce6a}\n```\n\n### Misc41\n\n题目描述\n\n```plain\n（本题为Misc入门图片篇和愚人节比赛特别联动题）\nH4ppy Apr1l F001's D4y！\n愚人节到了，一群笨蛋往南飞，一会儿排成S字，一会儿排成B字。\n```\n\n这道题出题人脑洞真大...\n\n文件打不开，进入010，把头文件补充之后还是打不开，src也过不去，我愣是啥都没看出来\n\n回头看题目描述\n\n```\nH4ppy Apr1l F001's D4y!\n```\n\n看F001像不像16进制数\n\n在010搜索一下\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698379300013-8d6615bc-d257-4afd-afb8-c68a3113081e.png)\n\n好抽象阿...\n\n可能到这里还没看出来，我画两条线你再看看\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698379357508-75680516-ba08-4979-bba1-65f86c1eaa7e.png)\n\n...好出题人你清高\n\n```\nctfshow{fcbd427caf4a52f1147ab44346cd1cdd}\n```\n\n\n\n## 图片篇(文件结构)\n\n### Misc24\n\n可以看到目前像素是900 x 153=137700，而**文件头**占了53字节，**文件结尾**在675053字节处。又因为每个像素点由三个字节表示，每个字节控制一种颜色，分别为**红、绿、蓝**三种颜色。所以文件真实像素大小为(675053-53)/3=225000。根据提示本题的宽度是没问题的，所以只需要修改高度即可。高度=225000/900=250\n\n\n### Misc25\n\n题目提示：\n\n```\n**flag在图片上面**\n```\n\n根据提示来看数据可能被隐写到了没显示到的区域，将png拖入tweakpng中提示crc校验出错\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464074225-678ffa4a-2016-4e79-98dd-3f535be69f11.png)\n\n可以判断图片二进制可能被修改了分辨率或者crc\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464544410-5b177e98-2a2c-4f59-bf50-deb0b2fd41a5.png)\n\n使用以下crc爆破脚本\n\n```python\nimport os\nimport binascii\nimport  struct\ncrcbp = open(\"x.png\",'rb').read()\nfor i in range(4000) :\n    for j in range(4000):\n        data = crcbp[12:16] + struct.pack('>i',i) + struct.pack('>i',j) + crcbp[24:29]\n        crc32 = binascii.crc32(data) & 0xffffffff\n        if crc32 == xxxxxxxxxx : #根据crc校验修改,记得前面加0x\n            print(i,j)\n            print(\"hex\",hex(i),hex(j))\n```\n\n计算`09 DA D1 61`时与原分辨率相同\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464528148-44cd94cb-6364-4aa5-afab-b7f766cdea85.png)\n\n计算`76 EC 1E 40`时发现分辨率变成了900*250，相对应的HEX值为`0x384 0xfa`\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464749914-34739636-ce06-4d64-a0fc-76158a694ea2.png)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464778382-5f720053-a586-4736-a865-1cfc63eddd73.png)'\n\n成功获得flag\n\n### Misc26\n\n使用tweakpng发现crc校验出错，使用相同方法求解\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698467483175-d0fd0279-f758-4a5a-90cb-a6e24f98a05f.png)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698478275381-b8b1c4c8-284a-4ee6-9a3c-4de99682f542.png)\n\n### Misc27\n\n根据题目提示可知不出意外会与上一道题的思路差不太多，所以想办法更改文件的高度\n\nFFC0表示JPEG文件正式进入帧块，所以找到FFC0，后面的两个字节表示帧长度，再后面一个表示精度，之后四个字节分别表示宽度和高度，修改高度即可\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698480396215-bd9767f6-0c68-4f49-bee6-289a11c11737.png)\n\n### Misc28\n\n根据题目提示“**flag在图片下面**”可知这道题还是图片宽高隐写题，想办法更改文件的宽高即可\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698650883049-6f45a71f-9a45-4f5d-8640-162c858b6f04.png)\n\n### Misc29\n\n将gif文件拖入分帧器中可以发现共有八帧图片，进去010可以明显地看出来每张图片的分段。原图长宽为900*150，题目提示flag在图片下面，查找宽度150对应的16进制值（03 96）并且全部替换为03 FF再分帧可以看到从第四帧开始出现flag\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768482136-388100db-b0b2-426d-913a-645355e8f014.png)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768529199-60d9ce16-cab5-4b08-ab63-124ad2c80ad1.png)![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768537846-c53dd11c-a5d4-4398-9cc9-d0ca18ff8cd2.png)\n\n### Misc30\n\n解压后得到bmp文件，根据题目提示可知图片正确的宽度为950，看到图片属性中宽度为900，进入010查找900对应的16进制值（03 84），但是直接查找没有发现宽度，查看文件头部发现有一串十六进制值为84 03，可能这串数字就代表的是文件的宽度，查找950对应的十六进制值为03 B6，于是将84替换为B6，发现图片出现flag。后期查找资料得知bmp文件大多数都是倒向的位图，因此要倒着写。\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698769334102-8619b230-c59f-4ccb-a080-22ef04dee65a.png)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698769396309-69ea31f2-7d0d-4a06-972a-b0d4f548129a.png)\n\n### Misc31\n\n同样的宽度设置不正确导致bmp文件失真修复题\n\n目前图片是 900*150=135000个像素大小。\n**每个像素点由3个字节（十六进制码6位）表示**，**每个字节负责控制一种颜色**，分别为蓝（Blue）、绿（Green）、红（Red），用010打开发现看到共有 487253 个字节，文件头占 53个字节\n\n则正确的宽度应为 **（487253-53） / 3 / 150 = 1082 =0x43a**（结果取整）\n\n将84 03更改为 3A 04即可\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698770218499-96b2706d-8222-42c0-8a6c-c473f85ca011.png)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698770205303-496fda13-f4dc-45db-bc4d-3519710820ea.png)\n\n### Misc32\n\n简单的png爆破宽高题，直接上脚本爆破即可\n\n### Misc33\n\n不要管是宽改了还是高改了，只要crc没有改就直接可以上脚本爆破\n\n### Misc34\n\n这道题的crc校验也被更改了，但是题目限定范围宽度一定是大于900的，那么就使用脚本将宽度从901开始挨个更改（我限定的范围是1200）\n\n```python\n# 导入所需的模块\nimport os\nimport zlib\nimport struct\n\n# 定义源文件名和输出目录名\nfilename = \"misc34.png\"\noutput_dir = \"output\"\n\n# 如果输出目录不存在，则创建它\nos.makedirs(output_dir, exist_ok=True)\n\n# 以二进制模式打开源文件\nwith open(filename, 'rb') as f:\n    # 读取源文件的全部内容\n    all_b = f.read()\n    \n    # 对于每个在901到1200范围内的整数i\n    for i in range(901,1200):\n        # 创建新文件名，包括输出目录和文件名\n        name = os.path.join(output_dir, str(i) + \".png\")\n        \n        # 以二进制写入模式打开新文件\n        with open(name,\"wb\") as f1:\n            # 创建新的图片数据，其中包含修改后的宽度信息\n            im = all_b[:16]+struct.pack('>i',i)+all_b[20:]\n            \n            # 将新的图片数据写入到新文件中\n            f1.write(im)\n```\n\n在output文件夹中就可以看到正确的flag在哪里\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698824027008-3c5c7742-d059-474d-adc1-af0e9c76d009.png)\n\n发现文件无法直接打开，于是用tweakpng检查文件的crc并且将原来文件中错误的crc替换为正确的crc即可\n\n### Misc35\n\n相同的思路，但是文件格式变成了jpg，但是文件本体没有看到任何信息，尝试修改一下高度发现类似flag的图片\n\n​\t![misc35.jpg](https://cdn.nlark.com/yuque/0/2023/jpeg/39298680/1698915256041-e775d328-bf6e-4888-adc9-bbd53f8bee46.jpeg)\n\n那么稍微改动一下上面的脚本\n\n```python\nimport os\nimport struct\n\n# 设置输出目录\noutput_dir = \"output\"\n\n# 如果输出目录不存在，则创建它\nos.makedirs(output_dir, exist_ok=True)\n\n# 设置要读取的文件名\nfilename = \"misc35.jpg\"\n\n# 以二进制模式打开文件\nwith open(filename, 'rb') as f:\n    # 读取所有的字节\n    all_b = f.read()\n\n    # 遍历901到1200的范围\n    for i in range(901, 1200):\n        # 创建新的文件名，包含输出目录和当前迭代的数字，扩展名为.jpg\n        name = os.path.join(output_dir, str(i) + \".jpg\")\n        \n        # 以二进制写入模式打开新文件\n        f1 = open(name, \"wb\")\n        \n        # 创建新的图像数据，将原始数据的前159个字节与当前迭代数字打包成大端字节序的二进制数据，然后再加上原始数据的第161个字节及以后的所有字节\n        im = all_b[:159] + struct.pack('>h', i) + all_b[161:]\n        \n        # 将新的图像数据写入新文件\n        f1.write(im)\n        \n        # 关闭新文件\n        f1.close()\n\n```\n\n当宽度变成993的时候flag出现\n\n### Misc36\n\n先将图片调整到能看到gif下面隐写的类flag字样，然后将宽度在920到950之间进行爆破即可得出答案\n\n### Misc37\n\n分帧\n\n### Misc38\n\n分帧*\n\n### Misc39\n\n题目描述：\n\n**flag就像水，忽快忽慢地流**\n\n说明gif文件的帧速率不同，flag可能就在帧速率当中*（尝试帧间隔隐写）*\n\n那么接下来需要一个新工具\n\n#### **imagemagick**\n\n`sudo apt-get install imagemagick`\n\n随后执行\n\n`identify -format \"%T \" misc39.gif > 1.txt`\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990042594-cd1b51bd-abdd-4f0c-bf43-358a39d2f1ba.png)\n\n发现只有37 36两个数字，尝试转换为二进制\n\n由于flag的格式一般都是41字节数据，于是将转化得出的的二进制转换成最后为41字节的字符串即可\n\n情况一：36=0 37=1\n\n```\n11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101\n```\n\n\n\n```python\ns=\"11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101\"\nflag=\"\"\nfor i in range(41):\n    flag += chr(int(s[7*i:7*(i+1)],2))\nprint(flag)\n\n```\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990613694-147d04c7-19f5-4035-aa38-4e9bbf4d0766.png)\n\n情况二：36=1 37=0\n\n```\n00111000001011001100100011000010111001000000010000000100100101010011011000111100111010011010011001001100110001101000110100101000110010011101100100000111010011010100110110010011000111001101110001101001001100110000111101000110001101000111010011100001111010011111001011100101010001100000010\n```\n\n\n\n```python\ns=\"00111000001011001100100011000010111001000000010000000100100101010011011000111100111010011010011001001100110001101000110100101000110010011101100100000111010011010100110110010011000111001101110001101001001100110000111101000110001101000111010011100001111010011111001011100101010001100000010\"\nflag=\"\"\nfor i in range(41):\n    flag += chr(int(s[7*i:7*(i+1)],2))\nprint(flag)\n\n```\n\n\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990474263-44babec0-e8d9-46c0-9424-69c353b03447.png)\n\n炸了捏\n\n### Misc40\n\n先来说一下这个png为什么会动\n\n##### Apng\n\nAPNG 是 PNG 格式的一种扩展，可以支持动图。APNG 是普通 png 图片的升级版，它的后缀依然是.png，包含动态的情况下体积会比普通静态 png 打出数倍，可以做到无损的情况展示动态。APNG 是向下兼容的，扩展名也是.png ，不支持 APNG 的解码器会表现为 PNG 的形式，即显示 APNG 的第一帧图片。\n\n之前的Misc38我误以为是因为hoenyview的宽容性所以才能直接以动图的形式打开其实并不是，只是采用了APNG的格式而已\n\n那么再来介绍一个分解APNG的工具\n\n#### [APNG Disassembler](http://sourceforge.net/projects/apngdis/files/latest/download)\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698992703461-46cd35b2-be87-433b-bc49-10356d45636b.png)\n\n这款工具在分离apng的同时也会输出每张图片的delay\n\n然后这个delay文件就是这道题的关键，可以进行十进制转ascii从而得到flag（别问我是怎么知道的我在这里卡了大半天挨个试的）\n\n写个脚本来提取每个文件中的delay然后直接转换为ascii即可得到flag\n\n```python\nflag=\"\"\nfor i in range(1,69):\n    f = open(\"apngframe\" + str(i) + \".txt\")\n    s = f.read()\n    flag += chr(int(s.split(\"/\")[0][6:]))\nprint(flag)\n```\n\n![img](https://cdn.nlark.com/yuque/0/2023/png/39298680/1698992860154-6d1375cf-48ae-4943-aecc-8c15c02fadb8.png)\n\n### Misc42\n\n使用010打开文件，发现有许多的IDAT块，放入tweakpng进行解析，发现IDAT块的个数与flag的格式长度相似，于是使用脚本检索所有idat块的字节数并将每一个块的字节数转换为ascii码\n\n```python\n# 导入binascii模块，用于处理二进制和ascii数据\nimport binascii\n\n\n# 定义一个函数，用于从png文件中提取idat块的字节数\ndef get_idat_bytes(png_file):\n    # 以二进制模式打开png文件\n    with open(png_file, \"rb\") as f:\n        # 读取文件内容\n        data = f.read()\n        # 将二进制数据转换为十六进制字符串\n        hex_data = binascii.hexlify(data).decode()\n        # 定义一个空列表，用于存储idat块的字节数\n        idat_bytes = []\n        # 定义一个变量，用于记录当前的位置\n        pos = 0\n        # 循环遍历十六进制字符串，直到找到所有的idat块\n        while True:\n            # 查找idat块的标识符，即49444154\n            idat_pos = hex_data.find(\"49444154\", pos)\n            # 如果没有找到，说明已经到达文件的末尾，退出循环\n            if idat_pos == -1:\n                break\n            # 如果找到了，计算idat块的起始位置，即标识符前面的四个字节，表示块的长度\n            start_pos = idat_pos - 8\n            # 计算idat块的结束位置，即标识符后面的四个字节，表示块的校验和\n            end_pos = idat_pos + 12\n            # 截取idat块的十六进制字符串\n            idat_hex = hex_data[start_pos:end_pos]\n            # 将idat块的十六进制字符串转换为二进制数据\n            idat_data = binascii.unhexlify(idat_hex)\n            # 获取idat块的长度，即前四个字节\n            idat_length = idat_data[:4]\n            # 将idat块的长度添加到列表中\n            idat_bytes.append(idat_length)\n            # 更新当前的位置，继续查找下一个idat块\n            pos = end_pos\n        # 返回idat块的字节数列表\n        return idat_bytes\n\n\n# 定义一个函数，用于将字节数转换为ascii码\ndef bytes_to_ascii(bytes_list):\n    # 定义一个空字符串，用于存储ascii码\n    ascii_str = \"\"\n    # 循环遍历字节数列表\n    for b in bytes_list:\n        # 将每个字节转换为十进制整数\n        n = int.from_bytes(b, \"big\")\n        # 将每个整数转换为ascii字符\n        c = chr(n)\n        # 将每个字符拼接到字符串中\n        ascii_str += c\n    # 返回ascii码字符串\n    return ascii_str\n\n\n# 定义一个png文件的路径，你可以根据你的实际情况修改\npng_file = \"misc42.png\"\n# 调用get_idat_bytes函数，从png文件中提取idat块的字节数\nidat_bytes = get_idat_bytes(png_file)\n# 打印idat块的字节数\nprint(\"The bytes of IDAT chunks are:\")\nfor b in idat_bytes:\n    print(b)\n# 调用bytes_to_ascii函数，将idat块的字节数转换为ascii码\nascii_str = bytes_to_ascii(idat_bytes)\n# 打印ascii码\nprint(\"The ASCII code of IDAT chunks is:\")\nprint(ascii_str)\n\n```\n\n### Misc43\n\n题目描述：`错误中隐藏着通往正确答案的道路`\n\n使用010打开文件，发现有很多IDAT块，然后使用tweakpng打开文件，发现很多的crc都出错了，对应题目描述`错误中隐藏着通往正确答案的道路`，尝试将所有出错的crc校验码提取出来发现可能对应ascii码，于是使用脚本\n\n```python\nimport binascii\nimport struct\n\n\ndef calculate_crc(chunk_type, data):\n    return binascii.crc32(chunk_type + data) & 0xffffffff\n\n\ndef get_chunks(png_file):\n    png_file.seek(8)  # Skip the PNG signature\n\n    while True:\n        chunk_length = struct.unpack('!I', png_file.read(4))[0]\n        chunk_type = png_file.read(4)\n        data = png_file.read(chunk_length)\n        crc = struct.unpack('!I', png_file.read(4))[0]\n\n        yield chunk_type, data, crc\n\n        if chunk_type == b'IEND':\n            break\n\n\ndef check_crc(png_file):\n    incorrect_crcs = []\n\n    for chunk_type, data, crc in get_chunks(png_file):\n        calculated_crc = calculate_crc(chunk_type, data)\n\n        if calculated_crc != crc and chunk_type == b'IDAT':\n            incorrect_crcs.append(hex(crc)[2:])  # Convert to hex and remove \"0x\"\n\n    return incorrect_crcs\n\n\ndef crc_to_ascii(crc_values):\n    ascii_values = []\n\n    for crc in crc_values:\n        # Start from the third character, and take every two characters as a hex number\n        for i in range(0, len(crc), 2):\n            hex_value = crc[i:i + 2]\n            ascii_values.append(chr(int(hex_value, 16)))\n\n    return ''.join(ascii_values)\n\n\nwith open('misc43.png', 'rb') as f:\n    incorrect_crcs = check_crc(f)\n    ascii_values = crc_to_ascii(incorrect_crcs)\n\nprint(ascii_values)\n\n```\n\n得到flag\n","slug":"CTFSHOW_Misc_WP","published":1,"date":"2023-11-06T09:59:21.540Z","updated":"2023-11-04T12:29:36.664Z","_id":"clomqd5mk0002x8zyfbqchdcq","title":"","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"CTFSHOW-Misc-WP\"><a href=\"#CTFSHOW-Misc-WP\" class=\"headerlink\" title=\"CTFSHOW_Misc_WP\"></a><strong>CTFSHOW_Misc_WP</strong></h1><p>一个初学CTF的萌新笔记qwq</p>\n<h2 id=\"图片篇-基础操作\"><a href=\"#图片篇-基础操作\" class=\"headerlink\" title=\"图片篇(基础操作)\"></a>图片篇(基础操作)</h2><h3 id=\"Misc1\"><a href=\"#Misc1\" class=\"headerlink\" title=\"Misc1\"></a>Misc1</h3><p>很简单的入门题，教你怎么交flag的</p>\n<h3 id=\"Misc2\"><a href=\"#Misc2\" class=\"headerlink\" title=\"Misc2\"></a>Misc2</h3><p>解压压缩包得到txt文件，打开后显示乱码，使用010打开文件</p>\n<p>发现文件头为PNG，更改扩展名-  </p>\n<p>得到flag</p>\n<h3 id=\"Misc3\"><a href=\"#Misc3\" class=\"headerlink\" title=\"Misc3\"></a>Misc3</h3><p>解压文件，发现文件拓展名为bpg，查询到BPG容器格式是一种通用图像格式，下载Honeyview进行查看得到flag</p>\n<h4 id=\"Honeyview\"><a href=\"#Honeyview\" class=\"headerlink\" title=\"Honeyview\"></a>Honeyview</h4><p>是我个人特别喜欢用的一款图片查看器，文件出现改动的时候可以实时变化，并且宽容性极强，没看见过他打不开的图片</p>\n<h3 id=\"Misc4\"><a href=\"#Misc4\" class=\"headerlink\" title=\"Misc4\"></a>Misc4</h3><p>解压文件发现6个txt，打开后发现ASCII乱码，直接更改为类图片的后缀名使用honeyview打开发现flag，直接按照顺序进行排序</p>\n<h2 id=\"图片篇-信息附加\"><a href=\"#图片篇-信息附加\" class=\"headerlink\" title=\"图片篇(信息附加)\"></a>图片篇(信息附加)</h2><h3 id=\"Misc5\"><a href=\"#Misc5\" class=\"headerlink\" title=\"Misc5\"></a>Misc5</h3><h4 id=\"十六进制编辑器的搜索功能\"><a href=\"#十六进制编辑器的搜索功能\" class=\"headerlink\" title=\"十六进制编辑器的搜索功能\"></a>十六进制编辑器的搜索功能</h4><p>解压压缩包，打开文件，png直接显示noflag，使用010打开，在16进制尾端发现真flag</p>\n<h3 id=\"Misc6\"><a href=\"#Misc6\" class=\"headerlink\" title=\"Misc6\"></a>Misc6</h3><p>打开jpg，发现伪flag，使用010打开，寻找关键字找到flag</p>\n<h3 id=\"Misc7\"><a href=\"#Misc7\" class=\"headerlink\" title=\"Misc7\"></a>Misc7</h3><p>好的打开图片之后还是同样的伪flag，不管了直接上010，相同的搜索关键字懒得写了</p>\n<h3 id=\"Misc8\"><a href=\"#Misc8\" class=\"headerlink\" title=\"Misc8\"></a>Misc8</h3><p>解压、伪代码、010、搜索…没出来</p>\n<p>换一种思路，打开kali，打开shell，使用binwalk分析，发现zlib与png，使用foremost进行分离可见真flag</p>\n<h4 id=\"kali\"><a href=\"#kali\" class=\"headerlink\" title=\"kali\"></a>kali</h4><p>很经典的Linux，对网安方面有极大作用（建议每个网安人都配一个（？</p>\n<h4 id=\"Binwalk\"><a href=\"#Binwalk\" class=\"headerlink\" title=\"Binwalk\"></a>Binwalk</h4><p>linux中一个特别好用的文件解析器，kali中自带，可以清晰的看到图片中是否含有隐藏数据，同时也支持分离文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binwalk -e file --run-as=root</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Foremost\"><a href=\"#Foremost\" class=\"headerlink\" title=\"Foremost\"></a>Foremost</h4><p>linux中的文件分离器，我一般是在binwalk没法用或者没解析出来的时候才会用，算是一个备用选项吧</p>\n<p><code>foremost file</code><br>foremost不指定路径的话会自动在当前文件下的目录中新建一个output文件夹</p>\n<h3 id=\"Misc9\"><a href=\"#Misc9\" class=\"headerlink\" title=\"Misc9\"></a>Misc9</h3><p>010查找</p>\n<h3 id=\"Misc10\"><a href=\"#Misc10\" class=\"headerlink\" title=\"Misc10\"></a>Misc10</h3><p>同样的伪flag，拖入010没发现异常，进入kali中使用binwalk分析图片发现zlib，使用binwalk进行分离发现flag</p>\n<h3 id=\"Misc11\"><a href=\"#Misc11\" class=\"headerlink\" title=\"Misc11\"></a>Misc11</h3><p>拖入010，发现可能存在其他文件，进入kali进行binwalk发现两个zlib文件，则说明此图片有隐藏文件，使用foremost与binwalk均没有解析出内容，使用tweakpng排查发现含有2个IDAT块，删除第一个IDAT块发现flag</p>\n<h4 id=\"Tweakpng\"><a href=\"#Tweakpng\" class=\"headerlink\" title=\"Tweakpng\"></a>Tweakpng</h4><p>Tweakpng是一款简单易用的png图像浏览工具，它允许查看和修改一些png图像文件的元信息存储，这道题里可以用它来删除IDAT块</p>\n<h3 id=\"Misc12\"><a href=\"#Misc12\" class=\"headerlink\" title=\"Misc12\"></a>Misc12</h3><p>进tweak特么有一群IDAT啊啊啊啊啊啊啊啊</p>\n<p>绷不住了一个一个删吧（</p>\n<p>删了一堆之后找到flag了</p>\n<h3 id=\"Misc13\"><a href=\"#Misc13\" class=\"headerlink\" title=\"Misc13\"></a>Misc13</h3><p>打开文件发现两个IDAT块，但是删除后没有东西，根据题目提示打开010，发现有四段疑似flag的，根据规律隔位删除可得到四个flag，挨个试可以看到第三段flag为真</p>\n<p>吗的做完这道题我的眼睛就要瞎了（（（</p>\n<h3 id=\"Misc14\"><a href=\"#Misc14\" class=\"headerlink\" title=\"Misc14\"></a>Misc14</h3><p>binwalk直接出</p>\n<h3 id=\"Misc15\"><a href=\"#Misc15\" class=\"headerlink\" title=\"Misc15\"></a>Misc15</h3><p>Crtl+F，请</p>\n<h3 id=\"Misc16\"><a href=\"#Misc16\" class=\"headerlink\" title=\"Misc16\"></a>Misc16</h3><p>binwalk直接出</p>\n<h3 id=\"Misc17\"><a href=\"#Misc17\" class=\"headerlink\" title=\"Misc17\"></a>Misc17</h3><p>使用tweakpng将IDAT块合并，然后binwalk分离得到flag图片</p>\n<h3 id=\"Misc18\"><a href=\"#Misc18\" class=\"headerlink\" title=\"Misc18\"></a>Misc18</h3><p>题目提示“<strong>flag在标题、作者、照相机和镜头型号里。”</strong></p>\n<p>有够明显的</p>\n<h4 id=\"Magicexif\"><a href=\"#Magicexif\" class=\"headerlink\" title=\"Magicexif\"></a>Magicexif</h4><p>一个很好用的exif文件查看器，可以分析元数据并且很直观的显示出来，还可以进行图片修复，查看图片是否被修改等操作</p>\n<h3 id=\"Misc19\"><a href=\"#Misc19\" class=\"headerlink\" title=\"Misc19\"></a>Misc19</h3><p>拖到exif查看器里就行</p>\n<h3 id=\"Misc20\"><a href=\"#Misc20\" class=\"headerlink\" title=\"Misc20\"></a>Misc20</h3><h4 id=\"我真想锤烂这个出题人的头\"><a href=\"#我真想锤烂这个出题人的头\" class=\"headerlink\" title=\"我真想锤烂这个出题人的头\"></a>我真想锤烂这个出题人的头</h4><p>拖到exif查看器里</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698369547873-fb5cad8a-4479-438b-8f38-8e307fcf1ba0.png\" alt=\"img\"></p>\n<p>牛逼</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698369571171-2c62aba0-003c-4edb-abc9-066dd30e76af.png\" alt=\"img\">ctfshow{c97964b1aecf06e1d79c21ddad593e42}</p>\n<h3 id=\"Misc21\"><a href=\"#Misc21\" class=\"headerlink\" title=\"Misc21\"></a>Misc21</h3><p>上难度了奥</p>\n<p>根据题目可知，flag藏在图片序号中，使用exif查看器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exif Byte Order : Big-endian (Motorola, MM)</span><br><span class=\"line\">X Resolution : 3902939465</span><br><span class=\"line\">Y Resolution : 2371618619</span><br><span class=\"line\">Page Name : https://ctf.show/</span><br><span class=\"line\">X Position : 1082452817</span><br><span class=\"line\">Y Position : 2980145261</span><br><span class=\"line\">Target Printer : ctfshow&#123;&#125;</span><br><span class=\"line\">Serial Number : 686578285826597329</span><br></pre></td></tr></table></figure>\n\n\n\n<p>serial number后面有一串数字很可疑，将此转换成ASCII码值，得到这个（hex(X&amp;Ys)）。</p>\n<p>根据这个提示我们需要依次提取X、Y值（3902939465、2371618619、1082452817、2980145261），可以看出这四串数字都是十进制数，再将这些数字依次转换成十六进制数，然后我们依次拼接也就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfshow&#123;e8a221498d5c073b4084eb51b1a1686d&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Misc22\"><a href=\"#Misc22\" class=\"headerlink\" title=\"Misc22\"></a>Misc22</h3><p>这道题下载好了之后会看到缩略图里面有一串黄色的东西，但是打开之后又不见了</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377588571-528ab143-9d86-4ade-b8fb-5aad74137e5d.png\" alt=\"img\">（缩略图）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377675329-2a02bbcc-323a-4402-bbe1-6f9dda83a55a.png\" alt=\"img\">（本体）</p>\n<p>盲猜那串黄色的东西是flag</p>\n<h4 id=\"解法一（常规解法）\"><a href=\"#解法一（常规解法）\" class=\"headerlink\" title=\"解法一（常规解法）\"></a>解法一（常规解法）</h4><p>JPG文件的文件头为FFD8，在010中发现图片有两个FF08</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377848307-5c19cd8a-9bc9-4646-890b-0912f1e02283.png\" alt=\"img\"></p>\n<p>直接用010分离图片就可以解出（但是我还不会分离所以这种方法没有进行实操）</p>\n<h4 id=\"解法二（取巧解法）\"><a href=\"#解法二（取巧解法）\" class=\"headerlink\" title=\"解法二（取巧解法）\"></a>解法二（取巧解法）</h4><p>既然缩略图里面有flag，那么直接想办法看缩略图不就可以了嘛，打开Magicexif</p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698378733495-cfe5b7a5-86da-42da-9b7b-748447d55340.png\" alt=\"img\"></h5><p>直接查看缩略图就好了qwq</p>\n<h3 id=\"Misc23\"><a href=\"#Misc23\" class=\"headerlink\" title=\"Misc23\"></a>Misc23</h3><p>是一个psd文件，用photoshop打开，查看文件简介，原始数据中可以看到以下时间戳</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1997-09-22 02:17:02</span><br><span class=\"line\">2055-07-15 12:14:48</span><br><span class=\"line\">2038-05-05 16:50:45</span><br><span class=\"line\">1984-08-03 18:41:46</span><br></pre></td></tr></table></figure>\n\n<p>（也可以用Linux里的exiftool解析）</p>\n<p>转为16进制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(hex(874865822)</span><br><span class=\"line\">[2:]+hex(2699237688)</span><br><span class=\"line\">[2:]+hex(2156662245)</span><br><span class=\"line\">[2:]+hex(460377706)[2:]) </span><br><span class=\"line\">ctfshow&#123;3425649ea0e31938808c0de51b70ce6a&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Misc41\"><a href=\"#Misc41\" class=\"headerlink\" title=\"Misc41\"></a>Misc41</h3><p>题目描述</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（本题为Misc入门图片篇和愚人节比赛特别联动题）</span><br><span class=\"line\">H4ppy Apr1l F001&#x27;s D4y！</span><br><span class=\"line\">愚人节到了，一群笨蛋往南飞，一会儿排成S字，一会儿排成B字。</span><br></pre></td></tr></table></figure>\n\n<p>这道题出题人脑洞真大…</p>\n<p>文件打不开，进入010，把头文件补充之后还是打不开，src也过不去，我愣是啥都没看出来</p>\n<p>回头看题目描述</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">H4ppy Apr1l F001&#x27;s D4y!</span><br></pre></td></tr></table></figure>\n\n<p>看F001像不像16进制数</p>\n<p>在010搜索一下</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698379300013-8d6615bc-d257-4afd-afb8-c68a3113081e.png\" alt=\"img\"></p>\n<p>好抽象阿…</p>\n<p>可能到这里还没看出来，我画两条线你再看看</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698379357508-75680516-ba08-4979-bba1-65f86c1eaa7e.png\" alt=\"img\"></p>\n<p>…好出题人你清高</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfshow&#123;fcbd427caf4a52f1147ab44346cd1cdd&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"图片篇-文件结构\"><a href=\"#图片篇-文件结构\" class=\"headerlink\" title=\"图片篇(文件结构)\"></a>图片篇(文件结构)</h2><h3 id=\"Misc24\"><a href=\"#Misc24\" class=\"headerlink\" title=\"Misc24\"></a>Misc24</h3><p>可以看到目前像素是900 x 153&#x3D;137700，而<strong>文件头</strong>占了53字节，<strong>文件结尾</strong>在675053字节处。又因为每个像素点由三个字节表示，每个字节控制一种颜色，分别为<strong>红、绿、蓝</strong>三种颜色。所以文件真实像素大小为(675053-53)&#x2F;3&#x3D;225000。根据提示本题的宽度是没问题的，所以只需要修改高度即可。高度&#x3D;225000&#x2F;900&#x3D;250</p>\n<h3 id=\"Misc25\"><a href=\"#Misc25\" class=\"headerlink\" title=\"Misc25\"></a>Misc25</h3><p>题目提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**flag在图片上面**</span><br></pre></td></tr></table></figure>\n\n<p>根据提示来看数据可能被隐写到了没显示到的区域，将png拖入tweakpng中提示crc校验出错</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464074225-678ffa4a-2016-4e79-98dd-3f535be69f11.png\" alt=\"img\"></p>\n<p>可以判断图片二进制可能被修改了分辨率或者crc</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464544410-5b177e98-2a2c-4f59-bf50-deb0b2fd41a5.png\" alt=\"img\"></p>\n<p>使用以下crc爆破脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span>  struct</span><br><span class=\"line\">crcbp = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;x.png&quot;</span>,<span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4000</span>) :</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4000</span>):</span><br><span class=\"line\">        data = crcbp[<span class=\"number\">12</span>:<span class=\"number\">16</span>] + struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>,i) + struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>,j) + crcbp[<span class=\"number\">24</span>:<span class=\"number\">29</span>]</span><br><span class=\"line\">        crc32 = binascii.crc32(data) &amp; <span class=\"number\">0xffffffff</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> crc32 == xxxxxxxxxx : <span class=\"comment\">#根据crc校验修改,记得前面加0x</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(i,j)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hex&quot;</span>,<span class=\"built_in\">hex</span>(i),<span class=\"built_in\">hex</span>(j))</span><br></pre></td></tr></table></figure>\n\n<p>计算<code>09 DA D1 61</code>时与原分辨率相同</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464528148-44cd94cb-6364-4aa5-afab-b7f766cdea85.png\" alt=\"img\"></p>\n<p>计算<code>76 EC 1E 40</code>时发现分辨率变成了900*250，相对应的HEX值为<code>0x384 0xfa</code></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464749914-34739636-ce06-4d64-a0fc-76158a694ea2.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464778382-5f720053-a586-4736-a865-1cfc63eddd73.png\" alt=\"img\">‘</p>\n<p>成功获得flag</p>\n<h3 id=\"Misc26\"><a href=\"#Misc26\" class=\"headerlink\" title=\"Misc26\"></a>Misc26</h3><p>使用tweakpng发现crc校验出错，使用相同方法求解</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698467483175-d0fd0279-f758-4a5a-90cb-a6e24f98a05f.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698478275381-b8b1c4c8-284a-4ee6-9a3c-4de99682f542.png\" alt=\"img\"></p>\n<h3 id=\"Misc27\"><a href=\"#Misc27\" class=\"headerlink\" title=\"Misc27\"></a>Misc27</h3><p>根据题目提示可知不出意外会与上一道题的思路差不太多，所以想办法更改文件的高度</p>\n<p>FFC0表示JPEG文件正式进入帧块，所以找到FFC0，后面的两个字节表示帧长度，再后面一个表示精度，之后四个字节分别表示宽度和高度，修改高度即可</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698480396215-bd9767f6-0c68-4f49-bee6-289a11c11737.png\" alt=\"img\"></p>\n<h3 id=\"Misc28\"><a href=\"#Misc28\" class=\"headerlink\" title=\"Misc28\"></a>Misc28</h3><p>根据题目提示“<strong>flag在图片下面</strong>”可知这道题还是图片宽高隐写题，想办法更改文件的宽高即可</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698650883049-6f45a71f-9a45-4f5d-8640-162c858b6f04.png\" alt=\"img\"></p>\n<h3 id=\"Misc29\"><a href=\"#Misc29\" class=\"headerlink\" title=\"Misc29\"></a>Misc29</h3><p>将gif文件拖入分帧器中可以发现共有八帧图片，进去010可以明显地看出来每张图片的分段。原图长宽为900*150，题目提示flag在图片下面，查找宽度150对应的16进制值（03 96）并且全部替换为03 FF再分帧可以看到从第四帧开始出现flag</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768482136-388100db-b0b2-426d-913a-645355e8f014.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768529199-60d9ce16-cab5-4b08-ab63-124ad2c80ad1.png\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768537846-c53dd11c-a5d4-4398-9cc9-d0ca18ff8cd2.png\" alt=\"img\"></p>\n<h3 id=\"Misc30\"><a href=\"#Misc30\" class=\"headerlink\" title=\"Misc30\"></a>Misc30</h3><p>解压后得到bmp文件，根据题目提示可知图片正确的宽度为950，看到图片属性中宽度为900，进入010查找900对应的16进制值（03 84），但是直接查找没有发现宽度，查看文件头部发现有一串十六进制值为84 03，可能这串数字就代表的是文件的宽度，查找950对应的十六进制值为03 B6，于是将84替换为B6，发现图片出现flag。后期查找资料得知bmp文件大多数都是倒向的位图，因此要倒着写。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698769334102-8619b230-c59f-4ccb-a080-22ef04dee65a.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698769396309-69ea31f2-7d0d-4a06-972a-b0d4f548129a.png\" alt=\"img\"></p>\n<h3 id=\"Misc31\"><a href=\"#Misc31\" class=\"headerlink\" title=\"Misc31\"></a>Misc31</h3><p>同样的宽度设置不正确导致bmp文件失真修复题</p>\n<p>目前图片是 900*150&#x3D;135000个像素大小。<br><strong>每个像素点由3个字节（十六进制码6位）表示</strong>，<strong>每个字节负责控制一种颜色</strong>，分别为蓝（Blue）、绿（Green）、红（Red），用010打开发现看到共有 487253 个字节，文件头占 53个字节</p>\n<p>则正确的宽度应为 <strong>（487253-53） &#x2F; 3 &#x2F; 150 &#x3D; 1082 &#x3D;0x43a</strong>（结果取整）</p>\n<p>将84 03更改为 3A 04即可</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698770218499-96b2706d-8222-42c0-8a6c-c473f85ca011.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698770205303-496fda13-f4dc-45db-bc4d-3519710820ea.png\" alt=\"img\"></p>\n<h3 id=\"Misc32\"><a href=\"#Misc32\" class=\"headerlink\" title=\"Misc32\"></a>Misc32</h3><p>简单的png爆破宽高题，直接上脚本爆破即可</p>\n<h3 id=\"Misc33\"><a href=\"#Misc33\" class=\"headerlink\" title=\"Misc33\"></a>Misc33</h3><p>不要管是宽改了还是高改了，只要crc没有改就直接可以上脚本爆破</p>\n<h3 id=\"Misc34\"><a href=\"#Misc34\" class=\"headerlink\" title=\"Misc34\"></a>Misc34</h3><p>这道题的crc校验也被更改了，但是题目限定范围宽度一定是大于900的，那么就使用脚本将宽度从901开始挨个更改（我限定的范围是1200）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入所需的模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义源文件名和输出目录名</span></span><br><span class=\"line\">filename = <span class=\"string\">&quot;misc34.png&quot;</span></span><br><span class=\"line\">output_dir = <span class=\"string\">&quot;output&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果输出目录不存在，则创建它</span></span><br><span class=\"line\">os.makedirs(output_dir, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以二进制模式打开源文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"comment\"># 读取源文件的全部内容</span></span><br><span class=\"line\">    all_b = f.read()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 对于每个在901到1200范围内的整数i</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">901</span>,<span class=\"number\">1200</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 创建新文件名，包括输出目录和文件名</span></span><br><span class=\"line\">        name = os.path.join(output_dir, <span class=\"built_in\">str</span>(i) + <span class=\"string\">&quot;.png&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 以二进制写入模式打开新文件</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(name,<span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f1:</span><br><span class=\"line\">            <span class=\"comment\"># 创建新的图片数据，其中包含修改后的宽度信息</span></span><br><span class=\"line\">            im = all_b[:<span class=\"number\">16</span>]+struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>,i)+all_b[<span class=\"number\">20</span>:]</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 将新的图片数据写入到新文件中</span></span><br><span class=\"line\">            f1.write(im)</span><br></pre></td></tr></table></figure>\n\n<p>在output文件夹中就可以看到正确的flag在哪里</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698824027008-3c5c7742-d059-474d-adc1-af0e9c76d009.png\" alt=\"img\"></p>\n<p>发现文件无法直接打开，于是用tweakpng检查文件的crc并且将原来文件中错误的crc替换为正确的crc即可</p>\n<h3 id=\"Misc35\"><a href=\"#Misc35\" class=\"headerlink\" title=\"Misc35\"></a>Misc35</h3><p>相同的思路，但是文件格式变成了jpg，但是文件本体没有看到任何信息，尝试修改一下高度发现类似flag的图片</p>\n<p>​\t<img src=\"https://cdn.nlark.com/yuque/0/2023/jpeg/39298680/1698915256041-e775d328-bf6e-4888-adc9-bbd53f8bee46.jpeg\" alt=\"misc35.jpg\"></p>\n<p>那么稍微改动一下上面的脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置输出目录</span></span><br><span class=\"line\">output_dir = <span class=\"string\">&quot;output&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果输出目录不存在，则创建它</span></span><br><span class=\"line\">os.makedirs(output_dir, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置要读取的文件名</span></span><br><span class=\"line\">filename = <span class=\"string\">&quot;misc35.jpg&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以二进制模式打开文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"comment\"># 读取所有的字节</span></span><br><span class=\"line\">    all_b = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 遍历901到1200的范围</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">901</span>, <span class=\"number\">1200</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 创建新的文件名，包含输出目录和当前迭代的数字，扩展名为.jpg</span></span><br><span class=\"line\">        name = os.path.join(output_dir, <span class=\"built_in\">str</span>(i) + <span class=\"string\">&quot;.jpg&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 以二进制写入模式打开新文件</span></span><br><span class=\"line\">        f1 = <span class=\"built_in\">open</span>(name, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 创建新的图像数据，将原始数据的前159个字节与当前迭代数字打包成大端字节序的二进制数据，然后再加上原始数据的第161个字节及以后的所有字节</span></span><br><span class=\"line\">        im = all_b[:<span class=\"number\">159</span>] + struct.pack(<span class=\"string\">&#x27;&gt;h&#x27;</span>, i) + all_b[<span class=\"number\">161</span>:]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 将新的图像数据写入新文件</span></span><br><span class=\"line\">        f1.write(im)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 关闭新文件</span></span><br><span class=\"line\">        f1.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当宽度变成993的时候flag出现</p>\n<h3 id=\"Misc36\"><a href=\"#Misc36\" class=\"headerlink\" title=\"Misc36\"></a>Misc36</h3><p>先将图片调整到能看到gif下面隐写的类flag字样，然后将宽度在920到950之间进行爆破即可得出答案</p>\n<h3 id=\"Misc37\"><a href=\"#Misc37\" class=\"headerlink\" title=\"Misc37\"></a>Misc37</h3><p>分帧</p>\n<h3 id=\"Misc38\"><a href=\"#Misc38\" class=\"headerlink\" title=\"Misc38\"></a>Misc38</h3><p>分帧*</p>\n<h3 id=\"Misc39\"><a href=\"#Misc39\" class=\"headerlink\" title=\"Misc39\"></a>Misc39</h3><p>题目描述：</p>\n<p><strong>flag就像水，忽快忽慢地流</strong></p>\n<p>说明gif文件的帧速率不同，flag可能就在帧速率当中<em>（尝试帧间隔隐写）</em></p>\n<p>那么接下来需要一个新工具</p>\n<h4 id=\"imagemagick\"><a href=\"#imagemagick\" class=\"headerlink\" title=\"imagemagick\"></a><strong>imagemagick</strong></h4><p><code>sudo apt-get install imagemagick</code></p>\n<p>随后执行</p>\n<p><code>identify -format &quot;%T &quot; misc39.gif &gt; 1.txt</code></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990042594-cd1b51bd-abdd-4f0c-bf43-358a39d2f1ba.png\" alt=\"img\"></p>\n<p>发现只有37 36两个数字，尝试转换为二进制</p>\n<p>由于flag的格式一般都是41字节数据，于是将转化得出的的二进制转换成最后为41字节的字符串即可</p>\n<p>情况一：36&#x3D;0 37&#x3D;1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s=<span class=\"string\">&quot;11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101&quot;</span></span><br><span class=\"line\">flag=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">41</span>):</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(s[<span class=\"number\">7</span>*i:<span class=\"number\">7</span>*(i+<span class=\"number\">1</span>)],<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990613694-147d04c7-19f5-4035-aa38-4e9bbf4d0766.png\" alt=\"img\"></p>\n<p>情况二：36&#x3D;1 37&#x3D;0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00111000001011001100100011000010111001000000010000000100100101010011011000111100111010011010011001001100110001101000110100101000110010011101100100000111010011010100110110010011000111001101110001101001001100110000111101000110001101000111010011100001111010011111001011100101010001100000010</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s=<span class=\"string\">&quot;00111000001011001100100011000010111001000000010000000100100101010011011000111100111010011010011001001100110001101000110100101000110010011101100100000111010011010100110110010011000111001101110001101001001100110000111101000110001101000111010011100001111010011111001011100101010001100000010&quot;</span></span><br><span class=\"line\">flag=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">41</span>):</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(s[<span class=\"number\">7</span>*i:<span class=\"number\">7</span>*(i+<span class=\"number\">1</span>)],<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990474263-44babec0-e8d9-46c0-9424-69c353b03447.png\" alt=\"img\"></p>\n<p>炸了捏</p>\n<h3 id=\"Misc40\"><a href=\"#Misc40\" class=\"headerlink\" title=\"Misc40\"></a>Misc40</h3><p>先来说一下这个png为什么会动</p>\n<h5 id=\"Apng\"><a href=\"#Apng\" class=\"headerlink\" title=\"Apng\"></a>Apng</h5><p>APNG 是 PNG 格式的一种扩展，可以支持动图。APNG 是普通 png 图片的升级版，它的后缀依然是.png，包含动态的情况下体积会比普通静态 png 打出数倍，可以做到无损的情况展示动态。APNG 是向下兼容的，扩展名也是.png ，不支持 APNG 的解码器会表现为 PNG 的形式，即显示 APNG 的第一帧图片。</p>\n<p>之前的Misc38我误以为是因为hoenyview的宽容性所以才能直接以动图的形式打开其实并不是，只是采用了APNG的格式而已</p>\n<p>那么再来介绍一个分解APNG的工具</p>\n<h4 id=\"APNG-Disassembler\"><a href=\"#APNG-Disassembler\" class=\"headerlink\" title=\"APNG Disassembler\"></a><a href=\"http://sourceforge.net/projects/apngdis/files/latest/download\">APNG Disassembler</a></h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698992703461-46cd35b2-be87-433b-bc49-10356d45636b.png\" alt=\"img\"></p>\n<p>这款工具在分离apng的同时也会输出每张图片的delay</p>\n<p>然后这个delay文件就是这道题的关键，可以进行十进制转ascii从而得到flag（别问我是怎么知道的我在这里卡了大半天挨个试的）</p>\n<p>写个脚本来提取每个文件中的delay然后直接转换为ascii即可得到flag</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">69</span>):</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;apngframe&quot;</span> + <span class=\"built_in\">str</span>(i) + <span class=\"string\">&quot;.txt&quot;</span>)</span><br><span class=\"line\">    s = f.read()</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(s.split(<span class=\"string\">&quot;/&quot;</span>)[<span class=\"number\">0</span>][<span class=\"number\">6</span>:]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698992860154-6d1375cf-48ae-4943-aecc-8c15c02fadb8.png\" alt=\"img\"></p>\n<h3 id=\"Misc42\"><a href=\"#Misc42\" class=\"headerlink\" title=\"Misc42\"></a>Misc42</h3><p>使用010打开文件，发现有许多的IDAT块，放入tweakpng进行解析，发现IDAT块的个数与flag的格式长度相似，于是使用脚本检索所有idat块的字节数并将每一个块的字节数转换为ascii码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入binascii模块，用于处理二进制和ascii数据</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个函数，用于从png文件中提取idat块的字节数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_idat_bytes</span>(<span class=\"params\">png_file</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 以二进制模式打开png文件</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(png_file, <span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># 读取文件内容</span></span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">        <span class=\"comment\"># 将二进制数据转换为十六进制字符串</span></span><br><span class=\"line\">        hex_data = binascii.hexlify(data).decode()</span><br><span class=\"line\">        <span class=\"comment\"># 定义一个空列表，用于存储idat块的字节数</span></span><br><span class=\"line\">        idat_bytes = []</span><br><span class=\"line\">        <span class=\"comment\"># 定义一个变量，用于记录当前的位置</span></span><br><span class=\"line\">        pos = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 循环遍历十六进制字符串，直到找到所有的idat块</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 查找idat块的标识符，即49444154</span></span><br><span class=\"line\">            idat_pos = hex_data.find(<span class=\"string\">&quot;49444154&quot;</span>, pos)</span><br><span class=\"line\">            <span class=\"comment\"># 如果没有找到，说明已经到达文件的末尾，退出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> idat_pos == -<span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\"># 如果找到了，计算idat块的起始位置，即标识符前面的四个字节，表示块的长度</span></span><br><span class=\"line\">            start_pos = idat_pos - <span class=\"number\">8</span></span><br><span class=\"line\">            <span class=\"comment\"># 计算idat块的结束位置，即标识符后面的四个字节，表示块的校验和</span></span><br><span class=\"line\">            end_pos = idat_pos + <span class=\"number\">12</span></span><br><span class=\"line\">            <span class=\"comment\"># 截取idat块的十六进制字符串</span></span><br><span class=\"line\">            idat_hex = hex_data[start_pos:end_pos]</span><br><span class=\"line\">            <span class=\"comment\"># 将idat块的十六进制字符串转换为二进制数据</span></span><br><span class=\"line\">            idat_data = binascii.unhexlify(idat_hex)</span><br><span class=\"line\">            <span class=\"comment\"># 获取idat块的长度，即前四个字节</span></span><br><span class=\"line\">            idat_length = idat_data[:<span class=\"number\">4</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 将idat块的长度添加到列表中</span></span><br><span class=\"line\">            idat_bytes.append(idat_length)</span><br><span class=\"line\">            <span class=\"comment\"># 更新当前的位置，继续查找下一个idat块</span></span><br><span class=\"line\">            pos = end_pos</span><br><span class=\"line\">        <span class=\"comment\"># 返回idat块的字节数列表</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> idat_bytes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个函数，用于将字节数转换为ascii码</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bytes_to_ascii</span>(<span class=\"params\">bytes_list</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 定义一个空字符串，用于存储ascii码</span></span><br><span class=\"line\">    ascii_str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 循环遍历字节数列表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> bytes_list:</span><br><span class=\"line\">        <span class=\"comment\"># 将每个字节转换为十进制整数</span></span><br><span class=\"line\">        n = <span class=\"built_in\">int</span>.from_bytes(b, <span class=\"string\">&quot;big&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 将每个整数转换为ascii字符</span></span><br><span class=\"line\">        c = <span class=\"built_in\">chr</span>(n)</span><br><span class=\"line\">        <span class=\"comment\"># 将每个字符拼接到字符串中</span></span><br><span class=\"line\">        ascii_str += c</span><br><span class=\"line\">    <span class=\"comment\"># 返回ascii码字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ascii_str</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个png文件的路径，你可以根据你的实际情况修改</span></span><br><span class=\"line\">png_file = <span class=\"string\">&quot;misc42.png&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 调用get_idat_bytes函数，从png文件中提取idat块的字节数</span></span><br><span class=\"line\">idat_bytes = get_idat_bytes(png_file)</span><br><span class=\"line\"><span class=\"comment\"># 打印idat块的字节数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The bytes of IDAT chunks are:&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> idat_bytes:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"comment\"># 调用bytes_to_ascii函数，将idat块的字节数转换为ascii码</span></span><br><span class=\"line\">ascii_str = bytes_to_ascii(idat_bytes)</span><br><span class=\"line\"><span class=\"comment\"># 打印ascii码</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The ASCII code of IDAT chunks is:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ascii_str)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Misc43\"><a href=\"#Misc43\" class=\"headerlink\" title=\"Misc43\"></a>Misc43</h3><p>题目描述：<code>错误中隐藏着通往正确答案的道路</code></p>\n<p>使用010打开文件，发现有很多IDAT块，然后使用tweakpng打开文件，发现很多的crc都出错了，对应题目描述<code>错误中隐藏着通往正确答案的道路</code>，尝试将所有出错的crc校验码提取出来发现可能对应ascii码，于是使用脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calculate_crc</span>(<span class=\"params\">chunk_type, data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binascii.crc32(chunk_type + data) &amp; <span class=\"number\">0xffffffff</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_chunks</span>(<span class=\"params\">png_file</span>):</span><br><span class=\"line\">    png_file.seek(<span class=\"number\">8</span>)  <span class=\"comment\"># Skip the PNG signature</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        chunk_length = struct.unpack(<span class=\"string\">&#x27;!I&#x27;</span>, png_file.read(<span class=\"number\">4</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\">        chunk_type = png_file.read(<span class=\"number\">4</span>)</span><br><span class=\"line\">        data = png_file.read(chunk_length)</span><br><span class=\"line\">        crc = struct.unpack(<span class=\"string\">&#x27;!I&#x27;</span>, png_file.read(<span class=\"number\">4</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> chunk_type, data, crc</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> chunk_type == <span class=\"string\">b&#x27;IEND&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check_crc</span>(<span class=\"params\">png_file</span>):</span><br><span class=\"line\">    incorrect_crcs = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> chunk_type, data, crc <span class=\"keyword\">in</span> get_chunks(png_file):</span><br><span class=\"line\">        calculated_crc = calculate_crc(chunk_type, data)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> calculated_crc != crc <span class=\"keyword\">and</span> chunk_type == <span class=\"string\">b&#x27;IDAT&#x27;</span>:</span><br><span class=\"line\">            incorrect_crcs.append(<span class=\"built_in\">hex</span>(crc)[<span class=\"number\">2</span>:])  <span class=\"comment\"># Convert to hex and remove &quot;0x&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> incorrect_crcs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crc_to_ascii</span>(<span class=\"params\">crc_values</span>):</span><br><span class=\"line\">    ascii_values = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> crc <span class=\"keyword\">in</span> crc_values:</span><br><span class=\"line\">        <span class=\"comment\"># Start from the third character, and take every two characters as a hex number</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(crc), <span class=\"number\">2</span>):</span><br><span class=\"line\">            hex_value = crc[i:i + <span class=\"number\">2</span>]</span><br><span class=\"line\">            ascii_values.append(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_value, <span class=\"number\">16</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>.join(ascii_values)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;misc43.png&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    incorrect_crcs = check_crc(f)</span><br><span class=\"line\">    ascii_values = crc_to_ascii(incorrect_crcs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ascii_values)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>得到flag</p>\n","length":10985,"excerpt":"","more":"<h1 id=\"CTFSHOW-Misc-WP\"><a href=\"#CTFSHOW-Misc-WP\" class=\"headerlink\" title=\"CTFSHOW_Misc_WP\"></a><strong>CTFSHOW_Misc_WP</strong></h1><p>一个初学CTF的萌新笔记qwq</p>\n<h2 id=\"图片篇-基础操作\"><a href=\"#图片篇-基础操作\" class=\"headerlink\" title=\"图片篇(基础操作)\"></a>图片篇(基础操作)</h2><h3 id=\"Misc1\"><a href=\"#Misc1\" class=\"headerlink\" title=\"Misc1\"></a>Misc1</h3><p>很简单的入门题，教你怎么交flag的</p>\n<h3 id=\"Misc2\"><a href=\"#Misc2\" class=\"headerlink\" title=\"Misc2\"></a>Misc2</h3><p>解压压缩包得到txt文件，打开后显示乱码，使用010打开文件</p>\n<p>发现文件头为PNG，更改扩展名-  </p>\n<p>得到flag</p>\n<h3 id=\"Misc3\"><a href=\"#Misc3\" class=\"headerlink\" title=\"Misc3\"></a>Misc3</h3><p>解压文件，发现文件拓展名为bpg，查询到BPG容器格式是一种通用图像格式，下载Honeyview进行查看得到flag</p>\n<h4 id=\"Honeyview\"><a href=\"#Honeyview\" class=\"headerlink\" title=\"Honeyview\"></a>Honeyview</h4><p>是我个人特别喜欢用的一款图片查看器，文件出现改动的时候可以实时变化，并且宽容性极强，没看见过他打不开的图片</p>\n<h3 id=\"Misc4\"><a href=\"#Misc4\" class=\"headerlink\" title=\"Misc4\"></a>Misc4</h3><p>解压文件发现6个txt，打开后发现ASCII乱码，直接更改为类图片的后缀名使用honeyview打开发现flag，直接按照顺序进行排序</p>\n<h2 id=\"图片篇-信息附加\"><a href=\"#图片篇-信息附加\" class=\"headerlink\" title=\"图片篇(信息附加)\"></a>图片篇(信息附加)</h2><h3 id=\"Misc5\"><a href=\"#Misc5\" class=\"headerlink\" title=\"Misc5\"></a>Misc5</h3><h4 id=\"十六进制编辑器的搜索功能\"><a href=\"#十六进制编辑器的搜索功能\" class=\"headerlink\" title=\"十六进制编辑器的搜索功能\"></a>十六进制编辑器的搜索功能</h4><p>解压压缩包，打开文件，png直接显示noflag，使用010打开，在16进制尾端发现真flag</p>\n<h3 id=\"Misc6\"><a href=\"#Misc6\" class=\"headerlink\" title=\"Misc6\"></a>Misc6</h3><p>打开jpg，发现伪flag，使用010打开，寻找关键字找到flag</p>\n<h3 id=\"Misc7\"><a href=\"#Misc7\" class=\"headerlink\" title=\"Misc7\"></a>Misc7</h3><p>好的打开图片之后还是同样的伪flag，不管了直接上010，相同的搜索关键字懒得写了</p>\n<h3 id=\"Misc8\"><a href=\"#Misc8\" class=\"headerlink\" title=\"Misc8\"></a>Misc8</h3><p>解压、伪代码、010、搜索…没出来</p>\n<p>换一种思路，打开kali，打开shell，使用binwalk分析，发现zlib与png，使用foremost进行分离可见真flag</p>\n<h4 id=\"kali\"><a href=\"#kali\" class=\"headerlink\" title=\"kali\"></a>kali</h4><p>很经典的Linux，对网安方面有极大作用（建议每个网安人都配一个（？</p>\n<h4 id=\"Binwalk\"><a href=\"#Binwalk\" class=\"headerlink\" title=\"Binwalk\"></a>Binwalk</h4><p>linux中一个特别好用的文件解析器，kali中自带，可以清晰的看到图片中是否含有隐藏数据，同时也支持分离文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binwalk -e file --run-as=root</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Foremost\"><a href=\"#Foremost\" class=\"headerlink\" title=\"Foremost\"></a>Foremost</h4><p>linux中的文件分离器，我一般是在binwalk没法用或者没解析出来的时候才会用，算是一个备用选项吧</p>\n<p><code>foremost file</code><br>foremost不指定路径的话会自动在当前文件下的目录中新建一个output文件夹</p>\n<h3 id=\"Misc9\"><a href=\"#Misc9\" class=\"headerlink\" title=\"Misc9\"></a>Misc9</h3><p>010查找</p>\n<h3 id=\"Misc10\"><a href=\"#Misc10\" class=\"headerlink\" title=\"Misc10\"></a>Misc10</h3><p>同样的伪flag，拖入010没发现异常，进入kali中使用binwalk分析图片发现zlib，使用binwalk进行分离发现flag</p>\n<h3 id=\"Misc11\"><a href=\"#Misc11\" class=\"headerlink\" title=\"Misc11\"></a>Misc11</h3><p>拖入010，发现可能存在其他文件，进入kali进行binwalk发现两个zlib文件，则说明此图片有隐藏文件，使用foremost与binwalk均没有解析出内容，使用tweakpng排查发现含有2个IDAT块，删除第一个IDAT块发现flag</p>\n<h4 id=\"Tweakpng\"><a href=\"#Tweakpng\" class=\"headerlink\" title=\"Tweakpng\"></a>Tweakpng</h4><p>Tweakpng是一款简单易用的png图像浏览工具，它允许查看和修改一些png图像文件的元信息存储，这道题里可以用它来删除IDAT块</p>\n<h3 id=\"Misc12\"><a href=\"#Misc12\" class=\"headerlink\" title=\"Misc12\"></a>Misc12</h3><p>进tweak特么有一群IDAT啊啊啊啊啊啊啊啊</p>\n<p>绷不住了一个一个删吧（</p>\n<p>删了一堆之后找到flag了</p>\n<h3 id=\"Misc13\"><a href=\"#Misc13\" class=\"headerlink\" title=\"Misc13\"></a>Misc13</h3><p>打开文件发现两个IDAT块，但是删除后没有东西，根据题目提示打开010，发现有四段疑似flag的，根据规律隔位删除可得到四个flag，挨个试可以看到第三段flag为真</p>\n<p>吗的做完这道题我的眼睛就要瞎了（（（</p>\n<h3 id=\"Misc14\"><a href=\"#Misc14\" class=\"headerlink\" title=\"Misc14\"></a>Misc14</h3><p>binwalk直接出</p>\n<h3 id=\"Misc15\"><a href=\"#Misc15\" class=\"headerlink\" title=\"Misc15\"></a>Misc15</h3><p>Crtl+F，请</p>\n<h3 id=\"Misc16\"><a href=\"#Misc16\" class=\"headerlink\" title=\"Misc16\"></a>Misc16</h3><p>binwalk直接出</p>\n<h3 id=\"Misc17\"><a href=\"#Misc17\" class=\"headerlink\" title=\"Misc17\"></a>Misc17</h3><p>使用tweakpng将IDAT块合并，然后binwalk分离得到flag图片</p>\n<h3 id=\"Misc18\"><a href=\"#Misc18\" class=\"headerlink\" title=\"Misc18\"></a>Misc18</h3><p>题目提示“<strong>flag在标题、作者、照相机和镜头型号里。”</strong></p>\n<p>有够明显的</p>\n<h4 id=\"Magicexif\"><a href=\"#Magicexif\" class=\"headerlink\" title=\"Magicexif\"></a>Magicexif</h4><p>一个很好用的exif文件查看器，可以分析元数据并且很直观的显示出来，还可以进行图片修复，查看图片是否被修改等操作</p>\n<h3 id=\"Misc19\"><a href=\"#Misc19\" class=\"headerlink\" title=\"Misc19\"></a>Misc19</h3><p>拖到exif查看器里就行</p>\n<h3 id=\"Misc20\"><a href=\"#Misc20\" class=\"headerlink\" title=\"Misc20\"></a>Misc20</h3><h4 id=\"我真想锤烂这个出题人的头\"><a href=\"#我真想锤烂这个出题人的头\" class=\"headerlink\" title=\"我真想锤烂这个出题人的头\"></a>我真想锤烂这个出题人的头</h4><p>拖到exif查看器里</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698369547873-fb5cad8a-4479-438b-8f38-8e307fcf1ba0.png\" alt=\"img\"></p>\n<p>牛逼</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698369571171-2c62aba0-003c-4edb-abc9-066dd30e76af.png\" alt=\"img\">ctfshow{c97964b1aecf06e1d79c21ddad593e42}</p>\n<h3 id=\"Misc21\"><a href=\"#Misc21\" class=\"headerlink\" title=\"Misc21\"></a>Misc21</h3><p>上难度了奥</p>\n<p>根据题目可知，flag藏在图片序号中，使用exif查看器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exif Byte Order : Big-endian (Motorola, MM)</span><br><span class=\"line\">X Resolution : 3902939465</span><br><span class=\"line\">Y Resolution : 2371618619</span><br><span class=\"line\">Page Name : https://ctf.show/</span><br><span class=\"line\">X Position : 1082452817</span><br><span class=\"line\">Y Position : 2980145261</span><br><span class=\"line\">Target Printer : ctfshow&#123;&#125;</span><br><span class=\"line\">Serial Number : 686578285826597329</span><br></pre></td></tr></table></figure>\n\n\n\n<p>serial number后面有一串数字很可疑，将此转换成ASCII码值，得到这个（hex(X&amp;Ys)）。</p>\n<p>根据这个提示我们需要依次提取X、Y值（3902939465、2371618619、1082452817、2980145261），可以看出这四串数字都是十进制数，再将这些数字依次转换成十六进制数，然后我们依次拼接也就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfshow&#123;e8a221498d5c073b4084eb51b1a1686d&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Misc22\"><a href=\"#Misc22\" class=\"headerlink\" title=\"Misc22\"></a>Misc22</h3><p>这道题下载好了之后会看到缩略图里面有一串黄色的东西，但是打开之后又不见了</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377588571-528ab143-9d86-4ade-b8fb-5aad74137e5d.png\" alt=\"img\">（缩略图）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377675329-2a02bbcc-323a-4402-bbe1-6f9dda83a55a.png\" alt=\"img\">（本体）</p>\n<p>盲猜那串黄色的东西是flag</p>\n<h4 id=\"解法一（常规解法）\"><a href=\"#解法一（常规解法）\" class=\"headerlink\" title=\"解法一（常规解法）\"></a>解法一（常规解法）</h4><p>JPG文件的文件头为FFD8，在010中发现图片有两个FF08</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698377848307-5c19cd8a-9bc9-4646-890b-0912f1e02283.png\" alt=\"img\"></p>\n<p>直接用010分离图片就可以解出（但是我还不会分离所以这种方法没有进行实操）</p>\n<h4 id=\"解法二（取巧解法）\"><a href=\"#解法二（取巧解法）\" class=\"headerlink\" title=\"解法二（取巧解法）\"></a>解法二（取巧解法）</h4><p>既然缩略图里面有flag，那么直接想办法看缩略图不就可以了嘛，打开Magicexif</p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698378733495-cfe5b7a5-86da-42da-9b7b-748447d55340.png\" alt=\"img\"></h5><p>直接查看缩略图就好了qwq</p>\n<h3 id=\"Misc23\"><a href=\"#Misc23\" class=\"headerlink\" title=\"Misc23\"></a>Misc23</h3><p>是一个psd文件，用photoshop打开，查看文件简介，原始数据中可以看到以下时间戳</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1997-09-22 02:17:02</span><br><span class=\"line\">2055-07-15 12:14:48</span><br><span class=\"line\">2038-05-05 16:50:45</span><br><span class=\"line\">1984-08-03 18:41:46</span><br></pre></td></tr></table></figure>\n\n<p>（也可以用Linux里的exiftool解析）</p>\n<p>转为16进制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(hex(874865822)</span><br><span class=\"line\">[2:]+hex(2699237688)</span><br><span class=\"line\">[2:]+hex(2156662245)</span><br><span class=\"line\">[2:]+hex(460377706)[2:]) </span><br><span class=\"line\">ctfshow&#123;3425649ea0e31938808c0de51b70ce6a&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Misc41\"><a href=\"#Misc41\" class=\"headerlink\" title=\"Misc41\"></a>Misc41</h3><p>题目描述</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（本题为Misc入门图片篇和愚人节比赛特别联动题）</span><br><span class=\"line\">H4ppy Apr1l F001&#x27;s D4y！</span><br><span class=\"line\">愚人节到了，一群笨蛋往南飞，一会儿排成S字，一会儿排成B字。</span><br></pre></td></tr></table></figure>\n\n<p>这道题出题人脑洞真大…</p>\n<p>文件打不开，进入010，把头文件补充之后还是打不开，src也过不去，我愣是啥都没看出来</p>\n<p>回头看题目描述</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">H4ppy Apr1l F001&#x27;s D4y!</span><br></pre></td></tr></table></figure>\n\n<p>看F001像不像16进制数</p>\n<p>在010搜索一下</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698379300013-8d6615bc-d257-4afd-afb8-c68a3113081e.png\" alt=\"img\"></p>\n<p>好抽象阿…</p>\n<p>可能到这里还没看出来，我画两条线你再看看</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698379357508-75680516-ba08-4979-bba1-65f86c1eaa7e.png\" alt=\"img\"></p>\n<p>…好出题人你清高</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfshow&#123;fcbd427caf4a52f1147ab44346cd1cdd&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"图片篇-文件结构\"><a href=\"#图片篇-文件结构\" class=\"headerlink\" title=\"图片篇(文件结构)\"></a>图片篇(文件结构)</h2><h3 id=\"Misc24\"><a href=\"#Misc24\" class=\"headerlink\" title=\"Misc24\"></a>Misc24</h3><p>可以看到目前像素是900 x 153&#x3D;137700，而<strong>文件头</strong>占了53字节，<strong>文件结尾</strong>在675053字节处。又因为每个像素点由三个字节表示，每个字节控制一种颜色，分别为<strong>红、绿、蓝</strong>三种颜色。所以文件真实像素大小为(675053-53)&#x2F;3&#x3D;225000。根据提示本题的宽度是没问题的，所以只需要修改高度即可。高度&#x3D;225000&#x2F;900&#x3D;250</p>\n<h3 id=\"Misc25\"><a href=\"#Misc25\" class=\"headerlink\" title=\"Misc25\"></a>Misc25</h3><p>题目提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**flag在图片上面**</span><br></pre></td></tr></table></figure>\n\n<p>根据提示来看数据可能被隐写到了没显示到的区域，将png拖入tweakpng中提示crc校验出错</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464074225-678ffa4a-2016-4e79-98dd-3f535be69f11.png\" alt=\"img\"></p>\n<p>可以判断图片二进制可能被修改了分辨率或者crc</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464544410-5b177e98-2a2c-4f59-bf50-deb0b2fd41a5.png\" alt=\"img\"></p>\n<p>使用以下crc爆破脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span>  struct</span><br><span class=\"line\">crcbp = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;x.png&quot;</span>,<span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4000</span>) :</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4000</span>):</span><br><span class=\"line\">        data = crcbp[<span class=\"number\">12</span>:<span class=\"number\">16</span>] + struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>,i) + struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>,j) + crcbp[<span class=\"number\">24</span>:<span class=\"number\">29</span>]</span><br><span class=\"line\">        crc32 = binascii.crc32(data) &amp; <span class=\"number\">0xffffffff</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> crc32 == xxxxxxxxxx : <span class=\"comment\">#根据crc校验修改,记得前面加0x</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(i,j)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hex&quot;</span>,<span class=\"built_in\">hex</span>(i),<span class=\"built_in\">hex</span>(j))</span><br></pre></td></tr></table></figure>\n\n<p>计算<code>09 DA D1 61</code>时与原分辨率相同</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464528148-44cd94cb-6364-4aa5-afab-b7f766cdea85.png\" alt=\"img\"></p>\n<p>计算<code>76 EC 1E 40</code>时发现分辨率变成了900*250，相对应的HEX值为<code>0x384 0xfa</code></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464749914-34739636-ce06-4d64-a0fc-76158a694ea2.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698464778382-5f720053-a586-4736-a865-1cfc63eddd73.png\" alt=\"img\">‘</p>\n<p>成功获得flag</p>\n<h3 id=\"Misc26\"><a href=\"#Misc26\" class=\"headerlink\" title=\"Misc26\"></a>Misc26</h3><p>使用tweakpng发现crc校验出错，使用相同方法求解</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698467483175-d0fd0279-f758-4a5a-90cb-a6e24f98a05f.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698478275381-b8b1c4c8-284a-4ee6-9a3c-4de99682f542.png\" alt=\"img\"></p>\n<h3 id=\"Misc27\"><a href=\"#Misc27\" class=\"headerlink\" title=\"Misc27\"></a>Misc27</h3><p>根据题目提示可知不出意外会与上一道题的思路差不太多，所以想办法更改文件的高度</p>\n<p>FFC0表示JPEG文件正式进入帧块，所以找到FFC0，后面的两个字节表示帧长度，再后面一个表示精度，之后四个字节分别表示宽度和高度，修改高度即可</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698480396215-bd9767f6-0c68-4f49-bee6-289a11c11737.png\" alt=\"img\"></p>\n<h3 id=\"Misc28\"><a href=\"#Misc28\" class=\"headerlink\" title=\"Misc28\"></a>Misc28</h3><p>根据题目提示“<strong>flag在图片下面</strong>”可知这道题还是图片宽高隐写题，想办法更改文件的宽高即可</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698650883049-6f45a71f-9a45-4f5d-8640-162c858b6f04.png\" alt=\"img\"></p>\n<h3 id=\"Misc29\"><a href=\"#Misc29\" class=\"headerlink\" title=\"Misc29\"></a>Misc29</h3><p>将gif文件拖入分帧器中可以发现共有八帧图片，进去010可以明显地看出来每张图片的分段。原图长宽为900*150，题目提示flag在图片下面，查找宽度150对应的16进制值（03 96）并且全部替换为03 FF再分帧可以看到从第四帧开始出现flag</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768482136-388100db-b0b2-426d-913a-645355e8f014.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768529199-60d9ce16-cab5-4b08-ab63-124ad2c80ad1.png\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698768537846-c53dd11c-a5d4-4398-9cc9-d0ca18ff8cd2.png\" alt=\"img\"></p>\n<h3 id=\"Misc30\"><a href=\"#Misc30\" class=\"headerlink\" title=\"Misc30\"></a>Misc30</h3><p>解压后得到bmp文件，根据题目提示可知图片正确的宽度为950，看到图片属性中宽度为900，进入010查找900对应的16进制值（03 84），但是直接查找没有发现宽度，查看文件头部发现有一串十六进制值为84 03，可能这串数字就代表的是文件的宽度，查找950对应的十六进制值为03 B6，于是将84替换为B6，发现图片出现flag。后期查找资料得知bmp文件大多数都是倒向的位图，因此要倒着写。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698769334102-8619b230-c59f-4ccb-a080-22ef04dee65a.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698769396309-69ea31f2-7d0d-4a06-972a-b0d4f548129a.png\" alt=\"img\"></p>\n<h3 id=\"Misc31\"><a href=\"#Misc31\" class=\"headerlink\" title=\"Misc31\"></a>Misc31</h3><p>同样的宽度设置不正确导致bmp文件失真修复题</p>\n<p>目前图片是 900*150&#x3D;135000个像素大小。<br><strong>每个像素点由3个字节（十六进制码6位）表示</strong>，<strong>每个字节负责控制一种颜色</strong>，分别为蓝（Blue）、绿（Green）、红（Red），用010打开发现看到共有 487253 个字节，文件头占 53个字节</p>\n<p>则正确的宽度应为 <strong>（487253-53） &#x2F; 3 &#x2F; 150 &#x3D; 1082 &#x3D;0x43a</strong>（结果取整）</p>\n<p>将84 03更改为 3A 04即可</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698770218499-96b2706d-8222-42c0-8a6c-c473f85ca011.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698770205303-496fda13-f4dc-45db-bc4d-3519710820ea.png\" alt=\"img\"></p>\n<h3 id=\"Misc32\"><a href=\"#Misc32\" class=\"headerlink\" title=\"Misc32\"></a>Misc32</h3><p>简单的png爆破宽高题，直接上脚本爆破即可</p>\n<h3 id=\"Misc33\"><a href=\"#Misc33\" class=\"headerlink\" title=\"Misc33\"></a>Misc33</h3><p>不要管是宽改了还是高改了，只要crc没有改就直接可以上脚本爆破</p>\n<h3 id=\"Misc34\"><a href=\"#Misc34\" class=\"headerlink\" title=\"Misc34\"></a>Misc34</h3><p>这道题的crc校验也被更改了，但是题目限定范围宽度一定是大于900的，那么就使用脚本将宽度从901开始挨个更改（我限定的范围是1200）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入所需的模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义源文件名和输出目录名</span></span><br><span class=\"line\">filename = <span class=\"string\">&quot;misc34.png&quot;</span></span><br><span class=\"line\">output_dir = <span class=\"string\">&quot;output&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果输出目录不存在，则创建它</span></span><br><span class=\"line\">os.makedirs(output_dir, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以二进制模式打开源文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"comment\"># 读取源文件的全部内容</span></span><br><span class=\"line\">    all_b = f.read()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 对于每个在901到1200范围内的整数i</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">901</span>,<span class=\"number\">1200</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 创建新文件名，包括输出目录和文件名</span></span><br><span class=\"line\">        name = os.path.join(output_dir, <span class=\"built_in\">str</span>(i) + <span class=\"string\">&quot;.png&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 以二进制写入模式打开新文件</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(name,<span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f1:</span><br><span class=\"line\">            <span class=\"comment\"># 创建新的图片数据，其中包含修改后的宽度信息</span></span><br><span class=\"line\">            im = all_b[:<span class=\"number\">16</span>]+struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>,i)+all_b[<span class=\"number\">20</span>:]</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 将新的图片数据写入到新文件中</span></span><br><span class=\"line\">            f1.write(im)</span><br></pre></td></tr></table></figure>\n\n<p>在output文件夹中就可以看到正确的flag在哪里</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698824027008-3c5c7742-d059-474d-adc1-af0e9c76d009.png\" alt=\"img\"></p>\n<p>发现文件无法直接打开，于是用tweakpng检查文件的crc并且将原来文件中错误的crc替换为正确的crc即可</p>\n<h3 id=\"Misc35\"><a href=\"#Misc35\" class=\"headerlink\" title=\"Misc35\"></a>Misc35</h3><p>相同的思路，但是文件格式变成了jpg，但是文件本体没有看到任何信息，尝试修改一下高度发现类似flag的图片</p>\n<p>​\t<img src=\"https://cdn.nlark.com/yuque/0/2023/jpeg/39298680/1698915256041-e775d328-bf6e-4888-adc9-bbd53f8bee46.jpeg\" alt=\"misc35.jpg\"></p>\n<p>那么稍微改动一下上面的脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置输出目录</span></span><br><span class=\"line\">output_dir = <span class=\"string\">&quot;output&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果输出目录不存在，则创建它</span></span><br><span class=\"line\">os.makedirs(output_dir, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置要读取的文件名</span></span><br><span class=\"line\">filename = <span class=\"string\">&quot;misc35.jpg&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以二进制模式打开文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"comment\"># 读取所有的字节</span></span><br><span class=\"line\">    all_b = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 遍历901到1200的范围</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">901</span>, <span class=\"number\">1200</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 创建新的文件名，包含输出目录和当前迭代的数字，扩展名为.jpg</span></span><br><span class=\"line\">        name = os.path.join(output_dir, <span class=\"built_in\">str</span>(i) + <span class=\"string\">&quot;.jpg&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 以二进制写入模式打开新文件</span></span><br><span class=\"line\">        f1 = <span class=\"built_in\">open</span>(name, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 创建新的图像数据，将原始数据的前159个字节与当前迭代数字打包成大端字节序的二进制数据，然后再加上原始数据的第161个字节及以后的所有字节</span></span><br><span class=\"line\">        im = all_b[:<span class=\"number\">159</span>] + struct.pack(<span class=\"string\">&#x27;&gt;h&#x27;</span>, i) + all_b[<span class=\"number\">161</span>:]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 将新的图像数据写入新文件</span></span><br><span class=\"line\">        f1.write(im)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 关闭新文件</span></span><br><span class=\"line\">        f1.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当宽度变成993的时候flag出现</p>\n<h3 id=\"Misc36\"><a href=\"#Misc36\" class=\"headerlink\" title=\"Misc36\"></a>Misc36</h3><p>先将图片调整到能看到gif下面隐写的类flag字样，然后将宽度在920到950之间进行爆破即可得出答案</p>\n<h3 id=\"Misc37\"><a href=\"#Misc37\" class=\"headerlink\" title=\"Misc37\"></a>Misc37</h3><p>分帧</p>\n<h3 id=\"Misc38\"><a href=\"#Misc38\" class=\"headerlink\" title=\"Misc38\"></a>Misc38</h3><p>分帧*</p>\n<h3 id=\"Misc39\"><a href=\"#Misc39\" class=\"headerlink\" title=\"Misc39\"></a>Misc39</h3><p>题目描述：</p>\n<p><strong>flag就像水，忽快忽慢地流</strong></p>\n<p>说明gif文件的帧速率不同，flag可能就在帧速率当中<em>（尝试帧间隔隐写）</em></p>\n<p>那么接下来需要一个新工具</p>\n<h4 id=\"imagemagick\"><a href=\"#imagemagick\" class=\"headerlink\" title=\"imagemagick\"></a><strong>imagemagick</strong></h4><p><code>sudo apt-get install imagemagick</code></p>\n<p>随后执行</p>\n<p><code>identify -format &quot;%T &quot; misc39.gif &gt; 1.txt</code></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990042594-cd1b51bd-abdd-4f0c-bf43-358a39d2f1ba.png\" alt=\"img\"></p>\n<p>发现只有37 36两个数字，尝试转换为二进制</p>\n<p>由于flag的格式一般都是41字节数据，于是将转化得出的的二进制转换成最后为41字节的字符串即可</p>\n<p>情况一：36&#x3D;0 37&#x3D;1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s=<span class=\"string\">&quot;11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101&quot;</span></span><br><span class=\"line\">flag=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">41</span>):</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(s[<span class=\"number\">7</span>*i:<span class=\"number\">7</span>*(i+<span class=\"number\">1</span>)],<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990613694-147d04c7-19f5-4035-aa38-4e9bbf4d0766.png\" alt=\"img\"></p>\n<p>情况二：36&#x3D;1 37&#x3D;0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00111000001011001100100011000010111001000000010000000100100101010011011000111100111010011010011001001100110001101000110100101000110010011101100100000111010011010100110110010011000111001101110001101001001100110000111101000110001101000111010011100001111010011111001011100101010001100000010</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s=<span class=\"string\">&quot;00111000001011001100100011000010111001000000010000000100100101010011011000111100111010011010011001001100110001101000110100101000110010011101100100000111010011010100110110010011000111001101110001101001001100110000111101000110001101000111010011100001111010011111001011100101010001100000010&quot;</span></span><br><span class=\"line\">flag=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">41</span>):</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(s[<span class=\"number\">7</span>*i:<span class=\"number\">7</span>*(i+<span class=\"number\">1</span>)],<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698990474263-44babec0-e8d9-46c0-9424-69c353b03447.png\" alt=\"img\"></p>\n<p>炸了捏</p>\n<h3 id=\"Misc40\"><a href=\"#Misc40\" class=\"headerlink\" title=\"Misc40\"></a>Misc40</h3><p>先来说一下这个png为什么会动</p>\n<h5 id=\"Apng\"><a href=\"#Apng\" class=\"headerlink\" title=\"Apng\"></a>Apng</h5><p>APNG 是 PNG 格式的一种扩展，可以支持动图。APNG 是普通 png 图片的升级版，它的后缀依然是.png，包含动态的情况下体积会比普通静态 png 打出数倍，可以做到无损的情况展示动态。APNG 是向下兼容的，扩展名也是.png ，不支持 APNG 的解码器会表现为 PNG 的形式，即显示 APNG 的第一帧图片。</p>\n<p>之前的Misc38我误以为是因为hoenyview的宽容性所以才能直接以动图的形式打开其实并不是，只是采用了APNG的格式而已</p>\n<p>那么再来介绍一个分解APNG的工具</p>\n<h4 id=\"APNG-Disassembler\"><a href=\"#APNG-Disassembler\" class=\"headerlink\" title=\"APNG Disassembler\"></a><a href=\"http://sourceforge.net/projects/apngdis/files/latest/download\">APNG Disassembler</a></h4><p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698992703461-46cd35b2-be87-433b-bc49-10356d45636b.png\" alt=\"img\"></p>\n<p>这款工具在分离apng的同时也会输出每张图片的delay</p>\n<p>然后这个delay文件就是这道题的关键，可以进行十进制转ascii从而得到flag（别问我是怎么知道的我在这里卡了大半天挨个试的）</p>\n<p>写个脚本来提取每个文件中的delay然后直接转换为ascii即可得到flag</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">69</span>):</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;apngframe&quot;</span> + <span class=\"built_in\">str</span>(i) + <span class=\"string\">&quot;.txt&quot;</span>)</span><br><span class=\"line\">    s = f.read()</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(s.split(<span class=\"string\">&quot;/&quot;</span>)[<span class=\"number\">0</span>][<span class=\"number\">6</span>:]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/39298680/1698992860154-6d1375cf-48ae-4943-aecc-8c15c02fadb8.png\" alt=\"img\"></p>\n<h3 id=\"Misc42\"><a href=\"#Misc42\" class=\"headerlink\" title=\"Misc42\"></a>Misc42</h3><p>使用010打开文件，发现有许多的IDAT块，放入tweakpng进行解析，发现IDAT块的个数与flag的格式长度相似，于是使用脚本检索所有idat块的字节数并将每一个块的字节数转换为ascii码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入binascii模块，用于处理二进制和ascii数据</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个函数，用于从png文件中提取idat块的字节数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_idat_bytes</span>(<span class=\"params\">png_file</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 以二进制模式打开png文件</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(png_file, <span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># 读取文件内容</span></span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">        <span class=\"comment\"># 将二进制数据转换为十六进制字符串</span></span><br><span class=\"line\">        hex_data = binascii.hexlify(data).decode()</span><br><span class=\"line\">        <span class=\"comment\"># 定义一个空列表，用于存储idat块的字节数</span></span><br><span class=\"line\">        idat_bytes = []</span><br><span class=\"line\">        <span class=\"comment\"># 定义一个变量，用于记录当前的位置</span></span><br><span class=\"line\">        pos = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 循环遍历十六进制字符串，直到找到所有的idat块</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 查找idat块的标识符，即49444154</span></span><br><span class=\"line\">            idat_pos = hex_data.find(<span class=\"string\">&quot;49444154&quot;</span>, pos)</span><br><span class=\"line\">            <span class=\"comment\"># 如果没有找到，说明已经到达文件的末尾，退出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> idat_pos == -<span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\"># 如果找到了，计算idat块的起始位置，即标识符前面的四个字节，表示块的长度</span></span><br><span class=\"line\">            start_pos = idat_pos - <span class=\"number\">8</span></span><br><span class=\"line\">            <span class=\"comment\"># 计算idat块的结束位置，即标识符后面的四个字节，表示块的校验和</span></span><br><span class=\"line\">            end_pos = idat_pos + <span class=\"number\">12</span></span><br><span class=\"line\">            <span class=\"comment\"># 截取idat块的十六进制字符串</span></span><br><span class=\"line\">            idat_hex = hex_data[start_pos:end_pos]</span><br><span class=\"line\">            <span class=\"comment\"># 将idat块的十六进制字符串转换为二进制数据</span></span><br><span class=\"line\">            idat_data = binascii.unhexlify(idat_hex)</span><br><span class=\"line\">            <span class=\"comment\"># 获取idat块的长度，即前四个字节</span></span><br><span class=\"line\">            idat_length = idat_data[:<span class=\"number\">4</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 将idat块的长度添加到列表中</span></span><br><span class=\"line\">            idat_bytes.append(idat_length)</span><br><span class=\"line\">            <span class=\"comment\"># 更新当前的位置，继续查找下一个idat块</span></span><br><span class=\"line\">            pos = end_pos</span><br><span class=\"line\">        <span class=\"comment\"># 返回idat块的字节数列表</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> idat_bytes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个函数，用于将字节数转换为ascii码</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bytes_to_ascii</span>(<span class=\"params\">bytes_list</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 定义一个空字符串，用于存储ascii码</span></span><br><span class=\"line\">    ascii_str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 循环遍历字节数列表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> bytes_list:</span><br><span class=\"line\">        <span class=\"comment\"># 将每个字节转换为十进制整数</span></span><br><span class=\"line\">        n = <span class=\"built_in\">int</span>.from_bytes(b, <span class=\"string\">&quot;big&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 将每个整数转换为ascii字符</span></span><br><span class=\"line\">        c = <span class=\"built_in\">chr</span>(n)</span><br><span class=\"line\">        <span class=\"comment\"># 将每个字符拼接到字符串中</span></span><br><span class=\"line\">        ascii_str += c</span><br><span class=\"line\">    <span class=\"comment\"># 返回ascii码字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ascii_str</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个png文件的路径，你可以根据你的实际情况修改</span></span><br><span class=\"line\">png_file = <span class=\"string\">&quot;misc42.png&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 调用get_idat_bytes函数，从png文件中提取idat块的字节数</span></span><br><span class=\"line\">idat_bytes = get_idat_bytes(png_file)</span><br><span class=\"line\"><span class=\"comment\"># 打印idat块的字节数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The bytes of IDAT chunks are:&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> idat_bytes:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"comment\"># 调用bytes_to_ascii函数，将idat块的字节数转换为ascii码</span></span><br><span class=\"line\">ascii_str = bytes_to_ascii(idat_bytes)</span><br><span class=\"line\"><span class=\"comment\"># 打印ascii码</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The ASCII code of IDAT chunks is:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ascii_str)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Misc43\"><a href=\"#Misc43\" class=\"headerlink\" title=\"Misc43\"></a>Misc43</h3><p>题目描述：<code>错误中隐藏着通往正确答案的道路</code></p>\n<p>使用010打开文件，发现有很多IDAT块，然后使用tweakpng打开文件，发现很多的crc都出错了，对应题目描述<code>错误中隐藏着通往正确答案的道路</code>，尝试将所有出错的crc校验码提取出来发现可能对应ascii码，于是使用脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calculate_crc</span>(<span class=\"params\">chunk_type, data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binascii.crc32(chunk_type + data) &amp; <span class=\"number\">0xffffffff</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_chunks</span>(<span class=\"params\">png_file</span>):</span><br><span class=\"line\">    png_file.seek(<span class=\"number\">8</span>)  <span class=\"comment\"># Skip the PNG signature</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        chunk_length = struct.unpack(<span class=\"string\">&#x27;!I&#x27;</span>, png_file.read(<span class=\"number\">4</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\">        chunk_type = png_file.read(<span class=\"number\">4</span>)</span><br><span class=\"line\">        data = png_file.read(chunk_length)</span><br><span class=\"line\">        crc = struct.unpack(<span class=\"string\">&#x27;!I&#x27;</span>, png_file.read(<span class=\"number\">4</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> chunk_type, data, crc</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> chunk_type == <span class=\"string\">b&#x27;IEND&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check_crc</span>(<span class=\"params\">png_file</span>):</span><br><span class=\"line\">    incorrect_crcs = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> chunk_type, data, crc <span class=\"keyword\">in</span> get_chunks(png_file):</span><br><span class=\"line\">        calculated_crc = calculate_crc(chunk_type, data)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> calculated_crc != crc <span class=\"keyword\">and</span> chunk_type == <span class=\"string\">b&#x27;IDAT&#x27;</span>:</span><br><span class=\"line\">            incorrect_crcs.append(<span class=\"built_in\">hex</span>(crc)[<span class=\"number\">2</span>:])  <span class=\"comment\"># Convert to hex and remove &quot;0x&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> incorrect_crcs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crc_to_ascii</span>(<span class=\"params\">crc_values</span>):</span><br><span class=\"line\">    ascii_values = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> crc <span class=\"keyword\">in</span> crc_values:</span><br><span class=\"line\">        <span class=\"comment\"># Start from the third character, and take every two characters as a hex number</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(crc), <span class=\"number\">2</span>):</span><br><span class=\"line\">            hex_value = crc[i:i + <span class=\"number\">2</span>]</span><br><span class=\"line\">            ascii_values.append(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_value, <span class=\"number\">16</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>.join(ascii_values)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;misc43.png&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    incorrect_crcs = check_crc(f)</span><br><span class=\"line\">    ascii_values = crc_to_ascii(incorrect_crcs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ascii_values)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>得到flag</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}